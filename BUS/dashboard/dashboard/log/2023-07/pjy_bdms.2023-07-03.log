2023-07-03 02:57:01.841 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=3h28s943ms418µs900ns).
2023-07-03 09:04:20.507 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-03 09:04:20.508 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-03 09:04:20.508 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-03 09:04:20.508 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-03 09:04:26.835 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=6h7m33s924ms32µs600ns).
2023-07-03 09:28:23.236 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 09:28:23.236 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 09:28:23.236 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-03 09:28:23.236 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 09:28:23.236 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-03 09:28:24.060 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 09:28:24.060 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 09:28:24.060 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-03 09:28:24.061 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 09:28:24.061 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-03 09:28:24.120 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 09:28:24.120 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 09:28:24.120 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-03 09:28:24.120 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 09:28:24.120 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-03 09:28:26.064 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 09:28:26.068 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-03 09:28:26.100 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 09:28:26.189 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$wtgp4A7Ez6a1T/BCw.4TRemTD0am5DlEGliTbtvGajs4Koccjy0RW
2023-07-03 09:28:26.279 INFO  [http-nio-10010-exec-1] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 09:28:31.176 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 09:28:31.176 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 09:28:31.176 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 09:28:31.177 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 09:28:31.178 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 09:28:31.180 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 09:28:31.183 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
53. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 2 msec}
2023-07-03 09:28:31.185 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 6 msec}
2023-07-03 09:28:31.191 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 5 msec}
2023-07-03 09:28:41.350 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 09:28:41.350 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 09:28:41.350 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 09:28:41.351 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 09:28:41.352 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 09:28:41.353 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:11:49.560 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 10:11:49.560 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 10:11:49.560 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 10:11:49.561 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:11:49.561 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:11:49.563 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:11:49.565 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 0 msec}
2023-07-03 10:11:49.569 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 7 msec}
2023-07-03 10:11:49.575 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 10:11:54.764 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:11:54.764 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:11:54.764 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:11:54.765 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:11:54.767 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:11:54.768 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:12:08.078 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:12:08.078 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:12:08.078 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:12:08.079 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:12:08.081 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:12:08.083 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-03 10:13:08.561 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 10:13:08.561 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 10:13:08.562 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 10:13:08.562 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:13:08.562 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:13:08.566 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
75. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:13:08.567 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
75. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:13:08.568 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 5 msec}
2023-07-03 10:13:08.571 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 3 msec}
2023-07-03 10:13:13.040 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:13:13.040 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:13:13.041 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:13:13.042 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:13:13.043 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:13:13.044 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-03 10:13:20.934 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:13:20.934 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:13:20.935 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:13:20.935 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:13:20.936 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:13:20.938 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-03 10:13:32.699 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:13:32.707 INFO  [http-nio-10010-exec-6] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-07-03 10:13:32.714 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
75. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:13:32.732 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
75. batching 33 statements:
 1:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '1종' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 12 msec}
2023-07-03 10:13:32.746 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:13:32.746 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:13:32.746 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:13:32.748 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
75. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 2 msec}
2023-07-03 10:13:32.749 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
75. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:14:42.489 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
75. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:14:42.498 INFO  [http-nio-10010-exec-1] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-07-03 10:14:42.500 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
76. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:14:42.513 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
76. batching 33 statements:
 1:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '1' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '2' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '3' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '4' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '1' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '1종' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '2' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '3' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '4' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 11 msec}
2023-07-03 10:14:42.530 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:14:42.530 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:14:42.530 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:14:42.531 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
76. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:14:42.533 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
76. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-03 10:15:02.150 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:15:02.150 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:15:02.150 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:15:02.151 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
76. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:15:02.152 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
76. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:15:02.153 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
76. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:15:20.001 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
76. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:15:20.010 INFO  [http-nio-10010-exec-5] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-07-03 10:15:20.011 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
77. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:15:20.023 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
77. batching 36 statements:
 1:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '000' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '1' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '2' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '3' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '4' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '999' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '1' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '1종' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '2' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '3' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '4' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 8 msec}
2023-07-03 10:15:20.035 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:15:20.035 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:15:20.035 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:15:20.037 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
77. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:15:20.039 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
77. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-03 10:15:34.541 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:15:34.542 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:15:34.542 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:15:34.543 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
77. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:15:34.544 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
77. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:15:34.545 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
77. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:33:15.201 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 10:33:15.201 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 10:33:15.202 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 10:33:15.202 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:33:15.203 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
85. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:33:15.204 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
86. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:33:15.206 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
86. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:33:15.208 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
85. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 10:33:15.214 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
85. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 5 msec}
2023-07-03 10:33:19.820 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:33:19.820 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:33:19.820 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:33:19.821 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
85. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:33:19.822 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
85. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:33:19.824 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
85. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:33:32.645 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
85. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:33:32.654 INFO  [http-nio-10010-exec-3] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-07-03 10:33:32.655 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
86. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:33:32.665 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
86. batching 38 statements:
 1:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , 'a' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , 'a' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , 'b' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '1' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '2' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '3' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '4' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , 'b' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , 'c' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '1종' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '2' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '3' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '4' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '999' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , 'c' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 8 msec}
2023-07-03 10:33:32.678 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:33:32.678 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:33:32.678 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:33:32.679 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
86. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:33:32.680 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
86. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:36:40.599 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:36:40.600 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:36:40.600 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:36:40.601 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
87. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:36:40.602 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
87. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:36:40.603 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
87. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-03 10:36:49.847 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
87. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:36:49.854 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
87. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'
 {executed in 1 msec}
2023-07-03 10:36:49.862 INFO  [http-nio-10010-exec-3] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-07-03 10:36:49.863 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
88. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:36:49.881 ERROR [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
88. batching 38 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , 'a' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , ' ' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
14:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , ' ' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
15:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
16:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , ' ' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
17:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , ' ' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
18:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , ' ' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
19:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , ' ' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
20:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
21:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
22:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
23:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
24:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
25:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
26:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '1' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
27:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '1종' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
28:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '2' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
29:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '3' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
30:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '4' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
31:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '999' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
32:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , 'c' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
33:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
34:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
35:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
36:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
37:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
38:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 {FAILED after 14 msec}
org.h2.jdbc.JdbcBatchUpdateException: Unique index or primary key violation: "PUBLIC.PRIMARY_KEY_50 ON PUBLIC.TBM_COMMON_CODE_INFO(COMPANY_NO, CODE_GB, CODE_ID) VALUES 54"; SQL statement:
INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , ? , ? , ? , ? , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')) [23505-200]
	at org.h2.jdbc.JdbcPreparedStatement.executeBatch(JdbcPreparedStatement.java:1235)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.executeBatch(StatementSpy.java:571)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$2(JdbcTemplate.java:950)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:617)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:647)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:936)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:366)
	at com.pjy.dashboard.dao.DynamicSqlDao.batchInsert(DynamicSqlDao.java:737)
	at com.pjy.dashboard.dao.DynamicSqlDao$$FastClassBySpringCGLIB$$8af24191.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.dao.DynamicSqlH2Dao$$EnhancerBySpringCGLIB$$738f394f.batchInsert(<generated>)
	at com.pjy.dashboard.service.DynamicSqlService.insertInfo(DynamicSqlService.java:672)
	at com.pjy.dashboard.controller.TestController.BUS_insertInfo(TestController.java:399)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d473ec9e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 10:36:49.943 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:36:49.943 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:36:49.943 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:36:49.945 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
88. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:36:49.949 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
88. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:39:11.895 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 10:39:11.895 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 10:39:11.895 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 10:39:11.896 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
88. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:39:11.896 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
89. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:39:11.898 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
90. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:39:11.899 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
90. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:39:11.902 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
88. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 5 msec}
2023-07-03 10:39:11.906 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
88. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 10:39:16.092 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:39:16.093 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:39:16.093 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:39:16.094 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
88. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:39:16.095 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
88. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-03 10:39:16.096 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
88. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:39:25.221 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
88. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:39:25.223 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
88. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'
 {executed in 1 msec}
2023-07-03 10:39:25.229 INFO  [http-nio-10010-exec-5] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-07-03 10:39:25.230 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
90. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:39:25.240 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
90. batching 32 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , 'a' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
14:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
15:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
16:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
17:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
18:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
19:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
20:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '1' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
21:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '1종' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
22:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '2' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
23:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '3' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
24:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '4' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
25:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '999' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
26:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , 'c' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
27:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
28:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
29:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
30:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
31:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
32:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 {executed in 8 msec}
2023-07-03 10:39:25.250 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:39:25.250 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:39:25.250 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:39:25.251 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
90. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:39:25.252 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
90. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:39:55.628 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
90. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:39:55.629 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
90. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'
 {executed in 1 msec}
2023-07-03 10:39:55.637 INFO  [http-nio-10010-exec-7] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-07-03 10:39:55.638 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:39:55.645 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
91. batching 25 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
14:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
15:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
16:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
17:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
18:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
19:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '1종' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
20:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
21:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
22:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
23:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
24:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
25:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 {executed in 5 msec}
2023-07-03 10:39:55.656 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:39:55.656 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:39:55.656 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:39:55.658 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-03 10:39:55.660 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:43:53.498 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 10:43:53.498 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 10:43:53.499 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 10:43:53.499 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:43:53.500 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:43:53.501 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
93. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:43:53.503 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
93. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 0 msec}
2023-07-03 10:43:53.504 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 10:43:53.509 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 5 msec}
2023-07-03 10:44:00.140 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:44:00.143 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
93. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:44:00.144 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
93. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:44:00.295 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:44:00.296 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:44:00.296 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:44:00.297 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
93. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:44:00.299 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
93. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-03 10:44:09.652 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
93. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:44:09.653 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
93. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'
 {executed in 1 msec}
2023-07-03 10:44:09.663 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-07-03 10:44:09.664 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
94. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:44:09.671 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
94. batching 26 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
14:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
15:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
16:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
17:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
18:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
19:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '기절' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
20:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '1종' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
21:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
22:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
23:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
24:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
25:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
26:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 {executed in 5 msec}
2023-07-03 10:44:09.684 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:44:09.684 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:44:09.684 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:44:09.685 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
94. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:44:09.687 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
94. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-03 10:44:54.711 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
94. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:44:54.713 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
95. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:44:54.715 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
95. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:44:54.869 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:44:54.869 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:44:54.869 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:44:54.870 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
95. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:44:54.871 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
95. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:45:13.922 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
95. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:45:13.924 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
96. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:45:13.927 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
96. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:45:14.079 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:45:14.079 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:45:14.079 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:45:14.081 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
96. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:45:14.082 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
96. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:45:53.914 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 10:45:53.914 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 10:45:53.914 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 10:45:53.914 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
96. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:45:53.915 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
97. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:45:53.918 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
98. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:45:53.919 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
98. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:45:53.920 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
96. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 6 msec}
2023-07-03 10:45:53.927 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
96. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 5 msec}
2023-07-03 10:46:03.231 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:46:03.232 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:46:03.232 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:46:03.232 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
96. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:46:03.233 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
96. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:46:03.234 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
96. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:46:12.796 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
96. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:46:12.798 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
96. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'
 {executed in 1 msec}
2023-07-03 10:46:12.805 INFO  [http-nio-10010-exec-9] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-07-03 10:46:12.806 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
98. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:46:12.814 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
98. batching 27 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '기절' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
14:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
15:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
16:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
17:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
18:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
19:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
20:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '반성' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
21:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '1종' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
22:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
23:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
24:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
25:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
26:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
27:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 {executed in 7 msec}
2023-07-03 10:46:12.826 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:46:12.826 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:46:12.826 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:46:12.828 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
98. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 2 msec}
2023-07-03 10:46:12.829 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
98. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-03 10:46:15.325 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
98. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:46:15.327 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
99. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:46:15.336 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
99. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:49:50.971 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
99. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:49:50.978 INFO  [http-nio-10010-exec-10] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_EMP_WORKING_LOG KEY (company_no,emp_nm,work_date,work_time) select  '100' , :work_date , :work_time , :emp_nm , :route_nm , :car_no , :code_type1 , :code_type2 , :code_type3 , :detail_desc , :disposition_amt , :disposition_date , :disposition_result , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-07-03 10:49:50.980 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
100. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:49:50.981 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
100. batching 1 statements:
1:  MERGE INTO TBM_EMP_WORKING_LOG KEY (company_no,emp_nm,work_date,work_time) select  '100' , '2023-04-11' , '10:49:50' , '김명현' , '20.0' , '3556.0' , '민원' , '-' , '' , '객 탈때마다 아이씨 한다며 불편민원 들어옴, 몇일전에도 모래네시장 어르신분들 늦게 탑승한다고 짜증냈다고하여 민원 들어왔었음	11111111111111
' , '0' , '2023-07-03' , '-' , '-' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 1 msec}
2023-07-03 10:51:07.134 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
100. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:51:07.139 INFO  [http-nio-10010-exec-1] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_EMP_WORKING_LOG KEY (company_no,emp_nm,work_date,work_time) select  '100' , :work_date , :work_time , :emp_nm , :route_nm , :car_no , :code_type1 , :code_type2 , :code_type3 , :detail_desc , :disposition_amt , :disposition_date , :disposition_result , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-07-03 10:51:07.140 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:51:07.141 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
101. batching 1 statements:
1:  MERGE INTO TBM_EMP_WORKING_LOG KEY (company_no,emp_nm,work_date,work_time) select  '100' , '2023-04-11' , '10:51:07' , '김명현' , '20.0' , '3556' , '민원' , '-' , '' , '객 탈때마다 아이씨 한다며 불편민원 들어옴, 몇일전에도 모래네시장 어르신분들 늦게 탑승한다고 짜증냈다고하여 민원 들어왔었음	11111111111111
' , '0' , '2023-07-03' , '-' , '-' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 1 msec}
2023-07-03 10:52:04.263 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 10:52:04.263 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 10:52:04.264 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 10:52:04.264 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:52:04.264 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
102. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:52:04.266 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
103. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:52:04.267 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
103. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:52:04.272 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
102. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 7 msec}
2023-07-03 10:52:04.277 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
102. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 3 msec}
2023-07-03 10:52:23.379 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 10:52:23.379 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 10:52:23.379 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 10:52:23.380 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
103. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:52:23.380 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
102. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:52:23.382 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
104. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:52:23.383 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
104. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:52:23.385 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
102. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 10:52:23.392 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
102. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 6 msec}
2023-07-03 10:53:42.282 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 10:53:42.282 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 10:53:42.283 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 10:53:42.284 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
104. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:53:42.284 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
102. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:53:42.285 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
105. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:53:42.287 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
105. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:53:42.288 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
102. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 10:53:42.292 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
102. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 10:56:04.110 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 10:56:04.110 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 10:56:04.110 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 10:56:04.111 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
102. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:56:04.111 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
105. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:56:04.113 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
106. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:56:04.116 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
106. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:56:04.116 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
105. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 5 msec}
2023-07-03 10:56:04.121 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
105. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 10:56:12.064 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:56:12.064 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:56:12.064 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:56:12.065 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
105. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:56:12.067 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
105. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:56:12.068 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
105. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:56:18.479 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
105. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:56:18.480 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
106. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:56:18.481 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
106. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 0 msec}
2023-07-03 10:56:32.840 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 10:56:32.840 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 10:56:32.841 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 10:56:32.841 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
106. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:56:32.841 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
107. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:56:32.843 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
108. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:56:32.844 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
108. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:56:32.845 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
107. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 10:56:32.850 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
107. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 10:56:37.640 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:56:37.640 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:56:37.640 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:56:37.641 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
107. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:56:37.643 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
107. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:56:37.644 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
107. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:56:40.186 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
107. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:56:40.188 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
108. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:56:40.189 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
108. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 0 msec}
2023-07-03 10:57:18.827 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 10:57:18.827 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
108. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:57:18.827 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 10:57:18.828 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 10:57:18.828 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
109. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:57:18.829 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
110. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:57:18.831 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
110. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 0 msec}
2023-07-03 10:57:18.833 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
109. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 10:57:18.839 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
109. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 5 msec}
2023-07-03 10:57:24.664 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:57:24.664 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:57:24.664 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:57:24.665 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
109. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:57:24.666 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
109. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:57:24.668 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
109. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 2 msec}
2023-07-03 10:57:46.535 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
109. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:57:46.537 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
110. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 10:57:46.538 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
110. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 10:58:46.808 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
110. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:58:46.810 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
111. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:58:46.812 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
111. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 0 msec}
2023-07-03 10:59:02.401 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 10:59:02.401 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 10:59:02.402 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 10:59:02.402 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
111. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:59:02.404 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:59:02.405 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 10:59:11.438 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
111. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:59:11.439 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 10:59:11.441 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
112. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 11:49:27.700 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-03 11:49:27.700 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-03 11:49:27.700 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-03 11:49:27.700 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-03 12:27:11.200 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=36m11s968ms440µs400ns).
2023-07-03 12:27:39.017 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 12:27:39.017 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 12:27:39.017 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-03 12:27:39.017 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 12:27:39.017 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-03 12:27:39.028 ERROR [http-nio-10010-exec-3] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d473ec9e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 12:27:39.034 ERROR [http-nio-10010-exec-3] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d473ec9e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 12:27:39.036 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 12:27:39.036 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 12:27:39.036 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-03 12:27:39.036 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 12:27:39.036 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-03 12:27:39.182 ERROR [http-nio-10010-exec-3] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d473ec9e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 12:27:39.183 ERROR [http-nio-10010-exec-3] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d473ec9e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 12:27:39.184 ERROR [http-nio-10010-exec-3] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d473ec9e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-07-03 12:27:39.229 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 12:27:39.229 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 12:27:39.229 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-03 12:27:39.229 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 12:27:39.229 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-03 12:27:40.856 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 12:27:40.858 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
142. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-03 12:27:40.859 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 12:27:40.952 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$P9UReklmgefJQ.zsYY7b8usU6V2KnaUURZd1RGOPZFywHQPrZKPQS
2023-07-03 12:27:41.043 INFO  [http-nio-10010-exec-4] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 12:27:43.547 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 12:27:43.547 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 12:27:43.547 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 12:27:43.548 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 12:27:43.549 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
143. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 12:27:43.551 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
144. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 12:27:43.553 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
144. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 12:27:43.555 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 6 msec}
2023-07-03 12:27:43.560 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 13:20:06.055 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-03 13:20:06.056 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-03 13:20:06.056 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-03 13:20:06.056 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-03 14:38:27.971 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 14:38:27.971 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 14:38:27.971 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-03 14:38:27.971 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 14:38:27.971 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-03 14:38:28.285 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d473ec9e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 14:38:28.289 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d473ec9e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 14:38:28.291 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 14:38:28.292 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 14:38:28.292 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-03 14:38:28.292 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 14:38:28.292 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-03 14:38:28.313 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d473ec9e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 14:38:28.315 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d473ec9e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 14:38:28.316 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d473ec9e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-07-03 14:38:28.369 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 14:38:28.369 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 14:38:28.369 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-03 14:38:28.369 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 14:38:28.369 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-03 14:38:29.809 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
203. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 14:38:29.810 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
203. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-03 14:38:29.814 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 14:38:29.907 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$JU7pTXCqbwmbX10iGUXeteMQSWwFd8QL8Yg1G.OgiVdxTQB2P5XJ2
2023-07-03 14:38:29.997 INFO  [http-nio-10010-exec-1] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 14:49:24.691 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 18072 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-03 14:49:24.697 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-03 14:49:24.756 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-03 14:49:24.757 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-03 14:49:26.166 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 14:49:26.166 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-03 14:49:26.314 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 137ms. Found 3 JPA repository interfaces.
2023-07-03 14:49:26.675 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 14:49:26.675 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-03 14:49:26.726 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 14:49:26.726 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 14:49:26.727 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 14:49:26.727 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 52ms. Found 0 JDBC repository interfaces.
2023-07-03 14:49:27.175 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-03 14:49:27.244 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-03 14:49:27.244 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 14:49:27.244 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 14:49:27.244 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 14:49:27.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 14:49:27.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-03 14:49:27.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-03 14:49:27.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 14:49:27.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 14:49:27.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 14:49:27.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 14:49:27.246 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 14:49:27.318 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$b7e909d1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 14:49:27.374 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-03 14:49:27.461 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$a1df6dfe] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 14:49:27.546 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 14:49:27.548 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@573d3f35' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 14:49:27.554 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$c6b410b0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 14:49:27.564 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$ec0928c6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 14:49:27.568 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 14:49:27.569 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 14:49:27.591 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$931a5c4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 14:49:27.619 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$88b1f2f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 14:49:27.764 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-03 14:49:27.770 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-03 14:49:28.233 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-03 14:49:28.250 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-03 14:49:28.261 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-03 14:49:28.262 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-03 14:49:29.176 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-03 14:49:29.194 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-03 14:49:29.194 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4437 ms
2023-07-03 14:49:30.030 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@4bf42568 with name: jasyptStringEncryptor
2023-07-03 14:49:30.092 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-03 14:49:30.191 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-03 14:49:30.195 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-03 14:49:30.968 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-03 14:49:31.385 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-03 14:49:31.461 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-03 14:49:31.463 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-03 14:49:31.621 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-03 14:49:31.862 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 14:49:31.879 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-03 14:49:32.644 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 14:49:32.647 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-03 14:49:32.695 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-03 14:49:32.956 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-03 14:49:34.038 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-03 14:49:34.048 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-03 14:49:34.245 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-03 14:49:34.246 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-03 14:49:34.246 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-03 14:49:34.246 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-03 14:49:34.246 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-03 14:49:34.246 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-03 14:49:34.246 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-03 14:49:34.246 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-03 14:49:34.246 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-03 14:49:34.405 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7ab3fa2e, org.springframework.security.web.context.SecurityContextPersistenceFilter@36ae63c8, org.springframework.security.web.header.HeaderWriterFilter@5047f455, org.springframework.web.filter.CorsFilter@267ca92, org.springframework.security.web.authentication.logout.LogoutFilter@f386e85, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@32575657, org.springframework.security.web.session.ConcurrentSessionFilter@17b5a61c, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@3011941e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@14c551c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2cb4c051, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@20a662f, org.springframework.security.web.session.SessionManagementFilter@4d186b11, org.springframework.security.web.access.ExceptionTranslationFilter@4e0955d9, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1e44efdb]
2023-07-03 14:49:34.427 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-03 14:49:34.783 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-03 14:49:34.861 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-03 14:49:35.281 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 14:49:36.112 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-03 14:49:36.142 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-03 14:49:36.285 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-03 14:49:36.289 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-03 14:49:36.344 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-03 14:49:36.349 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 12.138 seconds (JVM running for 14.649)
2023-07-03 14:49:36.350 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 14:49:36.350 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-03 14:49:36.350 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 14:49:37.575 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-03 14:49:37.576 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-03 14:49:37.598 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 22 ms
2023-07-03 14:51:08.944 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 14:51:08.944 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 14:51:08.944 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-03 14:51:08.944 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 14:51:08.945 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-03 14:51:09.642 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c39f41dc.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 14:51:09.649 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c39f41dc.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 14:51:09.658 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 14:51:09.659 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 14:51:09.659 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-03 14:51:09.659 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 14:51:09.659 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-03 14:51:09.804 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c39f41dc.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 14:51:09.805 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c39f41dc.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 14:51:09.807 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c39f41dc.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 98 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 101 common frames omitted
2023-07-03 14:51:10.202 WARN  [http-nio-10010-exec-2] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [173] milliseconds.
2023-07-03 14:51:10.281 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 14:51:10.281 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 14:51:10.281 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-03 14:51:10.281 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 14:51:10.281 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-03 14:51:12.295 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-03 14:51:12.302 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-03 14:51:12.321 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 14:51:12.414 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$l7cLn3FcGwxlZqd3vw93CeHeLIOt1IZpzP47jyIb6UVbmW3iTsIgu
2023-07-03 14:51:12.506 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 14:52:10.061 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@41057e2a
2023-07-03 14:52:10.062 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 14:52:10.154 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '@fromDate' and '@toDate' order by a.work_date,a.work_time
2023-07-03 14:52:10.169 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 14:52:10.172 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '@fromDate' and '@toDate' order by a.work_date,a.work_time
 {executed in 1 msec}
2023-07-03 14:52:10.180 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '@fromDate' and '@toDate' order by a.work_date,a.work_time
 {executed in 0 msec}
2023-07-03 14:56:05.033 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-07-03 14:56:05.034 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 14:56:05.038 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 14:56:05.039 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 14:56:05.040 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-07-03 14:56:46.087 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-07-03 14:56:46.088 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 14:56:46.088 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 14:56:46.089 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 14:56:46.089 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-07-03 14:56:55.025 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-07-03 14:56:55.026 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 14:56:55.027 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 14:56:55.028 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 14:56:55.028 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-07-03 15:26:12.689 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 30660 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-03 15:26:12.694 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-03 15:26:12.750 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-03 15:26:12.750 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-03 15:26:13.952 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 15:26:13.952 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-03 15:26:14.113 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 150ms. Found 3 JPA repository interfaces.
2023-07-03 15:26:14.458 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 15:26:14.458 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-03 15:26:14.506 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 15:26:14.507 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 15:26:14.508 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 15:26:14.508 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 49ms. Found 0 JDBC repository interfaces.
2023-07-03 15:26:14.953 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-03 15:26:15.025 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-03 15:26:15.025 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 15:26:15.025 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 15:26:15.026 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 15:26:15.026 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 15:26:15.026 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-03 15:26:15.026 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-03 15:26:15.026 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 15:26:15.027 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 15:26:15.027 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 15:26:15.027 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 15:26:15.027 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 15:26:15.089 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$e2afbd61] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 15:26:15.143 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-03 15:26:15.236 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$cca6218e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 15:26:15.325 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 15:26:15.327 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@7e16962b' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 15:26:15.333 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$f17ac440] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 15:26:15.344 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$16cfdc56] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 15:26:15.350 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 15:26:15.350 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 15:26:15.371 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$33f85954] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 15:26:15.401 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$b378a686] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 15:26:15.563 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-03 15:26:15.570 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-03 15:26:16.005 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-03 15:26:16.022 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-03 15:26:16.034 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-03 15:26:16.034 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-03 15:26:16.423 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-03 15:26:16.434 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-03 15:26:16.435 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3685 ms
2023-07-03 15:26:17.289 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@2d181d76 with name: jasyptStringEncryptor
2023-07-03 15:26:17.347 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-03 15:26:17.440 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-03 15:26:17.445 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-03 15:26:18.313 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-03 15:26:18.688 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-03 15:26:18.774 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-03 15:26:18.776 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-03 15:26:18.940 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-03 15:26:19.200 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:26:19.218 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-03 15:26:19.983 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:26:19.987 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 2 msec}
2023-07-03 15:26:20.037 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-03 15:26:20.289 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-03 15:26:21.361 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-03 15:26:21.372 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-03 15:26:21.556 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-03 15:26:21.556 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-03 15:26:21.556 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-03 15:26:21.556 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-03 15:26:21.556 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-03 15:26:21.556 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-03 15:26:21.556 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-03 15:26:21.556 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-03 15:26:21.557 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-03 15:26:21.723 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5029c803, org.springframework.security.web.context.SecurityContextPersistenceFilter@42971dee, org.springframework.security.web.header.HeaderWriterFilter@64fda86b, org.springframework.web.filter.CorsFilter@6b4c0e7a, org.springframework.security.web.authentication.logout.LogoutFilter@32597bf4, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@722f6cb1, org.springframework.security.web.session.ConcurrentSessionFilter@6cdae707, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@574f8352, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1aa3e3e5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4e85e8cd, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7aaf9b7b, org.springframework.security.web.session.SessionManagementFilter@4657e881, org.springframework.security.web.access.ExceptionTranslationFilter@4242cb01, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7d257a72]
2023-07-03 15:26:21.749 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-03 15:26:22.119 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-03 15:26:22.196 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-03 15:26:22.610 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-03 15:26:23.428 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-03 15:26:23.456 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-03 15:26:23.607 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-03 15:26:23.611 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-03 15:26:23.681 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-03 15:26:23.686 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.478 seconds (JVM running for 13.081)
2023-07-03 15:26:23.687 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 15:26:23.687 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-03 15:26:23.687 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 15:26:24.664 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-03 15:26:24.664 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-03 15:26:24.686 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 22 ms
2023-07-03 15:26:49.975 WARN  [http-nio-10010-exec-1] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [163] milliseconds.
2023-07-03 15:26:50.755 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 15:26:50.755 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 15:26:50.756 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-03 15:26:50.756 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 15:26:50.756 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-03 15:27:38.493 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:27:38.504 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-03 15:27:38.530 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 15:27:38.626 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$uqDknaHA3K7VT/3J3DxUGuJdGJLKt4TckNcCU/hkl.HVTPq00nIOO
2023-07-03 15:27:38.720 INFO  [http-nio-10010-exec-4] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 15:28:14.048 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:28:14.059 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-03 15:28:14.059 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 3 msec}
2023-07-03 15:28:14.061 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 15:28:14.348 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 256 msec}
2023-07-03 15:29:05.091 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:29:05.092 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:29:05.093 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 15:29:05.095 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:29:05.377 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 276 msec}
2023-07-03 15:30:15.617 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:30:15.617 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:30:15.619 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 15:30:15.621 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:30:15.872 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 247 msec}
2023-07-03 15:31:06.843 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:31:06.847 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 15:31:13.236 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6384 msec}
2023-07-03 15:32:03.484 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:32:03.484 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:32:03.485 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 15:32:03.487 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:32:03.742 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 249 msec}
2023-07-03 15:32:08.764 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:32:08.767 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 0 msec}
2023-07-03 15:32:15.054 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6283 msec}
2023-07-03 15:34:01.041 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:34:01.041 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:34:01.042 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 15:34:01.044 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:34:01.309 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 261 msec}
2023-07-03 15:34:04.761 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:34:04.763 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 0 msec}
2023-07-03 15:34:04.983 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 216 msec}
2023-07-03 15:35:28.639 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:35:28.639 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:35:28.640 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 15:35:28.643 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 15:35:28.902 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 254 msec}
2023-07-03 15:35:32.156 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:35:32.159 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:35:32.384 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 220 msec}
2023-07-03 15:36:00.833 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:36:00.834 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:36:00.834 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 15:36:00.837 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:36:01.083 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 242 msec}
2023-07-03 15:36:05.387 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:36:05.389 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:36:11.559 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6167 msec}
2023-07-03 15:37:12.125 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:37:12.125 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:37:12.126 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 15:37:12.127 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:37:12.405 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 271 msec}
2023-07-03 15:37:20.331 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:37:20.333 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:37:26.792 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6454 msec}
2023-07-03 15:37:41.583 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:37:41.584 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 15:37:41.584 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:37:41.588 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:37:41.854 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 261 msec}
2023-07-03 15:37:45.289 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:37:45.292 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:37:51.548 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6250 msec}
2023-07-03 15:38:55.418 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:38:55.419 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:38:55.419 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 15:38:55.422 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 15:38:55.667 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 240 msec}
2023-07-03 15:38:59.885 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:38:59.888 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:39:06.309 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6416 msec}
2023-07-03 15:43:03.401 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:43:03.401 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:43:03.402 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 15:43:03.404 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 15:43:03.674 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 265 msec}
2023-07-03 15:43:08.344 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:43:08.347 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:43:14.820 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6470 msec}
2023-07-03 15:49:38.981 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:49:38.981 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:49:38.982 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 15:49:38.984 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:49:39.237 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 248 msec}
2023-07-03 15:49:44.104 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:49:44.107 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:49:50.440 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6329 msec}
2023-07-03 15:50:12.969 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:50:12.971 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
12. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-03 15:50:12.973 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 15:50:13.077 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$Sj6PMk5nCHyIxdaKzEsmBOf.1YPxcXZBeuKywa5H0/NZQlXEcKim.
2023-07-03 15:50:13.168 INFO  [http-nio-10010-exec-8] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 15:50:15.546 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:50:15.546 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:50:15.548 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 15:50:15.549 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:50:15.810 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 256 msec}
2023-07-03 15:50:28.248 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:50:28.251 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 15:50:34.679 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6423 msec}
2023-07-03 15:50:56.959 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:50:56.960 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
12. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-03 15:50:56.961 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 15:50:57.054 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$DcfvDEQ3imhdG9osV/BHFOzTkytfKuXi4ySfh43EfYFr7wbfCXDOu
2023-07-03 15:50:57.148 INFO  [http-nio-10010-exec-1] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 15:50:59.255 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:50:59.255 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:50:59.256 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 15:50:59.259 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 15:50:59.511 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 247 msec}
2023-07-03 15:51:04.424 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:51:04.429 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:51:10.733 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6298 msec}
2023-07-03 15:52:34.119 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:52:34.119 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:52:34.120 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 15:52:34.123 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:52:34.378 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 249 msec}
2023-07-03 15:52:39.339 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:52:39.342 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:52:45.624 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6275 msec}
2023-07-03 15:53:24.608 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:53:24.609 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:53:24.610 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 15:53:24.612 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 15:53:24.858 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 243 msec}
2023-07-03 15:53:33.430 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:53:33.432 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:53:39.885 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '20번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '20번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6449 msec}
2023-07-03 15:53:58.009 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:53:58.011 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:54:04.621 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6602 msec}
2023-07-03 15:54:46.945 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:54:46.945 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:54:46.946 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 15:54:46.947 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:54:47.204 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 253 msec}
2023-07-03 15:54:51.501 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 15:54:51.504 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:54:57.699 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6192 msec}
2023-07-03 15:57:34.827 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:57:34.827 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:57:34.828 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 15:57:34.831 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:57:35.092 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 256 msec}
2023-07-03 15:57:43.336 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 15:57:43.339 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 15:57:49.511 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6167 msec}
2023-07-03 16:00:45.714 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:00:45.714 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:00:45.715 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 16:00:45.717 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:00:45.970 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 249 msec}
2023-07-03 16:03:53.928 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:03:53.929 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 16:03:53.930 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:03:53.933 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:03:54.181 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 245 msec}
2023-07-03 16:05:13.958 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:05:13.959 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 16:05:13.961 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:05:13.963 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:05:14.215 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 249 msec}
2023-07-03 16:06:23.700 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:06:23.700 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:06:23.701 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 16:06:23.702 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:06:23.990 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 284 msec}
2023-07-03 16:06:55.452 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:06:55.454 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 16:06:55.454 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:06:55.457 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:06:55.699 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 238 msec}
2023-07-03 16:07:48.447 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:07:48.447 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:07:48.448 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 16:07:48.450 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:07:48.714 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 257 msec}
2023-07-03 16:08:01.782 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:08:01.782 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:08:01.782 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 16:08:01.785 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:08:02.042 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 254 msec}
2023-07-03 16:08:19.479 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:08:19.479 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:08:19.480 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 16:08:19.482 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 0 msec}
2023-07-03 16:08:19.739 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 254 msec}
2023-07-03 16:08:27.690 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:08:27.693 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:08:33.891 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6193 msec}
2023-07-03 16:09:24.514 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:09:24.514 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:09:24.514 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 16:09:24.517 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:09:24.776 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 254 msec}
2023-07-03 16:09:29.027 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:09:29.029 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:09:35.253 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6217 msec}
2023-07-03 16:18:27.206 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
25. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:18:27.206 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:18:27.207 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 16:18:27.210 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
25. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:18:27.451 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
25. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 236 msec}
2023-07-03 16:18:40.243 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
25. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:18:40.244 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
25. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-03 16:18:40.245 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 16:18:40.340 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$d71fE/Vshylqyq0.PWeJ0.LCLHMLLJScsXzB7d72.WUuIUA1kaP82
2023-07-03 16:18:40.433 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 16:18:41.939 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:18:41.940 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 16:18:41.940 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
25. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:18:41.943 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
25. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:18:42.204 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
25. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 255 msec}
2023-07-03 16:22:26.070 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:22:26.070 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
25. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:22:26.071 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 16:22:26.073 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
25. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 0 msec}
2023-07-03 16:22:26.344 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
25. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 267 msec}
2023-07-03 16:32:34.715 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:32:34.717 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:32:34.717 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 16:32:34.720 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:32:34.990 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 266 msec}
2023-07-03 16:41:20.311 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
35. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:41:20.311 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:41:20.312 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
35. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 16:41:20.315 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:41:20.574 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 256 msec}
2023-07-03 16:41:44.084 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:41:44.085 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
35. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:41:44.085 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
35. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 16:41:44.087 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:41:44.333 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 241 msec}
2023-07-03 16:41:54.889 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:41:54.889 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
35. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:41:54.890 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
34. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 16:41:54.892 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
35. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:41:55.199 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
35. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 302 msec}
2023-07-03 16:42:02.399 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:42:02.401 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:42:02.664 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 259 msec}
2023-07-03 16:42:05.525 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:42:05.529 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:42:11.591 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6055 msec}
2023-07-03 16:48:32.274 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:48:32.275 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 16:48:32.275 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
44. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:48:32.280 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:48:32.540 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 255 msec}
2023-07-03 16:48:36.533 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:48:36.535 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
43. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:48:42.616 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
43. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6076 msec}
2023-07-03 16:51:25.909 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:51:25.910 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
44. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:51:25.910 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 16:51:25.914 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:51:26.159 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 240 msec}
2023-07-03 16:51:31.225 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:51:31.227 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
43. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:51:37.393 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
43. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6161 msec}
2023-07-03 16:52:36.810 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:52:36.810 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
44. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:52:36.811 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 16:52:36.813 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:52:37.051 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 235 msec}
2023-07-03 16:54:17.592 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
44. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:54:17.592 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:54:17.593 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 16:54:17.595 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 0 msec}
2023-07-03 16:54:17.837 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230701')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = ''
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-07' || '%'
			AND a.ROUTE_NM = ''
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 239 msec}
2023-07-03 16:55:21.299 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:55:21.300 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 16:55:39.428 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
44. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 16:55:39.430 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
44. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 16:55:44.758 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
44. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 16:55:44.762 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 16:55:50.842 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6075 msec}
2023-07-03 17:00:44.124 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
44. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:00:44.125 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
44. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 17:00:48.193 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
44. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:00:48.197 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 17:00:54.342 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6142 msec}
2023-07-03 17:04:56.937 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
45. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 17:04:56.938 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
45. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 17:05:01.966 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
45. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 17:05:01.969 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
45. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 17:05:08.513 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
45. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6536 msec}
2023-07-03 17:07:34.727 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 17:07:34.728 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
55. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 17:07:39.555 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 17:07:39.558 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 17:07:45.822 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6260 msec}
2023-07-03 17:08:47.065 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 17:08:47.066 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
55. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 17:08:51.063 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:08:51.066 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 17:08:57.190 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6120 msec}
2023-07-03 17:09:26.353 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:09:26.353 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
55. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 17:09:30.816 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 17:09:30.820 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 17:09:36.970 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6147 msec}
2023-07-03 17:12:14.993 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 17:12:14.994 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
55. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 17:12:19.535 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 17:12:19.537 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 17:12:25.640 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6099 msec}
2023-07-03 17:16:14.015 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 17:16:14.015 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
55. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 17:16:19.176 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 17:16:19.179 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 17:16:25.335 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6150 msec}
2023-07-03 17:16:56.366 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:16:56.366 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
55. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 17:17:00.429 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:17:00.432 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 17:17:06.583 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6147 msec}
2023-07-03 17:18:03.187 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 17:18:03.187 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
55. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 17:18:07.973 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:18:07.977 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 17:18:14.332 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6350 msec}
2023-07-03 17:18:29.896 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:18:29.897 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
55. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 17:18:33.910 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
55. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:18:33.911 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 0 msec}
2023-07-03 17:18:40.143 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
55. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6225 msec}
2023-07-03 17:21:05.470 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
56. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:21:05.471 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
56. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 17:21:09.906 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
56. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:21:09.908 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
56. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 17:21:16.151 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
56. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6239 msec}
2023-07-03 17:22:38.689 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
56. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:22:38.690 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
56. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 17:22:42.452 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
56. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:22:42.454 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
56. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 0 msec}
2023-07-03 17:22:48.717 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
56. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6260 msec}
2023-07-03 17:24:58.134 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
59. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:24:58.135 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
59. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 17:25:03.449 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
62. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:25:03.452 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
62. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 17:25:09.692 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
62. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6234 msec}
2023-07-03 17:25:27.381 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
65. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 17:25:27.382 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
65. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 17:25:34.880 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
65. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 17:25:34.882 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
65. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 17:25:40.970 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
65. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6085 msec}
2023-07-03 17:30:42.739 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=53s506ms543µs400ns).
2023-07-03 19:54:04.882 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=1h38m21s449ms144µs).
2023-07-03 19:54:31.589 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-03 19:54:31.590 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  true
2023-07-03 19:54:31.590 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList -> userId p00139 
2023-07-03 19:54:31.590 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-03 19:54:31.590 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  true
2023-07-03 19:54:31.590 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList -> userId p00139 
2023-07-03 20:02:25.205 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 20:02:25.205 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 20:02:25.205 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-03 20:02:25.205 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 20:02:25.205 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-03 20:02:25.240 ERROR [http-nio-10010-exec-2] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$17fea56.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 20:02:25.248 ERROR [http-nio-10010-exec-2] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$17fea56.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 20:02:25.251 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 20:02:25.251 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 20:02:25.251 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-03 20:02:25.251 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 20:02:25.251 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-03 20:02:25.512 ERROR [http-nio-10010-exec-2] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$17fea56.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 20:02:25.514 ERROR [http-nio-10010-exec-2] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$17fea56.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 20:02:25.515 ERROR [http-nio-10010-exec-2] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$17fea56.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-07-03 20:02:25.570 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 20:02:25.570 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 20:02:25.570 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-03 20:02:25.570 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 20:02:25.570 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-03 20:02:27.559 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
95. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:02:27.561 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
95. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-03 20:02:27.564 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 20:02:27.661 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$vpuzQeuTgaYa4Yt/jpx.Q.fp8pEh3EDRn98doCdVbByD/zVUH9WCy
2023-07-03 20:02:27.752 INFO  [http-nio-10010-exec-9] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 20:02:54.250 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b7548f08
2023-07-03 20:02:54.250 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_DRIVING_RECORD} 
2023-07-03 20:02:54.250 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_DRIVING_RECORD a where   a.company_no = '100' and     a.base_ym = '2023-04' order by a.work_date   ,a.route_nm,a.start_time
2023-07-03 20:02:54.255 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
95. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:02:54.322 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
95. select   ROWNUM AS no,a.* from    TBL_DRIVING_RECORD a where   a.company_no = '100' and     a.base_ym = '2023-04' order by a.work_date   ,a.route_nm,a.start_time
 {executed in 66 msec}
2023-07-03 20:02:54.386 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
95. select   ROWNUM AS no,a.* from    TBL_DRIVING_RECORD a where   a.company_no = '100' and     a.base_ym = '2023-04' order by a.work_date   ,a.route_nm,a.start_time
 {executed in 61 msec}
2023-07-03 20:03:37.292 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-07-03 20:03:37.292 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-07-03 20:03:37.292 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-07-03 20:03:37.293 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
95. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:03:37.296 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
95. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-07-03 20:03:37.299 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
95. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-07-03 20:03:37.631 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
96. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:03:37.634 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
96. SELECT	/* select_accident_option : 교통사고 칼럼별 option값 */ 	
			listagg( DISTINCT(GAPI_GB ),'/')  	AS gapi_gb
		,	listagg( DISTINCT(acc_gb ),'/') 	AS acc_gb
		,	listagg( DISTINCT(acc_kind ),'/') 	AS acc_kind
		,	listagg( DISTINCT(proc_result ),'/') 	AS proc_result
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100' ) AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100'  ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100'  ORDER BY 1) AS emp_nm
	FROM TBM_ACCIDENT_INFO a
 {executed in 2 msec}
2023-07-03 20:03:52.423 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
96. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:03:52.428 INFO  [http-nio-10010-exec-3] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , :acc_date , :acc_time , :emp_nm , :route_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-07-03 20:03:52.437 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
97. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:03:52.467 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
97. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-01-06' , '09:24:00' , '김종국' , '20번' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-01-06' , '18:28:00' , '이택선' , '5-1번' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-01-07' , '12:45:00' , '채종두' , '38번' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-01-08' , '14:41:00' , '윤세호' , '38번' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-01-13' , '15:26:00' , '심기섭' , '21번' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-01-15' , '22:32:00' , '임인복' , '27번' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-01-18' , '13:59:00' , '고상욱' , '38번' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-01-19' , '06:57:00' , '이용진' , '21번' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-01-24' , '09:54:00' , '서수찬' , '20번' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-01-26' , '16:27:00' , '신경식' , '5--번' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-01-27' , '20:25:00' , '남기선' , '5-1번' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-01-29' , '12:16:00' , '박정훈' , '38번' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-02' , '07:11:00' , '전정훈' , '27번' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-04' , '07:00:00' , '남기선' , '5-1번' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2020-01-21' , '10:29:00' , '홍성운' , '27번' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-06' , '09:46:00' , '최병국' , '38번' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-06' , '18:15:00' , '권병묵' , '27번' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-05' , '13:50:00' , '남기선' , '5-1번' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-08' , '10:18:00' , '이종식' , '20번' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-08' , '08:35:00' , '박근호' , '38번' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-08' , '13:37:00' , '허선균' , '21번' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-09' , '13:38:00' , '박근호' , '38번' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-09' , '12:44:00' , '장길영' , '38번' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2022-11-04' , '13:38:00' , '오정택' , '5-1번' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-17' , '13:40:00' , '박인서' , '21번' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-21' , '12:21:00' , '윤세호' , '38번' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-02-22' , '08:31:00' , '허선균' , '21번' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-06' , '00:35:00' , '최정수' , '5번' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-06' , '20:25:00' , '백종필' , '27번' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-09' , '19:19:00' , '김성취' , '5번' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-10' , '21:13:00' , '한태전' , '5번' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-13' , '20:31:00' , '임인복' , '27번' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-15' , '23:50:00' , '김도근' , '5번' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-16' , '14:40:00' , '임충환' , '5번' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-18' , '11:20:00' , '박정배' , '5-1번' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-19' , '12:27:00' , '김동회' , '20번' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-15' , '19:51:00' , '윤세호' , '38번' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-21' , '19:43:00' , '자선호' , '5번' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-21' , '21:00:00' , '김요섭' , '5번' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-23' , '18:51:00' , '임재준' , '20번' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-23' , '15:50:00' , '김용문' , '27번' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-25' , '10:45:00' , '인호덕' , '27번' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-25' , '16:06:00' , '이용재' , '27번' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-25' , '18:51:00' , '임재준' , '20번' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-25' , '14:31:00' , '이용일' , '27번' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-28' , '23:05:00' , '조성훈' , '21번' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-03-31' , '07:30:00' , '유병수' , '21번' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-04' , '20:05:00' , '이형규' , '20번' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-05' , '09:31:00' , '윤병진' , '27번' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-05' , '12:05:00' , '임재준' , '20번' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-05' , '13:06:00' , '이승수' , '27번' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-06' , '10:44:00' , '이용일' , '27번' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-10' , '10:30:00' , '김동회' , '20번' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-10' , '16:30:00' , '박정훈' , '38번' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-11' , '14:02:00' , '김승배' , '38번' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-13' , '14:57:00' , '장명근' , '38번' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-14' , '15:42:00' , '임충환' , '5번' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-16' , '16:40:00' , '이택선' , '5-1번' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-18' , '16:52:00' , '손신영' , '20번' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-19' , '15:33:00' , '이덕길' , '5-1번' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-22' , '23:42:00' , '장남균' , '5번' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2018-08-16' , '20:00:00' , '정재철' , '27번' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-04-28' , '07:03:00' , '이정성' , '38번' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-05-04' , '12:41:00' , '유종각' , '38번' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-05-05' , '11:23:00' , '이용재B' , '27번' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-05-06' , '13:53:00' , '이경환' , '38번' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-05-07' , '11:32:00' , '박준용' , '20번' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-05-07' , '11:48:00' , '박덕환' , '5-1번' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-05-07' , '13:50:00' , '유종선' , '21번' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-05-11' , '09:23:00' , '이용재B' , '27번' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-05-12' , '22:44:00' , '양광일 ' , '5번' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-05-15' , '10:40:00' , '노주성' , '21번' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-05-16' , '21:52:00' , '권태종' , '5-1번' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 18 msec}
2023-07-03 20:03:52.481 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-07-03 20:03:52.482 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-07-03 20:03:52.482 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-07-03 20:03:52.484 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
97. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-07-03 20:03:52.486 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
97. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-07-03 20:04:43.855 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
97. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:04:43.860 INFO  [http-nio-10010-exec-7] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , :acc_date , :acc_time , :emp_nm , :route_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-07-03 20:04:43.861 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
98. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:04:43.863 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
98. batching 1 statements:
1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,acc_time,company_no,emp_nm) select  '100' , '2023-07-02' , '12:13:13' , '권태종' , '5번' , 3501.0 , '대물' , '쌍피' , '개문발차' , '777' , '777' , '종결' , '1' , '2' , '3' , '999999' , '5' , '999' , '8' , '7' , '99999' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 0 msec}
2023-07-03 20:05:52.174 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@206c49bf
2023-07-03 20:05:52.174 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-07-03 20:05:52.174 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2019-01-01' and '2022-12-31' order by a.acc_date,acc_time
2023-07-03 20:05:52.175 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
98. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:05:52.176 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
98. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2019-01-01' and '2022-12-31' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-07-03 20:05:52.178 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
98. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2019-01-01' and '2022-12-31' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-07-03 20:06:25.056 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 20:06:25.056 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 20:06:25.056 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 20:06:25.056 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
98. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:06:25.057 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
99. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:06:25.059 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
100. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:06:25.062 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
100. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 20:06:25.071 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
99. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 13 msec}
2023-07-03 20:06:25.076 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
99. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 20:07:02.008 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
99. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:07:02.013 INFO  [http-nio-10010-exec-7] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_EMP_WORKING_LOG KEY (company_no,emp_nm,work_date,work_time) select  '100' , :work_date , :work_time , :emp_nm , :route_nm , :car_no , :code_type1 , :code_type2 , :code_type3 , :detail_desc , :disposition_amt , :disposition_date , :disposition_result , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-07-03 20:07:02.014 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
100. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:07:02.016 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
100. batching 1 statements:
1:  MERGE INTO TBM_EMP_WORKING_LOG KEY (company_no,emp_nm,work_date,work_time) select  '100' , '2023-06-03' , '20:07:01' , '방인수' , '38번' , '3554' , '결행' , '결근' , '' , '1111111111111111111' , '11111' , '2023-07-03' , '2222' , '333333' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 0 msec}
2023-07-03 20:07:30.927 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@222ca90e
2023-07-03 20:07:30.928 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-03 20:07:30.928 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
2023-07-03 20:07:30.929 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
100. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:07:30.929 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:07:30.931 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
102. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:07:30.933 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
102. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 20:07:30.934 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
100. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-03 20:07:30.941 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
100. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   a.work_date between '2023-01-01' and '2023-07-03' order by a.work_date,a.work_time
 {executed in 6 msec}
2023-07-03 20:07:45.752 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 20:07:45.752 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 20:07:45.752 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 20:07:45.753 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
100. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:07:45.755 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
100. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 20:07:45.756 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
100. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 20:08:03.282 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
102. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:08:03.287 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
102. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'
 {executed in 0 msec}
2023-07-03 20:08:03.293 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-07-03 20:08:03.295 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
100. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-03 20:08:03.305 ERROR [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
100. batching 28 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , 'test' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원대분류' , 'test' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '기절' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
14:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '반성' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
15:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
16:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
17:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
18:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
19:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
20:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
21:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원중분류' , 'tet111' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
22:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
23:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
24:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
25:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
26:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
27:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
28:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , '민원소분류' , 'test222' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 {FAILED after 9 msec}
org.h2.jdbc.JdbcBatchUpdateException: Unique index or primary key violation: "PUBLIC.PRIMARY_KEY_50 ON PUBLIC.TBM_COMMON_CODE_INFO(COMPANY_NO, CODE_GB, CODE_ID) VALUES 190"; SQL statement:
INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date) values ( '100' , ? , ? , ? , ? , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')) [23505-200]
	at org.h2.jdbc.JdbcPreparedStatement.executeBatch(JdbcPreparedStatement.java:1235)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.executeBatch(StatementSpy.java:571)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$2(JdbcTemplate.java:950)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:617)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:647)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:936)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:366)
	at com.pjy.dashboard.dao.DynamicSqlDao.batchInsert(DynamicSqlDao.java:737)
	at com.pjy.dashboard.dao.DynamicSqlDao$$FastClassBySpringCGLIB$$8af24191.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.dao.DynamicSqlH2Dao$$EnhancerBySpringCGLIB$$119070c5.batchInsert(<generated>)
	at com.pjy.dashboard.service.DynamicSqlService.insertInfo(DynamicSqlService.java:673)
	at com.pjy.dashboard.controller.TestController.BUS_insertInfo(TestController.java:399)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$17fea56.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-03 20:08:03.355 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47f9eaec
2023-07-03 20:08:03.355 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO} 
2023-07-03 20:08:03.355 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-03 20:08:03.356 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
100. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 20:08:03.357 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
100. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-03 20:08:06.281 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
100. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:08:06.283 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
103. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:08:06.285 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
103. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-03 20:08:30.010 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
103. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:08:30.011 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 20:08:36.959 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
103. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:08:36.961 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
103. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 20:08:43.291 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
103. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 6326 msec}
2023-07-03 20:11:18.004 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-03 20:11:18.005 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
103. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:11:18.034 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 28 msec}
2023-07-03 20:11:45.488 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-07-03 20:11:45.489 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
103. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:11:45.493 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
103. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 1 msec}
2023-07-03 20:11:45.530 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-07-03 20:11:45.531 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-03 20:11:45.531 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.acc_date desc,a.acc_time desc
2023-07-03 20:11:45.532 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:11:45.533 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:11:45.584 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '강근원'
 {executed in 1 msec}
2023-07-03 20:11:49.039 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9887a8b
2023-07-03 20:11:49.040 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
103. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:11:49.043 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
103. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배'
	order by 1
 {executed in 2 msec}
2023-07-03 20:11:49.067 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d097f83b
2023-07-03 20:11:49.068 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-03 20:11:49.068 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경배' order by a.acc_date desc,a.acc_time desc
2023-07-03 20:11:49.069 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경배' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:11:49.070 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경배' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:11:49.120 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경배'
 {executed in 0 msec}
2023-07-03 20:11:49.864 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c10e37cb
2023-07-03 20:11:49.865 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
103. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:11:49.868 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
103. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연'
	order by 1
 {executed in 1 msec}
2023-07-03 20:11:49.893 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@881db57b
2023-07-03 20:11:49.893 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-03 20:11:49.893 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경연' order by a.acc_date desc,a.acc_time desc
2023-07-03 20:11:49.894 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경연' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:11:49.895 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경연' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:11:49.938 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경연'
 {executed in 1 msec}
2023-07-03 20:11:50.556 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dcb0fce
2023-07-03 20:11:50.557 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
103. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:11:50.561 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
103. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철'
	order by 1
 {executed in 2 msec}
2023-07-03 20:11:50.589 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@34da8d7e
2023-07-03 20:11:50.589 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-03 20:11:50.589 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김만철' order by a.acc_date desc,a.acc_time desc
2023-07-03 20:11:50.590 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김만철' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:11:50.591 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김만철' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:11:50.648 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김만철'
 {executed in 1 msec}
2023-07-03 20:11:51.338 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5e128baf
2023-07-03 20:11:51.339 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
103. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:11:51.341 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
103. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현'
	order by 1
 {executed in 1 msec}
2023-07-03 20:11:51.363 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2522095f
2023-07-03 20:11:51.364 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-03 20:11:51.364 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김명현' order by a.acc_date desc,a.acc_time desc
2023-07-03 20:11:51.365 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김명현' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:11:51.366 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김명현' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:11:51.416 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김명현'
 {executed in 1 msec}
2023-07-03 20:11:53.862 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c45864da
2023-07-03 20:11:53.864 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
103. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:11:53.866 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
103. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선'
	order by 1
 {executed in 1 msec}
2023-07-03 20:11:53.889 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8b67e28a
2023-07-03 20:11:53.889 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-03 20:11:53.890 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
2023-07-03 20:11:53.891 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
 {executed in 0 msec}
2023-07-03 20:11:53.892 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
103. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:11:53.944 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '남기선'
 {executed in 1 msec}
2023-07-03 20:27:33.175 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7756fabc
2023-07-03 20:27:33.175 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-07-03 20:27:33.176 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-07-03 20:27:33.177 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
111. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:27:33.189 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 12 msec}
2023-07-03 20:27:33.199 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-07-03 20:27:34.252 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7756fabc
2023-07-03 20:27:34.252 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-07-03 20:27:34.253 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-07-03 20:27:34.254 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
111. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:27:34.269 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 15 msec}
2023-07-03 20:27:34.277 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-07-03 20:27:36.146 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3afba261
2023-07-03 20:27:36.146 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-07-03 20:27:36.146 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
2023-07-03 20:27:36.147 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
111. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:27:36.147 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-07-03 20:27:36.149 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-07-03 20:27:36.157 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6de4b249
2023-07-03 20:27:36.157 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-07-03 20:27:36.157 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
2023-07-03 20:27:36.158 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 1 msec}
2023-07-03 20:27:36.160 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 0 msec}
2023-07-03 20:28:01.987 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7756fabc
2023-07-03 20:28:01.987 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-07-03 20:28:01.988 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-07-03 20:28:01.989 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:28:01.999 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 10 msec}
2023-07-03 20:28:02.012 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 11 msec}
2023-07-03 20:28:10.714 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3afba261
2023-07-03 20:28:10.714 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-07-03 20:28:10.715 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
2023-07-03 20:28:10.715 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:28:10.716 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-07-03 20:28:10.717 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-07-03 20:28:10.724 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6de4b249
2023-07-03 20:28:10.724 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-07-03 20:28:10.724 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
2023-07-03 20:28:10.726 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 2 msec}
2023-07-03 20:28:10.727 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 1 msec}
2023-07-03 20:34:04.910 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@692c5f03
2023-07-03 20:34:04.910 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-03 20:34:04.910 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '남기선' ORDER BY b.base_ym desc
2023-07-03 20:34:04.911 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
115. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:34:04.917 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '남기선' ORDER BY b.base_ym desc
 {executed in 5 msec}
2023-07-03 20:34:04.920 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '남기선' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-03 20:34:07.377 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4b1ea6
2023-07-03 20:34:07.377 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-03 20:34:07.378 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '남기선' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-03 20:34:07.378 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
115. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:34:07.380 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '남기선' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-03 20:34:07.381 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '남기선' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-03 20:34:09.434 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@508b185a
2023-07-03 20:34:09.434 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-03 20:34:09.435 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '남기선'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-03 20:34:09.435 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
115. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:34:09.703 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '남기선'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 267 msec}
2023-07-03 20:34:09.898 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '남기선'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 195 msec}
2023-07-03 20:34:09.948 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d9659170
2023-07-03 20:34:09.949 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-03 20:34:09.949 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-03 20:34:10.511 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 561 msec}
2023-07-03 20:34:10.512 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
115. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:34:10.513 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-07-03 20:34:10.560 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e84aedc6
2023-07-03 20:34:10.560 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-03 20:34:10.560 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-07-03 20:34:10.596 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 36 msec}
2023-07-03 20:34:10.620 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 24 msec}
2023-07-03 20:34:59.635 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@66c7fa23
2023-07-03 20:34:59.635 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-03 20:34:59.635 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
2023-07-03 20:34:59.636 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
115. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:34:59.637 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:34:59.638 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:35:04.805 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@448c769c
2023-07-03 20:35:04.805 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-03 20:35:04.805 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '남기선' ORDER BY b.base_ym desc
2023-07-03 20:35:04.806 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
115. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:35:04.811 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '남기선' ORDER BY b.base_ym desc
 {executed in 5 msec}
2023-07-03 20:35:04.814 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '남기선' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-03 20:35:31.683 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@66c7fa23
2023-07-03 20:35:31.683 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-03 20:35:31.684 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
2023-07-03 20:35:31.684 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
115. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:35:31.685 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:35:31.686 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:35:33.865 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dbab363f
2023-07-03 20:35:33.865 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-03 20:35:33.866 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '남기선' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-03 20:35:33.866 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
115. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:35:33.868 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '남기선' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-03 20:35:33.869 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '남기선' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-03 20:35:35.626 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e48b0a9f
2023-07-03 20:35:35.626 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-03 20:35:35.627 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '남기선'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-03 20:35:35.627 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
115. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:35:35.789 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '남기선'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 161 msec}
2023-07-03 20:35:35.951 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '남기선'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 162 msec}
2023-07-03 20:35:35.990 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@48370412
2023-07-03 20:35:35.991 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-03 20:35:35.991 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-03 20:35:36.587 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 596 msec}
2023-07-03 20:35:36.588 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
115. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:35:36.589 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-07-03 20:35:36.627 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e84aedc6
2023-07-03 20:35:36.628 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-03 20:35:36.628 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-07-03 20:35:36.653 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 25 msec}
2023-07-03 20:35:36.677 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 22 msec}
2023-07-03 20:49:00.343 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@66c7fa23
2023-07-03 20:49:00.343 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-03 20:49:00.343 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
2023-07-03 20:49:00.344 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
123. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:49:00.346 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
123. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:49:00.347 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
123. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-03 20:49:17.252 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@448c769c
2023-07-03 20:49:17.252 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-03 20:49:17.252 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '남기선' ORDER BY b.base_ym desc
2023-07-03 20:49:17.253 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
123. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:49:17.259 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
123. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '남기선' ORDER BY b.base_ym desc
 {executed in 5 msec}
2023-07-03 20:49:17.262 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
123. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '남기선' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-03 20:49:19.121 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dbab363f
2023-07-03 20:49:19.121 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-03 20:49:19.121 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '남기선' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-03 20:49:19.122 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
123. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:49:19.123 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
123. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '남기선' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-03 20:49:19.124 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
123. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '남기선' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-03 20:49:23.315 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e48b0a9f
2023-07-03 20:49:23.315 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-03 20:49:23.315 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '남기선'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-03 20:49:23.316 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
123. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:49:23.471 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
123. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '남기선'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 155 msec}
2023-07-03 20:49:23.619 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
123. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '남기선'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 148 msec}
2023-07-03 20:49:23.661 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@48370412
2023-07-03 20:49:23.662 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-03 20:49:23.662 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-03 20:49:24.251 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
123. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 589 msec}
2023-07-03 20:49:24.252 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
123. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:49:24.253 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
123. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-07-03 20:49:24.300 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e84aedc6
2023-07-03 20:49:24.300 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-03 20:49:24.300 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-07-03 20:49:24.334 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
123. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 33 msec}
2023-07-03 20:49:24.357 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
123. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '남기선' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 23 msec}
2023-07-03 20:59:32.639 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
125. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 20:59:32.640 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
125. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 20:59:37.448 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7274ecc
2023-07-03 20:59:37.450 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
125. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:59:37.477 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDrivingOrder : 승무지시 화면용 */ k.route_nm,k.seq,k.CAR_REGNO
		,	listagg(k.emp_nm,',') WITHIN GROUP (ORDER BY to_char(k.seq,'00') ||k.ampm) as empNm
		,	listagg(k.PHONE_NO,',') WITHIN GROUP (ORDER BY to_char(k.seq,'00') ||k.ampm) as PHONE
		,	listagg(k.value,',') WITHIN GROUP (ORDER BY to_char(k.seq,'00') ||k.ampm) as spGb
		,	' ' as empNm_am
		,	' ' as empNm_pm
		,	' ' as phone_am
		,	' ' as phone_pm
		,	' ' as spgb_am
		,	' ' as spgb_pm
	FROM (
	SELECT	a.route_nm,
			a.CAR_REGNO ,
			a.EMP_NM ,
			b.PHONE_NO ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,
			CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a JOIN TBL_EMPLOYEEINFO b ON a.company_no = b.COMPANY_NO AND a.emp_nm = b.EMP_NM 
		WHERE	a.company_no = '100'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT a.route_nm,
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			nvl(c.PHONE_NO,'-') AS phone_no ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		
			CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON
			a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
			AND b.d2 <> ''
			AND a.d2 LIKE b.d2 || '%'
		LEFT OUTER JOIN TBL_EMPLOYEEINFO c ON b.company_no = c.COMPANY_NO AND b.emp_nm = c.EMP_NM
		WHERE	a.company_no = '100'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%'	OR a.d2 LIKE '%@%')
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.route_nm,k.seq,k.CAR_REGNO
 {executed in 24 msec}
2023-07-03 20:59:50.341 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ddfa9bd7
2023-07-03 20:59:50.342 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
125. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:59:50.356 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDrivingOrder : 승무지시 화면용 */ k.route_nm,k.seq,k.CAR_REGNO
		,	listagg(k.emp_nm,',') WITHIN GROUP (ORDER BY to_char(k.seq,'00') ||k.ampm) as empNm
		,	listagg(k.PHONE_NO,',') WITHIN GROUP (ORDER BY to_char(k.seq,'00') ||k.ampm) as PHONE
		,	listagg(k.value,',') WITHIN GROUP (ORDER BY to_char(k.seq,'00') ||k.ampm) as spGb
		,	' ' as empNm_am
		,	' ' as empNm_pm
		,	' ' as phone_am
		,	' ' as phone_pm
		,	' ' as spgb_am
		,	' ' as spgb_pm
	FROM (
	SELECT	a.route_nm,
			a.CAR_REGNO ,
			a.EMP_NM ,
			b.PHONE_NO ,
			'-' AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@]', '') AS ampm,
			CONVERT(REGEXP_REPLACE(a.d3, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a JOIN TBL_EMPLOYEEINFO b ON a.company_no = b.COMPANY_NO AND a.emp_nm = b.EMP_NM 
		WHERE	a.company_no = '100'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d3 NOT LIKE '%*%'
			AND a.d3 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT a.route_nm,
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			nvl(c.PHONE_NO,'-') AS phone_no ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@-]', '') AS ampm,		
			CONVERT(REGEXP_REPLACE(a.d3, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON
			a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
			AND b.d3 <> ''
			AND a.d3 LIKE b.d3 || '%'
		LEFT OUTER JOIN TBL_EMPLOYEEINFO c ON b.company_no = c.COMPANY_NO AND b.emp_nm = c.EMP_NM
		WHERE	a.company_no = '100'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d3 LIKE '%*%'	OR a.d3 LIKE '%@%')
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.route_nm,k.seq,k.CAR_REGNO
 {executed in 11 msec}
2023-07-03 20:59:57.245 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-07-03 20:59:57.246 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
125. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 20:59:57.248 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
125. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 1 msec}
2023-07-03 21:00:09.850 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
125. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:00:09.853 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. WITH weekInfo AS ( /* select_getListRouteDrivingOrder : excel 승무지시 노선별 템플릿 정보 */
		SELECT decode(k.holiday_yn,'Y','공',k.week) AS week_gb
		FROM (
			SELECT CASE DAY_OF_WEEK('2023-05-03') WHEN 1 THEN '공' WHEN 7 THEN '토' ELSE '평' END week
			,	nvl((SELECT HOLIDAY_YN 	FROM 	TBM_HOLIDAY_INFO a 	WHERE 	COMPANY_NO ='100'	AND 	WORK_DATE = '2023-05-03'),'N') AS HOLIDAY_YN 
		) k	
	)
		SELECT 	a.route_nm ,a.start_point || '---' || a.end_point as title
			,	b.*
			,	'(' || '2023-05-03' || '_' || c.week_gb || ')승무지시서_' || '_' || b.file_id || '.xlsx' AS newFileNm
			,	c.week_gb
		FROM TBL_ROUTEINFO a ,tbl_file_info b,weekInfo c
		WHERE a.COMPANY_NO = '100'
		and a.route_nm = decode('','',a.route_nm,'')
		AND a.COMPANY_NO = b.COMPANY_NO
		AND b.file_gb = 'templete' 
		AND a.route_nm = b.FILE_ID
 {executed in 1 msec}
2023-07-03 21:00:09.857 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfo : excel 승무지시서 rawdata 용 */
			SUBSTRING('2023-05-03',1,4) || '년' || SUBSTRING('2023-05-03',6,2) || '월' || SUBSTRING('2023-05-03',9,2) ||'일 '
					|| decode(DAY_OF_WEEK('2023-05-03') ,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') || '요일' as baseYmd
		,	RIGHT(k.car_regno,4) as car_regno
		,	max(decode(k.ampm,'a',k.emp_nm,'') ) AS am_nm
		,	max(decode(k.ampm,'p',k.emp_nm)) AS pm_nm
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d3, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '5번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d3 NOT LIKE '%*%'
			AND a.d3 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d3, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d3 <> ''
		    AND a.d3 LIKE b.d3 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '5번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d3 LIKE '%*%' OR a.d3 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:00:09.861 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfo : excel 승무지시서 rawdata 용 */
			SUBSTRING('2023-05-03',1,4) || '년' || SUBSTRING('2023-05-03',6,2) || '월' || SUBSTRING('2023-05-03',9,2) ||'일 '
					|| decode(DAY_OF_WEEK('2023-05-03') ,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') || '요일' as baseYmd
		,	RIGHT(k.car_regno,4) as car_regno
		,	max(decode(k.ampm,'a',k.emp_nm,'') ) AS am_nm
		,	max(decode(k.ampm,'p',k.emp_nm)) AS pm_nm
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d3, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '5-1번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d3 NOT LIKE '%*%'
			AND a.d3 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d3, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d3 <> ''
		    AND a.d3 LIKE b.d3 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '5-1번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d3 LIKE '%*%' OR a.d3 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 2 msec}
2023-07-03 21:00:10.947 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
125. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:00:10.950 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfo : excel 승무지시서 rawdata 용 */
			SUBSTRING('2023-05-03',1,4) || '년' || SUBSTRING('2023-05-03',6,2) || '월' || SUBSTRING('2023-05-03',9,2) ||'일 '
					|| decode(DAY_OF_WEEK('2023-05-03') ,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') || '요일' as baseYmd
		,	RIGHT(k.car_regno,4) as car_regno
		,	max(decode(k.ampm,'a',k.emp_nm,'') ) AS am_nm
		,	max(decode(k.ampm,'p',k.emp_nm)) AS pm_nm
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d3, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '20번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d3 NOT LIKE '%*%'
			AND a.d3 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d3, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d3 <> ''
		    AND a.d3 LIKE b.d3 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '20번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d3 LIKE '%*%' OR a.d3 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:00:11.167 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfo : excel 승무지시서 rawdata 용 */
			SUBSTRING('2023-05-03',1,4) || '년' || SUBSTRING('2023-05-03',6,2) || '월' || SUBSTRING('2023-05-03',9,2) ||'일 '
					|| decode(DAY_OF_WEEK('2023-05-03') ,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') || '요일' as baseYmd
		,	RIGHT(k.car_regno,4) as car_regno
		,	max(decode(k.ampm,'a',k.emp_nm,'') ) AS am_nm
		,	max(decode(k.ampm,'p',k.emp_nm)) AS pm_nm
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d3, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '21번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d3 NOT LIKE '%*%'
			AND a.d3 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d3, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d3 <> ''
		    AND a.d3 LIKE b.d3 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '21번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d3 LIKE '%*%' OR a.d3 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:00:11.339 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfo : excel 승무지시서 rawdata 용 */
			SUBSTRING('2023-05-03',1,4) || '년' || SUBSTRING('2023-05-03',6,2) || '월' || SUBSTRING('2023-05-03',9,2) ||'일 '
					|| decode(DAY_OF_WEEK('2023-05-03') ,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') || '요일' as baseYmd
		,	RIGHT(k.car_regno,4) as car_regno
		,	max(decode(k.ampm,'a',k.emp_nm,'') ) AS am_nm
		,	max(decode(k.ampm,'p',k.emp_nm)) AS pm_nm
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d3, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '27번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d3 NOT LIKE '%*%'
			AND a.d3 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d3, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d3 <> ''
		    AND a.d3 LIKE b.d3 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '27번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d3 LIKE '%*%' OR a.d3 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:00:11.486 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfo : excel 승무지시서 rawdata 용 */
			SUBSTRING('2023-05-03',1,4) || '년' || SUBSTRING('2023-05-03',6,2) || '월' || SUBSTRING('2023-05-03',9,2) ||'일 '
					|| decode(DAY_OF_WEEK('2023-05-03') ,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') || '요일' as baseYmd
		,	RIGHT(k.car_regno,4) as car_regno
		,	max(decode(k.ampm,'a',k.emp_nm,'') ) AS am_nm
		,	max(decode(k.ampm,'p',k.emp_nm)) AS pm_nm
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d3, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '38번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d3 NOT LIKE '%*%'
			AND a.d3 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d3, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d3, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d3 <> ''
		    AND a.d3 LIKE b.d3 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '38번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d3 LIKE '%*%' OR a.d3 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:00:40.989 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cef3c90c
2023-07-03 21:00:40.990 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
125. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:00:41.005 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDrivingOrder : 승무지시 화면용 */ k.route_nm,k.seq,k.CAR_REGNO
		,	listagg(k.emp_nm,',') WITHIN GROUP (ORDER BY to_char(k.seq,'00') ||k.ampm) as empNm
		,	listagg(k.PHONE_NO,',') WITHIN GROUP (ORDER BY to_char(k.seq,'00') ||k.ampm) as PHONE
		,	listagg(k.value,',') WITHIN GROUP (ORDER BY to_char(k.seq,'00') ||k.ampm) as spGb
		,	' ' as empNm_am
		,	' ' as empNm_pm
		,	' ' as phone_am
		,	' ' as phone_pm
		,	' ' as spgb_am
		,	' ' as spgb_pm
	FROM (
	SELECT	a.route_nm,
			a.CAR_REGNO ,
			a.EMP_NM ,
			b.PHONE_NO ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,
			CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a JOIN TBL_EMPLOYEEINFO b ON a.company_no = b.COMPANY_NO AND a.emp_nm = b.EMP_NM 
		WHERE	a.company_no = '100'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT a.route_nm,
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			nvl(c.PHONE_NO,'-') AS phone_no ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		
			CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON
			a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
			AND b.d7 <> ''
			AND a.d7 LIKE b.d7 || '%'
		LEFT OUTER JOIN TBL_EMPLOYEEINFO c ON b.company_no = c.COMPANY_NO AND b.emp_nm = c.EMP_NM
		WHERE	a.company_no = '100'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%'	OR a.d7 LIKE '%@%')
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.route_nm,k.seq,k.CAR_REGNO
 {executed in 13 msec}
2023-07-03 21:00:44.672 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
125. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:00:44.675 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. WITH weekInfo AS ( /* select_getListRouteDrivingOrder : excel 승무지시 노선별 템플릿 정보 */
		SELECT decode(k.holiday_yn,'Y','공',k.week) AS week_gb
		FROM (
			SELECT CASE DAY_OF_WEEK('2023-05-07') WHEN 1 THEN '공' WHEN 7 THEN '토' ELSE '평' END week
			,	nvl((SELECT HOLIDAY_YN 	FROM 	TBM_HOLIDAY_INFO a 	WHERE 	COMPANY_NO ='100'	AND 	WORK_DATE = '2023-05-07'),'N') AS HOLIDAY_YN 
		) k	
	)
		SELECT 	a.route_nm ,a.start_point || '---' || a.end_point as title
			,	b.*
			,	'(' || '2023-05-07' || '_' || c.week_gb || ')승무지시서_' || '_' || b.file_id || '.xlsx' AS newFileNm
			,	c.week_gb
		FROM TBL_ROUTEINFO a ,tbl_file_info b,weekInfo c
		WHERE a.COMPANY_NO = '100'
		and a.route_nm = decode('','',a.route_nm,'')
		AND a.COMPANY_NO = b.COMPANY_NO
		AND b.file_gb = 'templete' 
		AND a.route_nm = b.FILE_ID
 {executed in 1 msec}
2023-07-03 21:00:44.679 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfo : excel 승무지시서 rawdata 용 */
			SUBSTRING('2023-05-07',1,4) || '년' || SUBSTRING('2023-05-07',6,2) || '월' || SUBSTRING('2023-05-07',9,2) ||'일 '
					|| decode(DAY_OF_WEEK('2023-05-07') ,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') || '요일' as baseYmd
		,	RIGHT(k.car_regno,4) as car_regno
		,	max(decode(k.ampm,'a',k.emp_nm,'') ) AS am_nm
		,	max(decode(k.ampm,'p',k.emp_nm)) AS pm_nm
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '5번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d7 <> ''
		    AND a.d7 LIKE b.d7 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '5번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%' OR a.d7 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 2 msec}
2023-07-03 21:00:44.683 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfo : excel 승무지시서 rawdata 용 */
			SUBSTRING('2023-05-07',1,4) || '년' || SUBSTRING('2023-05-07',6,2) || '월' || SUBSTRING('2023-05-07',9,2) ||'일 '
					|| decode(DAY_OF_WEEK('2023-05-07') ,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') || '요일' as baseYmd
		,	RIGHT(k.car_regno,4) as car_regno
		,	max(decode(k.ampm,'a',k.emp_nm,'') ) AS am_nm
		,	max(decode(k.ampm,'p',k.emp_nm)) AS pm_nm
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '5-1번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d7 <> ''
		    AND a.d7 LIKE b.d7 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '5-1번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%' OR a.d7 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:00:44.809 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfo : excel 승무지시서 rawdata 용 */
			SUBSTRING('2023-05-07',1,4) || '년' || SUBSTRING('2023-05-07',6,2) || '월' || SUBSTRING('2023-05-07',9,2) ||'일 '
					|| decode(DAY_OF_WEEK('2023-05-07') ,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') || '요일' as baseYmd
		,	RIGHT(k.car_regno,4) as car_regno
		,	max(decode(k.ampm,'a',k.emp_nm,'') ) AS am_nm
		,	max(decode(k.ampm,'p',k.emp_nm)) AS pm_nm
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '20번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d7 <> ''
		    AND a.d7 LIKE b.d7 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '20번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%' OR a.d7 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:00:44.985 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfo : excel 승무지시서 rawdata 용 */
			SUBSTRING('2023-05-07',1,4) || '년' || SUBSTRING('2023-05-07',6,2) || '월' || SUBSTRING('2023-05-07',9,2) ||'일 '
					|| decode(DAY_OF_WEEK('2023-05-07') ,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') || '요일' as baseYmd
		,	RIGHT(k.car_regno,4) as car_regno
		,	max(decode(k.ampm,'a',k.emp_nm,'') ) AS am_nm
		,	max(decode(k.ampm,'p',k.emp_nm)) AS pm_nm
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '21번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d7 <> ''
		    AND a.d7 LIKE b.d7 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '21번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%' OR a.d7 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 2 msec}
2023-07-03 21:00:45.142 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfo : excel 승무지시서 rawdata 용 */
			SUBSTRING('2023-05-07',1,4) || '년' || SUBSTRING('2023-05-07',6,2) || '월' || SUBSTRING('2023-05-07',9,2) ||'일 '
					|| decode(DAY_OF_WEEK('2023-05-07') ,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') || '요일' as baseYmd
		,	RIGHT(k.car_regno,4) as car_regno
		,	max(decode(k.ampm,'a',k.emp_nm,'') ) AS am_nm
		,	max(decode(k.ampm,'p',k.emp_nm)) AS pm_nm
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '27번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d7 <> ''
		    AND a.d7 LIKE b.d7 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '27번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%' OR a.d7 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:00:45.262 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfo : excel 승무지시서 rawdata 용 */
			SUBSTRING('2023-05-07',1,4) || '년' || SUBSTRING('2023-05-07',6,2) || '월' || SUBSTRING('2023-05-07',9,2) ||'일 '
					|| decode(DAY_OF_WEEK('2023-05-07') ,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') || '요일' as baseYmd
		,	RIGHT(k.car_regno,4) as car_regno
		,	max(decode(k.ampm,'a',k.emp_nm,'') ) AS am_nm
		,	max(decode(k.ampm,'p',k.emp_nm)) AS pm_nm
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '38번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d7 <> ''
		    AND a.d7 LIKE b.d7 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '38번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%' OR a.d7 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:01:16.955 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
125. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:01:16.957 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. WITH weekInfo AS ( /* select_getListRouteDrivingOrder : excel 승무지시 노선별 템플릿 정보 */
		SELECT decode(k.holiday_yn,'Y','공',k.week) AS week_gb
		FROM (
			SELECT CASE DAY_OF_WEEK('2023-05-07') WHEN 1 THEN '공' WHEN 7 THEN '토' ELSE '평' END week
			,	nvl((SELECT HOLIDAY_YN 	FROM 	TBM_HOLIDAY_INFO a 	WHERE 	COMPANY_NO ='100'	AND 	WORK_DATE = '2023-05-07'),'N') AS HOLIDAY_YN 
		) k	
	)
		SELECT 	a.route_nm ,a.start_point || '---' || a.end_point as title
			,	b.*
			,	'(' || '2023-05-07' || '_' || c.week_gb || ')승무지시서_' || '_' || b.file_id || '.xlsx' AS newFileNm
			,	c.week_gb
		FROM TBL_ROUTEINFO a ,tbl_file_info b,weekInfo c
		WHERE a.COMPANY_NO = '100'
		and a.route_nm = decode('','',a.route_nm,'')
		AND a.COMPANY_NO = b.COMPANY_NO
		AND b.file_gb = 'templete' 
		AND a.route_nm = b.FILE_ID
 {executed in 1 msec}
2023-07-03 21:01:16.960 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '5번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d7 <> ''
		    AND a.d7 LIKE b.d7 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '5번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%' OR a.d7 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 0 msec}
2023-07-03 21:01:16.963 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '5-1번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d7 <> ''
		    AND a.d7 LIKE b.d7 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '5-1번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%' OR a.d7 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 2 msec}
2023-07-03 21:01:16.967 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '20번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d7 <> ''
		    AND a.d7 LIKE b.d7 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '20번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%' OR a.d7 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:01:16.970 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '21번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d7 <> ''
		    AND a.d7 LIKE b.d7 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '21번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%' OR a.d7 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 2 msec}
2023-07-03 21:01:16.974 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '27번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d7 <> ''
		    AND a.d7 LIKE b.d7 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '27번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%' OR a.d7 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:01:16.977 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '38번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d7 <> ''
		    AND a.d7 LIKE b.d7 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '38번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%' OR a.d7 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 2 msec}
2023-07-03 21:01:16.980 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT	/* select_getDailyOffList : 노선별 휴가자 */
			a.route_nm
		,	listagg(a.EMP_NM ,',') WITHIN GROUP (ORDER BY a.PREV_DAILY_SEQ) AS name
	FROM	TBL_MONTH_ARRANGE_DETAIL a
	WHERE	a.company_no = '100'
		AND a.BASE_Ym = '2023-05'
		AND a.CAR_REGNO NOT LIKE 'SP%'
		AND (a.d7 LIKE '%*%' or a.d7 LIKE '%@%')
		AND a.DISPATCH_SEQ = 6
		AND a.INIT_SEQ = 0
		GROUP BY a.ROUTE_NM
 {executed in 1 msec}
2023-07-03 21:01:16.982 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT	/* select_getDailyOtherSPList : 노선별 타노선 근무자 */
			a.ROUTE_NM 
		,	listagg(a.EMP_NM||a.CAR_REGNO ,',') WITHIN GROUP (ORDER BY a.PREV_DAILY_SEQ) AS name
	FROM	TBL_MONTH_ARRANGE_DETAIL a
	WHERE	a.company_no = '100'
		AND a.BASE_Ym = '2023-05'
		AND a.CAR_REGNO  LIKE 'SP%'
		AND a.CAR_REGNO not LIKE '%' || a.ROUTE_NM || '%'
		AND (a.d7 <> '')
		AND (a.d7 NOT LIKE '%#%')
		AND a.DISPATCH_SEQ = 6
		AND a.INIT_SEQ = 0
	 GROUP BY a.ROUTE_NM
 {executed in 1 msec}
2023-07-03 21:02:29.836 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
125. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 21:02:29.837 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
125. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 21:02:33.240 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1178aa33
2023-07-03 21:02:33.241 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
125. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 21:02:33.256 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
125. SELECT /* select_getDrivingOrder : 승무지시 화면용 */ k.route_nm,k.seq,k.CAR_REGNO
		,	listagg(k.emp_nm,',') WITHIN GROUP (ORDER BY to_char(k.seq,'00') ||k.ampm) as empNm
		,	listagg(k.PHONE_NO,',') WITHIN GROUP (ORDER BY to_char(k.seq,'00') ||k.ampm) as PHONE
		,	listagg(k.value,',') WITHIN GROUP (ORDER BY to_char(k.seq,'00') ||k.ampm) as spGb
		,	' ' as empNm_am
		,	' ' as empNm_pm
		,	' ' as phone_am
		,	' ' as phone_pm
		,	' ' as spgb_am
		,	' ' as spgb_pm
	FROM (
	SELECT	a.route_nm,
			a.CAR_REGNO ,
			a.EMP_NM ,
			b.PHONE_NO ,
			'-' AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@]', '') AS ampm,
			CONVERT(REGEXP_REPLACE(a.d7, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a JOIN TBL_EMPLOYEEINFO b ON a.company_no = b.COMPANY_NO AND a.emp_nm = b.EMP_NM 
		WHERE	a.company_no = '100'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d7 NOT LIKE '%*%'
			AND a.d7 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT a.route_nm,
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			nvl(c.PHONE_NO,'-') AS phone_no ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d7, '[*0-9@-]', '') AS ampm,		
			CONVERT(REGEXP_REPLACE(a.d7, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON
			a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
			AND b.d7 <> ''
			AND a.d7 LIKE b.d7 || '%'
		LEFT OUTER JOIN TBL_EMPLOYEEINFO c ON b.company_no = c.COMPANY_NO AND b.emp_nm = c.EMP_NM
		WHERE	a.company_no = '100'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d7 LIKE '%*%'	OR a.d7 LIKE '%@%')
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.route_nm,k.seq,k.CAR_REGNO
 {executed in 12 msec}
2023-07-03 21:02:41.147 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-07-03 21:02:41.148 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
125. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:02:41.150 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
125. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 0 msec}
2023-07-03 21:05:06.562 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-07-03 21:05:06.563 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
129. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:05:06.563 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
128. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:05:06.564 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
128. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 21:05:06.564 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
129. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-07-03 21:05:14.588 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-04' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-07-03 21:05:14.588 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,'' AS AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  decode(AMPM_GUBUN,'p','오전','오후') || ' 배정 건수' AS CAR_REGNO,ampm_gubun,'-' emp_nm,0 AS tot_work_date ,0 D1 ,0 D2 ,0 D3 ,0 D4 ,0 D5 ,0 D6 ,0 D7 ,0 D8 ,0 D9 ,0 D10 ,0 D11 ,0 D12 ,0 D13 ,0 D14 ,0 D15 ,0 D16 ,0 D17 ,0 D18 ,0 D19 ,0 D20 ,0 D21 ,0 D22 ,0 D23 ,0 D24 ,0 D25 ,0 D26 ,0 D27 ,0 D28 ,0 d29 ,0 d30 ,0 d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 6  AND    b.PREV_DAILY_SEQ = 1 AND    b.AMPM_GUBUN IN ('a','p') ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,' ' AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  decode(b.AMPM_GUBUN,'p','오전','오후') || ' 미배정 건수' AS CAR_REGNO,b.AMPM_GUBUN ,'-' emp_nm,0 AS tot_work_date ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  FROM 	allocateInfo b,carInfo a
2023-07-03 21:05:14.589 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
128. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 21:05:14.589 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
129. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:05:14.590 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
128. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-04' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-07-03 21:05:14.593 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
129. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,'' AS AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  decode(AMPM_GUBUN,'p','오전','오후') || ' 배정 건수' AS CAR_REGNO,ampm_gubun,'-' emp_nm,0 AS tot_work_date ,0 D1 ,0 D2 ,0 D3 ,0 D4 ,0 D5 ,0 D6 ,0 D7 ,0 D8 ,0 D9 ,0 D10 ,0 D11 ,0 D12 ,0 D13 ,0 D14 ,0 D15 ,0 D16 ,0 D17 ,0 D18 ,0 D19 ,0 D20 ,0 D21 ,0 D22 ,0 D23 ,0 D24 ,0 D25 ,0 D26 ,0 D27 ,0 D28 ,0 d29 ,0 d30 ,0 d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 6  AND    b.PREV_DAILY_SEQ = 1 AND    b.AMPM_GUBUN IN ('a','p') ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,' ' AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  decode(b.AMPM_GUBUN,'p','오전','오후') || ' 미배정 건수' AS CAR_REGNO,b.AMPM_GUBUN ,'-' emp_nm,0 AS tot_work_date ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  FROM 	allocateInfo b,carInfo a
 {executed in 4 msec}
2023-07-03 21:05:14.594 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-04월' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 1
2023-07-03 21:05:14.595 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
129. SELECT '[38번] 2023-04월' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-07-03 21:05:14.595 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-07-03 21:05:14.596 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
129. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 1 msec}
2023-07-03 21:05:14.598 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,'') = '' THEN '' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-04' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-04' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-07-03 21:05:14.614 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
129. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,'') = '' THEN '' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,'') = '' THEN '' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-04' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-04' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 15 msec}
2023-07-03 21:05:15.220 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@430f79d5
2023-07-03 21:05:15.220 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_DRIVERINFO_DETAIL} 
2023-07-03 21:05:15.220 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-04'
2023-07-03 21:05:15.221 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
128. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:05:15.223 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
128. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-04'
 {executed in 1 msec}
2023-07-03 21:05:15.259 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-04' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-07-03 21:05:15.260 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
128. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-04' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 21:06:56.165 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 21:06:56.169 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
131. WITH weekInfo AS ( /* select_getListRouteDrivingOrder : excel 승무지시 노선별 템플릿 정보 */
		SELECT decode(k.holiday_yn,'Y','공',k.week) AS week_gb
		FROM (
			SELECT CASE DAY_OF_WEEK('2023-05-02') WHEN 1 THEN '공' WHEN 7 THEN '토' ELSE '평' END week
			,	nvl((SELECT HOLIDAY_YN 	FROM 	TBM_HOLIDAY_INFO a 	WHERE 	COMPANY_NO ='100'	AND 	WORK_DATE = '2023-05-02'),'N') AS HOLIDAY_YN 
		) k	
	)
		SELECT 	a.route_nm ,a.start_point || '---' || a.end_point as title
			,	b.*
			,	'(' || '2023-05-02' || '_' || c.week_gb || ')승무지시서_' || '_' || b.file_id || '.xlsx' AS newFileNm
			,	c.week_gb
		FROM TBL_ROUTEINFO a ,tbl_file_info b,weekInfo c
		WHERE a.COMPANY_NO = '100'
		and a.route_nm = decode('','',a.route_nm,'')
		AND a.COMPANY_NO = b.COMPANY_NO
		AND b.file_gb = 'templete' 
		AND a.route_nm = b.FILE_ID
 {executed in 1 msec}
2023-07-03 21:06:56.173 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
131. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '5번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d2 <> ''
		    AND a.d2 LIKE b.d2 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '5번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:06:56.176 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
131. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '5-1번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d2 <> ''
		    AND a.d2 LIKE b.d2 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '5-1번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:06:56.180 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
131. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '20번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d2 <> ''
		    AND a.d2 LIKE b.d2 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '20번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 2 msec}
2023-07-03 21:06:56.184 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
131. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '21번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d2 <> ''
		    AND a.d2 LIKE b.d2 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '21번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:06:56.187 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
131. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '27번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d2 <> ''
		    AND a.d2 LIKE b.d2 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '27번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:06:56.190 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
131. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '38번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d2 <> ''
		    AND a.d2 LIKE b.d2 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '38번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 1 msec}
2023-07-03 21:06:56.193 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
131. SELECT	/* select_getDailyOffList : 노선별 휴가자 */
			a.route_nm
		,	listagg(a.EMP_NM ,',') WITHIN GROUP (ORDER BY a.PREV_DAILY_SEQ) AS name
	FROM	TBL_MONTH_ARRANGE_DETAIL a
	WHERE	a.company_no = '100'
		AND a.BASE_Ym = '2023-05'
		AND a.CAR_REGNO NOT LIKE 'SP%'
		AND (a.d2 LIKE '%*%' or a.d2 LIKE '%@%')
		AND a.DISPATCH_SEQ = 6
		AND a.INIT_SEQ = 0
		GROUP BY a.ROUTE_NM
 {executed in 1 msec}
2023-07-03 21:06:56.194 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
131. SELECT	/* select_getDailyOtherSPList : 노선별 타노선 근무자 */
			a.ROUTE_NM 
		,	listagg(a.EMP_NM||a.CAR_REGNO ,',') WITHIN GROUP (ORDER BY a.PREV_DAILY_SEQ) AS name
	FROM	TBL_MONTH_ARRANGE_DETAIL a
	WHERE	a.company_no = '100'
		AND a.BASE_Ym = '2023-05'
		AND a.CAR_REGNO  LIKE 'SP%'
		AND a.CAR_REGNO not LIKE '%' || a.ROUTE_NM || '%'
		AND (a.d2 <> '')
		AND (a.d2 NOT LIKE '%#%')
		AND a.DISPATCH_SEQ = 6
		AND a.INIT_SEQ = 0
	 GROUP BY a.ROUTE_NM
 {executed in 1 msec}
2023-07-03 21:07:13.928 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '5-1번' AND 	a.INIT_SEQ > 0
2023-07-03 21:07:13.928 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
132. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 21:07:13.929 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,'' AS AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  decode(AMPM_GUBUN,'p','오전','오후') || ' 배정 건수' AS CAR_REGNO,ampm_gubun,'-' emp_nm,0 AS tot_work_date ,0 D1 ,0 D2 ,0 D3 ,0 D4 ,0 D5 ,0 D6 ,0 D7 ,0 D8 ,0 D9 ,0 D10 ,0 D11 ,0 D12 ,0 D13 ,0 D14 ,0 D15 ,0 D16 ,0 D17 ,0 D18 ,0 D19 ,0 D20 ,0 D21 ,0 D22 ,0 D23 ,0 D24 ,0 D25 ,0 D26 ,0 D27 ,0 D28 ,0 d29 ,0 d30 ,0 d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND    b.PREV_DAILY_SEQ = 1 AND    b.AMPM_GUBUN IN ('a','p') ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,' ' AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  decode(b.AMPM_GUBUN,'p','오전','오후') || ' 미배정 건수' AS CAR_REGNO,b.AMPM_GUBUN ,'-' emp_nm,0 AS tot_work_date ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  FROM 	allocateInfo b,carInfo a
2023-07-03 21:07:13.930 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
132. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '5-1번' AND 	a.INIT_SEQ > 0
 {executed in 0 msec}
2023-07-03 21:07:13.930 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
133. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:07:13.933 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,'' AS AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  decode(AMPM_GUBUN,'p','오전','오후') || ' 배정 건수' AS CAR_REGNO,ampm_gubun,'-' emp_nm,0 AS tot_work_date ,0 D1 ,0 D2 ,0 D3 ,0 D4 ,0 D5 ,0 D6 ,0 D7 ,0 D8 ,0 D9 ,0 D10 ,0 D11 ,0 D12 ,0 D13 ,0 D14 ,0 D15 ,0 D16 ,0 D17 ,0 D18 ,0 D19 ,0 D20 ,0 D21 ,0 D22 ,0 D23 ,0 D24 ,0 D25 ,0 D26 ,0 D27 ,0 D28 ,0 d29 ,0 d30 ,0 d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND    b.PREV_DAILY_SEQ = 1 AND    b.AMPM_GUBUN IN ('a','p') ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,' ' AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  decode(b.AMPM_GUBUN,'p','오전','오후') || ' 미배정 건수' AS CAR_REGNO,b.AMPM_GUBUN ,'-' emp_nm,0 AS tot_work_date ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  FROM 	allocateInfo b,carInfo a
 {executed in 3 msec}
2023-07-03 21:07:13.934 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - SELECT '[5-1번] 2023-05월' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-07-03 21:07:13.935 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. SELECT '[5-1번] 2023-05월' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-07-03 21:07:13.935 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-07-03 21:07:13.936 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 1 msec}
2023-07-03 21:07:13.937 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '5-1번' ) b ORDER BY b.prev_daily_seq
2023-07-03 21:07:13.951 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '5-1번' ) b ORDER BY b.prev_daily_seq
 {executed in 14 msec}
2023-07-03 21:07:14.308 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5b7c2028
2023-07-03 21:07:14.309 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_DRIVERINFO_DETAIL} 
2023-07-03 21:07:14.309 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YM = '2023-05'
2023-07-03 21:07:14.310 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
132. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-07-03 21:07:14.334 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-07-03 21:07:14.336 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
132. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 21:07:34.681 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
132. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:07:34.682 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
132. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-03 21:07:34.683 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 21:07:34.777 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$658wc0edjmZbhEgLX6nRkesFxXF.4IQeeWXSlfIFyTj23BywmUp0C
2023-07-03 21:07:34.872 INFO  [http-nio-10010-exec-6] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 21:07:37.230 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
132. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:07:37.231 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
132. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 21:07:45.392 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,'' AS AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  decode(AMPM_GUBUN,'p','오전','오후') || ' 배정 건수' AS CAR_REGNO,ampm_gubun,'-' emp_nm,0 AS tot_work_date ,0 D1 ,0 D2 ,0 D3 ,0 D4 ,0 D5 ,0 D6 ,0 D7 ,0 D8 ,0 D9 ,0 D10 ,0 D11 ,0 D12 ,0 D13 ,0 D14 ,0 D15 ,0 D16 ,0 D17 ,0 D18 ,0 D19 ,0 D20 ,0 D21 ,0 D22 ,0 D23 ,0 D24 ,0 D25 ,0 D26 ,0 D27 ,0 D28 ,0 d29 ,0 d30 ,0 d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND    b.PREV_DAILY_SEQ = 1 AND    b.AMPM_GUBUN IN ('a','p') ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,' ' AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  decode(b.AMPM_GUBUN,'p','오전','오후') || ' 미배정 건수' AS CAR_REGNO,b.AMPM_GUBUN ,'-' emp_nm,0 AS tot_work_date ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  FROM 	allocateInfo b,carInfo a
2023-07-03 21:07:45.393 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
133. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:07:45.396 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,'' AS AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  decode(AMPM_GUBUN,'p','오전','오후') || ' 배정 건수' AS CAR_REGNO,ampm_gubun,'-' emp_nm,0 AS tot_work_date ,0 D1 ,0 D2 ,0 D3 ,0 D4 ,0 D5 ,0 D6 ,0 D7 ,0 D8 ,0 D9 ,0 D10 ,0 D11 ,0 D12 ,0 D13 ,0 D14 ,0 D15 ,0 D16 ,0 D17 ,0 D18 ,0 D19 ,0 D20 ,0 D21 ,0 D22 ,0 D23 ,0 D24 ,0 D25 ,0 D26 ,0 D27 ,0 D28 ,0 d29 ,0 d30 ,0 d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND    b.PREV_DAILY_SEQ = 1 AND    b.AMPM_GUBUN IN ('a','p') ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,' ' AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  decode(b.AMPM_GUBUN,'p','오전','오후') || ' 미배정 건수' AS CAR_REGNO,b.AMPM_GUBUN ,'-' emp_nm,0 AS tot_work_date ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  FROM 	allocateInfo b,carInfo a
 {executed in 2 msec}
2023-07-03 21:07:45.396 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - SELECT '[5-1번] 2023-05월' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-07-03 21:07:45.397 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. SELECT '[5-1번] 2023-05월' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-07-03 21:07:45.397 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-07-03 21:07:45.398 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 1 msec}
2023-07-03 21:07:45.399 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '5-1번' ) b ORDER BY b.prev_daily_seq
2023-07-03 21:07:45.412 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '5-1번' ) b ORDER BY b.prev_daily_seq
 {executed in 13 msec}
2023-07-03 21:07:47.382 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,'' AS AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  decode(AMPM_GUBUN,'p','오전','오후') || ' 배정 건수' AS CAR_REGNO,ampm_gubun,'-' emp_nm,0 AS tot_work_date ,0 D1 ,0 D2 ,0 D3 ,0 D4 ,0 D5 ,0 D6 ,0 D7 ,0 D8 ,0 D9 ,0 D10 ,0 D11 ,0 D12 ,0 D13 ,0 D14 ,0 D15 ,0 D16 ,0 D17 ,0 D18 ,0 D19 ,0 D20 ,0 D21 ,0 D22 ,0 D23 ,0 D24 ,0 D25 ,0 D26 ,0 D27 ,0 D28 ,0 d29 ,0 d30 ,0 d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND    b.PREV_DAILY_SEQ = 1 AND    b.AMPM_GUBUN IN ('a','p') ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,' ' AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  decode(b.AMPM_GUBUN,'p','오전','오후') || ' 미배정 건수' AS CAR_REGNO,b.AMPM_GUBUN ,'-' emp_nm,0 AS tot_work_date ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  FROM 	allocateInfo b,carInfo a
2023-07-03 21:07:47.383 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
133. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:07:47.385 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,'' AS AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  decode(AMPM_GUBUN,'p','오전','오후') || ' 배정 건수' AS CAR_REGNO,ampm_gubun,'-' emp_nm,0 AS tot_work_date ,0 D1 ,0 D2 ,0 D3 ,0 D4 ,0 D5 ,0 D6 ,0 D7 ,0 D8 ,0 D9 ,0 D10 ,0 D11 ,0 D12 ,0 D13 ,0 D14 ,0 D15 ,0 D16 ,0 D17 ,0 D18 ,0 D19 ,0 D20 ,0 D21 ,0 D22 ,0 D23 ,0 D24 ,0 D25 ,0 D26 ,0 D27 ,0 D28 ,0 d29 ,0 d30 ,0 d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND    b.PREV_DAILY_SEQ = 1 AND    b.AMPM_GUBUN IN ('a','p') ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,' ' AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  decode(b.AMPM_GUBUN,'p','오전','오후') || ' 미배정 건수' AS CAR_REGNO,b.AMPM_GUBUN ,'-' emp_nm,0 AS tot_work_date ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  FROM 	allocateInfo b,carInfo a
 {executed in 2 msec}
2023-07-03 21:07:47.386 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - SELECT '[5-1번] 2023-05월' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-07-03 21:07:47.386 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. SELECT '[5-1번] 2023-05월' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 0 msec}
2023-07-03 21:07:47.387 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - WITH RECURSIVE countera(n) AS ( WITH routeCount AS ( SELECT 'a' ampm_gubun, a.AUTO_CNT FROM TBL_ROUTEINFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '5-1번'	 union SELECT 'p' ampm_gubun, a.AUTO_CNT FROM TBL_ROUTEINFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '5-1번' ) SELECT t.n+1,t.n as no,c.ampm_gubun,to_char(t.n,'00') || c.ampm_gubun AS gubun ,  CASE WHEN a.ampm_gubun = '' AND a.d1 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d1 ,'[*@?]') and a.d1  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d1        ,  CASE WHEN a.ampm_gubun = '' AND a.d2  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d2  ,'[*@?]') and a.d2   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d2     ,  CASE WHEN a.ampm_gubun = '' AND a.d3  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d3  ,'[*@?]') and a.d3   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d3     ,  CASE WHEN a.ampm_gubun = '' AND a.d4  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d4  ,'[*@?]') and a.d4   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d4     ,  CASE WHEN a.ampm_gubun = '' AND a.d5  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d5  ,'[*@?]') and a.d5   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d5     ,  CASE WHEN a.ampm_gubun = '' AND a.d6  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d6  ,'[*@?]') and a.d6   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d6     ,  CASE WHEN a.ampm_gubun = '' AND a.d7  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d7  ,'[*@?]') and a.d7   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d7     ,  CASE WHEN a.ampm_gubun = '' AND a.d8  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d8  ,'[*@?]') and a.d8   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d8     ,  CASE WHEN a.ampm_gubun = '' AND a.d9  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d9  ,'[*@?]') and a.d9   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d9     ,  CASE WHEN a.ampm_gubun = '' AND a.d10 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d10 ,'[*@?]') and a.d10  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d10    ,  CASE WHEN a.ampm_gubun = '' AND a.d11 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d11 ,'[*@?]') and a.d11  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d11    ,  CASE WHEN a.ampm_gubun = '' AND a.d12 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d12 ,'[*@?]') and a.d12  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d12    ,  CASE WHEN a.ampm_gubun = '' AND a.d13 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d13 ,'[*@?]') and a.d13  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d13    ,  CASE WHEN a.ampm_gubun = '' AND a.d14 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d14 ,'[*@?]') and a.d14  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d14    ,  CASE WHEN a.ampm_gubun = '' AND a.d15 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d15 ,'[*@?]') and a.d15  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d15    ,  CASE WHEN a.ampm_gubun = '' AND a.d16 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d16 ,'[*@?]') and a.d16  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d16    ,  CASE WHEN a.ampm_gubun = '' AND a.d17 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d17 ,'[*@?]') and a.d17  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d17    ,  CASE WHEN a.ampm_gubun = '' AND a.d18 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d18 ,'[*@?]') and a.d18  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d18    ,  CASE WHEN a.ampm_gubun = '' AND a.d19 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d19 ,'[*@?]') and a.d19  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d19    ,  CASE WHEN a.ampm_gubun = '' AND a.d20 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d20 ,'[*@?]') and a.d20  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d20    ,  CASE WHEN a.ampm_gubun = '' AND a.d21 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d21 ,'[*@?]') and a.d21  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d21    ,  CASE WHEN a.ampm_gubun = '' AND a.d22 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d22 ,'[*@?]') and a.d22  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d22    ,  CASE WHEN a.ampm_gubun = '' AND a.d23 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d23 ,'[*@?]') and a.d23  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d23    ,  CASE WHEN a.ampm_gubun = '' AND a.d24 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d24 ,'[*@?]') and a.d24  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d24    ,  CASE WHEN a.ampm_gubun = '' AND a.d25 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d25 ,'[*@?]') and a.d25  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d25    ,  CASE WHEN a.ampm_gubun = '' AND a.d26 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d26 ,'[*@?]') and a.d26  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d26    ,  CASE WHEN a.ampm_gubun = '' AND a.d27 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d27 ,'[*@?]') and a.d27  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d27    ,  CASE WHEN a.ampm_gubun = '' AND a.d28 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d28 ,'[*@?]') and a.d28  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d28    ,  CASE WHEN a.ampm_gubun = '' AND a.d29 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d29 ,'[*@?]') and a.d29  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d29    ,  CASE WHEN a.ampm_gubun = '' AND a.d30 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d30 ,'[*@?]') and a.d30  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d30    ,  CASE WHEN a.ampm_gubun = '' AND a.d31 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d31 ,'[*@?]') and a.d31  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d31    FROM t ,TBL_MONTH_ARRANGE_DETAIL a , routeCount c WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '5-1번' AND 	a.BASE_YM = '2023-05' AND 	a.dispatch_seq = 6 AND     a.init_seq = 0 AND     t.n <= c.auto_cnt ) SELECT 	decode(ampm_gubun,'a','오전','오후') as ampm_gubun , no as seq,0 as cnt ,	max(d1 ) as d1 ,	max(d2 ) as d2 ,	max(d3 ) as d3 ,	max(d4 ) as d4 ,	max(d5 ) as d5 ,	max(d6 ) as d6 ,	max(d7 ) as d7 ,	max(d8 ) as d8 ,	max(d9 ) as d9 ,	max(d10) as d10 ,	max(d11) as d11 ,	max(d12) as d12 ,	max(d13) as d13 ,	max(d14) as d14 ,	max(d15) as d15 ,	max(d16) as d16 ,	max(d17) as d17 ,	max(d18) as d18 ,	max(d19) as d19 ,	max(d20) as d20 ,	max(d21) as d21 ,	max(d22) as d22 ,	max(d23) as d23 ,	max(d24) as d24 ,	max(d25) as d25 ,	max(d26) as d26 ,	max(d27) as d27 ,	max(d28) as d28 ,	max(d29) as d29 ,	max(d30) as d30 ,	max(d31) as d31 from countera GROUP BY ampm_gubun,gubun
2023-07-03 21:07:47.410 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. WITH RECURSIVE countera(n) AS ( WITH routeCount AS ( SELECT 'a' ampm_gubun, a.AUTO_CNT FROM TBL_ROUTEINFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '5-1번'	 union SELECT 'p' ampm_gubun, a.AUTO_CNT FROM TBL_ROUTEINFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '5-1번' ) SELECT t.n+1,t.n as no,c.ampm_gubun,to_char(t.n,'00') || c.ampm_gubun AS gubun ,  CASE WHEN a.ampm_gubun = '' AND a.d1 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d1 ,'[*@?]') and a.d1  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d1        ,  CASE WHEN a.ampm_gubun = '' AND a.d2  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d2  ,'[*@?]') and a.d2   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d2     ,  CASE WHEN a.ampm_gubun = '' AND a.d3  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d3  ,'[*@?]') and a.d3   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d3     ,  CASE WHEN a.ampm_gubun = '' AND a.d4  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d4  ,'[*@?]') and a.d4   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d4     ,  CASE WHEN a.ampm_gubun = '' AND a.d5  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d5  ,'[*@?]') and a.d5   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d5     ,  CASE WHEN a.ampm_gubun = '' AND a.d6  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d6  ,'[*@?]') and a.d6   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d6     ,  CASE WHEN a.ampm_gubun = '' AND a.d7  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d7  ,'[*@?]') and a.d7   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d7     ,  CASE WHEN a.ampm_gubun = '' AND a.d8  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d8  ,'[*@?]') and a.d8   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d8     ,  CASE WHEN a.ampm_gubun = '' AND a.d9  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d9  ,'[*@?]') and a.d9   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d9     ,  CASE WHEN a.ampm_gubun = '' AND a.d10 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d10 ,'[*@?]') and a.d10  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d10    ,  CASE WHEN a.ampm_gubun = '' AND a.d11 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d11 ,'[*@?]') and a.d11  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d11    ,  CASE WHEN a.ampm_gubun = '' AND a.d12 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d12 ,'[*@?]') and a.d12  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d12    ,  CASE WHEN a.ampm_gubun = '' AND a.d13 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d13 ,'[*@?]') and a.d13  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d13    ,  CASE WHEN a.ampm_gubun = '' AND a.d14 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d14 ,'[*@?]') and a.d14  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d14    ,  CASE WHEN a.ampm_gubun = '' AND a.d15 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d15 ,'[*@?]') and a.d15  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d15    ,  CASE WHEN a.ampm_gubun = '' AND a.d16 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d16 ,'[*@?]') and a.d16  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d16    ,  CASE WHEN a.ampm_gubun = '' AND a.d17 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d17 ,'[*@?]') and a.d17  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d17    ,  CASE WHEN a.ampm_gubun = '' AND a.d18 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d18 ,'[*@?]') and a.d18  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d18    ,  CASE WHEN a.ampm_gubun = '' AND a.d19 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d19 ,'[*@?]') and a.d19  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d19    ,  CASE WHEN a.ampm_gubun = '' AND a.d20 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d20 ,'[*@?]') and a.d20  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d20    ,  CASE WHEN a.ampm_gubun = '' AND a.d21 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d21 ,'[*@?]') and a.d21  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d21    ,  CASE WHEN a.ampm_gubun = '' AND a.d22 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d22 ,'[*@?]') and a.d22  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d22    ,  CASE WHEN a.ampm_gubun = '' AND a.d23 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d23 ,'[*@?]') and a.d23  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d23    ,  CASE WHEN a.ampm_gubun = '' AND a.d24 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d24 ,'[*@?]') and a.d24  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d24    ,  CASE WHEN a.ampm_gubun = '' AND a.d25 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d25 ,'[*@?]') and a.d25  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d25    ,  CASE WHEN a.ampm_gubun = '' AND a.d26 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d26 ,'[*@?]') and a.d26  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d26    ,  CASE WHEN a.ampm_gubun = '' AND a.d27 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d27 ,'[*@?]') and a.d27  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d27    ,  CASE WHEN a.ampm_gubun = '' AND a.d28 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d28 ,'[*@?]') and a.d28  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d28    ,  CASE WHEN a.ampm_gubun = '' AND a.d29 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d29 ,'[*@?]') and a.d29  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d29    ,  CASE WHEN a.ampm_gubun = '' AND a.d30 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d30 ,'[*@?]') and a.d30  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d30    ,  CASE WHEN a.ampm_gubun = '' AND a.d31 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d31 ,'[*@?]') and a.d31  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d31    FROM t ,TBL_MONTH_ARRANGE_DETAIL a , routeCount c WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '5-1번' AND 	a.BASE_YM = '2023-05' AND 	a.dispatch_seq = 6 AND     a.init_seq = 0 AND     t.n <= c.auto_cnt ) SELECT 	decode(ampm_gubun,'a','오전','오후') as ampm_gubun , no as seq,0 as cnt ,	max(d1 ) as d1 ,	max(d2 ) as d2 ,	max(d3 ) as d3 ,	max(d4 ) as d4 ,	max(d5 ) as d5 ,	max(d6 ) as d6 ,	max(d7 ) as d7 ,	max(d8 ) as d8 ,	max(d9 ) as d9 ,	max(d10) as d10 ,	max(d11) as d11 ,	max(d12) as d12 ,	max(d13) as d13 ,	max(d14) as d14 ,	max(d15) as d15 ,	max(d16) as d16 ,	max(d17) as d17 ,	max(d18) as d18 ,	max(d19) as d19 ,	max(d20) as d20 ,	max(d21) as d21 ,	max(d22) as d22 ,	max(d23) as d23 ,	max(d24) as d24 ,	max(d25) as d25 ,	max(d26) as d26 ,	max(d27) as d27 ,	max(d28) as d28 ,	max(d29) as d29 ,	max(d30) as d30 ,	max(d31) as d31 from countera GROUP BY ampm_gubun,gubun
 {executed in 22 msec}
2023-07-03 21:07:50.684 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6bc63655
2023-07-03 21:07:50.684 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={dailyArrangeInfo} 
2023-07-03 21:07:50.684 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT k.*,e.phone_no,e.email,e.emp_no FROM ( SELECT a.CAR_REGNO ,a.EMP_NM ,'-' as value,REGEXP_REPLACE(a.d2,'[*0-9@]','') AS ampm,convert(REGEXP_REPLACE(a.d2,'[*ap@]',''),int) AS seq FROM 	TBL_MONTH_ARRANGE_DETAIL a WHERE 	a.company_no = '100' AND 	a.route_nm = '5-1번' AND    a.BASE_Ym = '2023-05' AND    a.CAR_REGNO  NOT LIKE 'SP%' AND 	a.d2 NOT LIKE '%*%' AND 	a.d2 NOT LIKE '%@%' AND    a.DISPATCH_SEQ = 6 AND    a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO ,b.EMP_NM ,decode(b.EMP_NM,NULL,'-','SP') AS value,REGEXP_REPLACE(a.d2,'[*0-9@-]','') AS ampm,convert(REGEXP_REPLACE(a.d2,'[*ap@-]',''),int) AS seq FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b on     a.COMPANY_NO =b.COMPANY_NO AND 	a.ROUTE_NM = b.ROUTE_NM AND 	a.BASE_YM  = b.BASE_YM AND 	a.DISPATCH_SEQ = b.DISPATCH_SEQ AND 	a.INIT_SEQ = b.INIT_SEQ AND    b.CAR_REGNO LIKE 'SP%' AND    b.d2 <>'' AND 	a.d2 LIKE b.d2 || '%' WHERE	a.company_no = '100'  AND 	a.route_nm = '5-1번' AND     a.BASE_Ym = '2023-05' AND     a.CAR_REGNO  NOT LIKE 'SP%' AND 	(a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') AND     a.DISPATCH_SEQ = 6 AND     a.INIT_SEQ = 0 ) k left outer join tbl_employeeInfo e on k.emp_nm = e.emp_nm AND 	e.company_no = '100' ORDER BY 4 ,5
2023-07-03 21:07:50.685 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
133. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:07:50.690 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. SELECT k.*,e.phone_no,e.email,e.emp_no FROM ( SELECT a.CAR_REGNO ,a.EMP_NM ,'-' as value,REGEXP_REPLACE(a.d2,'[*0-9@]','') AS ampm,convert(REGEXP_REPLACE(a.d2,'[*ap@]',''),int) AS seq FROM 	TBL_MONTH_ARRANGE_DETAIL a WHERE 	a.company_no = '100' AND 	a.route_nm = '5-1번' AND    a.BASE_Ym = '2023-05' AND    a.CAR_REGNO  NOT LIKE 'SP%' AND 	a.d2 NOT LIKE '%*%' AND 	a.d2 NOT LIKE '%@%' AND    a.DISPATCH_SEQ = 6 AND    a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO ,b.EMP_NM ,decode(b.EMP_NM,NULL,'-','SP') AS value,REGEXP_REPLACE(a.d2,'[*0-9@-]','') AS ampm,convert(REGEXP_REPLACE(a.d2,'[*ap@-]',''),int) AS seq FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b on     a.COMPANY_NO =b.COMPANY_NO AND 	a.ROUTE_NM = b.ROUTE_NM AND 	a.BASE_YM  = b.BASE_YM AND 	a.DISPATCH_SEQ = b.DISPATCH_SEQ AND 	a.INIT_SEQ = b.INIT_SEQ AND    b.CAR_REGNO LIKE 'SP%' AND    b.d2 <>'' AND 	a.d2 LIKE b.d2 || '%' WHERE	a.company_no = '100'  AND 	a.route_nm = '5-1번' AND     a.BASE_Ym = '2023-05' AND     a.CAR_REGNO  NOT LIKE 'SP%' AND 	(a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') AND     a.DISPATCH_SEQ = 6 AND     a.INIT_SEQ = 0 ) k left outer join tbl_employeeInfo e on k.emp_nm = e.emp_nm AND 	e.company_no = '100' ORDER BY 4 ,5
 {executed in 3 msec}
2023-07-03 21:07:50.693 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. SELECT k.*,e.phone_no,e.email,e.emp_no FROM ( SELECT a.CAR_REGNO ,a.EMP_NM ,'-' as value,REGEXP_REPLACE(a.d2,'[*0-9@]','') AS ampm,convert(REGEXP_REPLACE(a.d2,'[*ap@]',''),int) AS seq FROM 	TBL_MONTH_ARRANGE_DETAIL a WHERE 	a.company_no = '100' AND 	a.route_nm = '5-1번' AND    a.BASE_Ym = '2023-05' AND    a.CAR_REGNO  NOT LIKE 'SP%' AND 	a.d2 NOT LIKE '%*%' AND 	a.d2 NOT LIKE '%@%' AND    a.DISPATCH_SEQ = 6 AND    a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO ,b.EMP_NM ,decode(b.EMP_NM,NULL,'-','SP') AS value,REGEXP_REPLACE(a.d2,'[*0-9@-]','') AS ampm,convert(REGEXP_REPLACE(a.d2,'[*ap@-]',''),int) AS seq FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b on     a.COMPANY_NO =b.COMPANY_NO AND 	a.ROUTE_NM = b.ROUTE_NM AND 	a.BASE_YM  = b.BASE_YM AND 	a.DISPATCH_SEQ = b.DISPATCH_SEQ AND 	a.INIT_SEQ = b.INIT_SEQ AND    b.CAR_REGNO LIKE 'SP%' AND    b.d2 <>'' AND 	a.d2 LIKE b.d2 || '%' WHERE	a.company_no = '100'  AND 	a.route_nm = '5-1번' AND     a.BASE_Ym = '2023-05' AND     a.CAR_REGNO  NOT LIKE 'SP%' AND 	(a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') AND     a.DISPATCH_SEQ = 6 AND     a.INIT_SEQ = 0 ) k left outer join tbl_employeeInfo e on k.emp_nm = e.emp_nm AND 	e.company_no = '100' ORDER BY 4 ,5
 {executed in 3 msec}
2023-07-03 21:08:11.970 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,'' AS AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  decode(AMPM_GUBUN,'p','오전','오후') || ' 배정 건수' AS CAR_REGNO,ampm_gubun,'-' emp_nm,0 AS tot_work_date ,0 D1 ,0 D2 ,0 D3 ,0 D4 ,0 D5 ,0 D6 ,0 D7 ,0 D8 ,0 D9 ,0 D10 ,0 D11 ,0 D12 ,0 D13 ,0 D14 ,0 D15 ,0 D16 ,0 D17 ,0 D18 ,0 D19 ,0 D20 ,0 D21 ,0 D22 ,0 D23 ,0 D24 ,0 D25 ,0 D26 ,0 D27 ,0 D28 ,0 d29 ,0 d30 ,0 d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND    b.PREV_DAILY_SEQ = 1 AND    b.AMPM_GUBUN IN ('a','p') ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,' ' AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  decode(b.AMPM_GUBUN,'p','오전','오후') || ' 미배정 건수' AS CAR_REGNO,b.AMPM_GUBUN ,'-' emp_nm,0 AS tot_work_date ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  FROM 	allocateInfo b,carInfo a
2023-07-03 21:08:11.971 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
133. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:08:11.973 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,'' AS AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  decode(AMPM_GUBUN,'p','오전','오후') || ' 배정 건수' AS CAR_REGNO,ampm_gubun,'-' emp_nm,0 AS tot_work_date ,0 D1 ,0 D2 ,0 D3 ,0 D4 ,0 D5 ,0 D6 ,0 D7 ,0 D8 ,0 D9 ,0 D10 ,0 D11 ,0 D12 ,0 D13 ,0 D14 ,0 D15 ,0 D16 ,0 D17 ,0 D18 ,0 D19 ,0 D20 ,0 D21 ,0 D22 ,0 D23 ,0 D24 ,0 D25 ,0 D26 ,0 D27 ,0 D28 ,0 d29 ,0 d30 ,0 d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND    b.PREV_DAILY_SEQ = 1 AND    b.AMPM_GUBUN IN ('a','p') ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,' ' AMPM_GUBUN ,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  decode(b.AMPM_GUBUN,'p','오전','오후') || ' 미배정 건수' AS CAR_REGNO,b.AMPM_GUBUN ,'-' emp_nm,0 AS tot_work_date ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  FROM 	allocateInfo b,carInfo a
 {executed in 2 msec}
2023-07-03 21:08:11.974 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - SELECT '[5-1번] 2023-05월' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-07-03 21:08:11.975 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. SELECT '[5-1번] 2023-05월' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-07-03 21:08:11.975 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-07-03 21:08:11.976 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '5-1번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 1 msec}
2023-07-03 21:08:11.977 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '5-1번' ) b ORDER BY b.prev_daily_seq
2023-07-03 21:08:11.989 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
133. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,'') = '' THEN '' WHEN b.route_nm = '5-1번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '5-1번' ) b ORDER BY b.prev_daily_seq
 {executed in 11 msec}
2023-07-03 21:46:29.742 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=28m23s649ms346µs301ns).
2023-07-03 21:52:29.540 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7756fabc
2023-07-03 21:52:29.540 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-07-03 21:52:29.541 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-07-03 21:52:29.543 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:52:29.572 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 28 msec}
2023-07-03 21:52:29.603 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 28 msec}
2023-07-03 21:52:37.024 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3afba261
2023-07-03 21:52:37.024 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-07-03 21:52:37.024 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
2023-07-03 21:52:37.026 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:52:37.027 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-07-03 21:52:37.028 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-07-03 21:52:37.043 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6de4b249
2023-07-03 21:52:37.043 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-07-03 21:52:37.043 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
2023-07-03 21:52:37.046 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 2 msec}
2023-07-03 21:52:37.048 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 2 msec}
2023-07-03 21:53:22.629 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@272e546d
2023-07-03 21:53:22.629 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-07-03 21:53:22.630 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-07-03 21:53:22.632 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-03 21:53:22.654 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 21 msec}
2023-07-03 21:53:22.667 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 12 msec}
2023-07-03 21:53:26.016 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a6f17599
2023-07-03 21:53:26.016 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-07-03 21:53:26.016 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-07-03 21:53:26.018 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 21:53:26.018 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-07-03 21:53:26.019 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-07-03 21:53:26.035 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@15e24002
2023-07-03 21:53:26.035 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-07-03 21:53:26.036 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-05-28' order by a.col002
2023-07-03 21:53:26.037 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-05-28' order by a.col002
 {executed in 1 msec}
2023-07-03 21:53:26.039 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-05-28' order by a.col002
 {executed in 1 msec}
2023-07-03 21:53:37.203 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bfa60735
2023-07-03 21:53:37.203 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-07-03 21:53:37.203 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-07-03 21:53:37.205 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:53:37.222 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 17 msec}
2023-07-03 21:53:37.242 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 18 msec}
2023-07-03 21:53:38.626 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@822a7fc8
2023-07-03 21:53:38.626 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-07-03 21:53:38.626 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
2023-07-03 21:53:38.628 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:53:38.629 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-07-03 21:53:38.631 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-07-03 21:53:38.651 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1e7acbc4
2023-07-03 21:53:38.651 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-07-03 21:53:38.652 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-07-03 21:53:38.654 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 2 msec}
2023-07-03 21:53:38.656 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-07-03 21:53:42.600 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b8b885e4
2023-07-03 21:53:42.600 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-07-03 21:53:42.600 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-07-03 21:53:42.602 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-03 21:53:42.624 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 22 msec}
2023-07-03 21:53:42.645 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 20 msec}
2023-07-03 21:53:49.078 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4fa684f8
2023-07-03 21:53:49.078 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-07-03 21:53:49.078 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
2023-07-03 21:53:49.080 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 21:53:49.081 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-07-03 21:53:49.083 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-07-03 21:53:49.095 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6de4b249
2023-07-03 21:53:49.095 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-07-03 21:53:49.095 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
2023-07-03 21:53:49.097 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 2 msec}
2023-07-03 21:53:49.099 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 2 msec}
2023-07-03 21:55:09.501 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7756fabc
2023-07-03 21:55:09.501 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-07-03 21:55:09.501 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-07-03 21:55:09.503 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:55:09.516 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 12 msec}
2023-07-03 21:55:09.527 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 10 msec}
2023-07-03 21:55:11.049 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3afba261
2023-07-03 21:55:11.049 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-07-03 21:55:11.050 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
2023-07-03 21:55:11.051 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 21:55:11.053 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-07-03 21:55:11.054 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-07-03 21:55:11.070 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6de4b249
2023-07-03 21:55:11.071 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-07-03 21:55:11.071 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
2023-07-03 21:55:11.072 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 1 msec}
2023-07-03 21:55:11.074 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 1 msec}
2023-07-03 21:58:36.580 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 21:58:36.584 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
145. WITH weekInfo AS ( /* select_getListRouteDrivingOrder : excel 승무지시 노선별 템플릿 정보 */
		SELECT decode(k.holiday_yn,'Y','공',k.week) AS week_gb
		FROM (
			SELECT CASE DAY_OF_WEEK('2023-05-02') WHEN 1 THEN '공' WHEN 7 THEN '토' ELSE '평' END week
			,	nvl((SELECT HOLIDAY_YN 	FROM 	TBM_HOLIDAY_INFO a 	WHERE 	COMPANY_NO ='100'	AND 	WORK_DATE = '2023-05-02'),'N') AS HOLIDAY_YN 
		) k	
	)
		SELECT 	a.route_nm ,a.start_point || '---' || a.end_point as title
			,	b.*
			,	'(' || '2023-05-02' || '_' || c.week_gb || ')승무지시서_' || '_' || b.file_id || '.xlsx' AS newFileNm
			,	c.week_gb
		FROM TBL_ROUTEINFO a ,tbl_file_info b,weekInfo c
		WHERE a.COMPANY_NO = '100'
		and a.route_nm = decode('','',a.route_nm,'')
		AND a.COMPANY_NO = b.COMPANY_NO
		AND b.file_gb = 'templete' 
		AND a.route_nm = b.FILE_ID
 {executed in 2 msec}
2023-07-03 21:58:36.591 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
145. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '5번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d2 <> ''
		    AND a.d2 LIKE b.d2 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '5번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 2 msec}
2023-07-03 21:58:36.597 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
145. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '5-1번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d2 <> ''
		    AND a.d2 LIKE b.d2 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '5-1번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 3 msec}
2023-07-03 21:58:36.605 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
145. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '20번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d2 <> ''
		    AND a.d2 LIKE b.d2 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '20번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 3 msec}
2023-07-03 21:58:36.612 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
145. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '21번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d2 <> ''
		    AND a.d2 LIKE b.d2 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '21번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 3 msec}
2023-07-03 21:58:36.619 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
145. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '27번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d2 <> ''
		    AND a.d2 LIKE b.d2 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '27번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 3 msec}
2023-07-03 21:58:36.625 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
145. SELECT /* select_getDailyArrangeInfoAll : 일일 전체배차현황표 화면용 */
		'' AS temp1
		,	k.seq as seq1
		,	nvl(max(decode(k.ampm,'a',k.emp_nm,'')),'-') AS am_nm
		,	RIGHT(k.car_regno,4) as car_regno
		,	nvl(max(decode(k.ampm,'p',k.emp_nm)),'-') AS pm_nm
		,	k.seq as seq2
		,'' AS temp2
	FROM (
	SELECT
			a.CAR_REGNO ,
			a.EMP_NM ,
			'-' AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm,CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		WHERE	a.company_no = '100'
			AND a.route_nm = '38번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND a.d2 NOT LIKE '%*%'
			AND a.d2 NOT LIKE '%@%'
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
	UNION ALL
		SELECT
			a.CAR_REGNO ,
			nvl(b.EMP_NM,'-') AS emp_nm ,
			decode(b.EMP_NM, NULL, '-', 'SP') AS value,
			REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm,		CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),		int) AS seq
		FROM	TBL_MONTH_ARRANGE_DETAIL a
		LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO
			AND a.ROUTE_NM = b.ROUTE_NM
			AND a.BASE_YM = b.BASE_YM
			AND a.DISPATCH_SEQ = b.DISPATCH_SEQ
			AND a.INIT_SEQ = b.INIT_SEQ
			AND b.CAR_REGNO LIKE 'SP%'
		    AND b.d2 <> ''
		    AND a.d2 LIKE b.d2 || '%'
		WHERE a.company_no = '100'
			AND a.route_nm = '38번'
			AND a.BASE_Ym = '2023-05'
			AND a.CAR_REGNO NOT LIKE 'SP%'
			AND (a.d2 LIKE '%*%' OR a.d2 LIKE '%@%') 
			AND a.DISPATCH_SEQ = 6
			AND a.INIT_SEQ = 0
		ORDER BY 5,4
	) k
	GROUP BY k.car_regno,k.seq
	ORDER BY k.seq
 {executed in 3 msec}
2023-07-03 21:58:36.629 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
145. SELECT	/* select_getDailyOffList : 노선별 휴가자 */
			a.route_nm
		,	listagg(a.EMP_NM ,',') WITHIN GROUP (ORDER BY a.PREV_DAILY_SEQ) AS name
	FROM	TBL_MONTH_ARRANGE_DETAIL a
	WHERE	a.company_no = '100'
		AND a.BASE_Ym = '2023-05'
		AND a.CAR_REGNO NOT LIKE 'SP%'
		AND (a.d2 LIKE '%*%' or a.d2 LIKE '%@%')
		AND a.DISPATCH_SEQ = 6
		AND a.INIT_SEQ = 0
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-03 21:58:36.633 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
145. SELECT	/* select_getDailyOtherSPList : 노선별 타노선 근무자 */
			a.ROUTE_NM 
		,	listagg(a.EMP_NM||a.CAR_REGNO ,',') WITHIN GROUP (ORDER BY a.PREV_DAILY_SEQ) AS name
	FROM	TBL_MONTH_ARRANGE_DETAIL a
	WHERE	a.company_no = '100'
		AND a.BASE_Ym = '2023-05'
		AND a.CAR_REGNO  LIKE 'SP%'
		AND a.CAR_REGNO not LIKE '%' || a.ROUTE_NM || '%'
		AND (a.d2 <> '')
		AND (a.d2 NOT LIKE '%#%')
		AND a.DISPATCH_SEQ = 6
		AND a.INIT_SEQ = 0
	 GROUP BY a.ROUTE_NM
 {executed in 1 msec}
2023-07-03 22:05:37.603 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 22:05:37.604 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
145. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 22:05:43.357 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
145. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 22:05:43.361 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
145. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 22:05:58.047 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
145. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 14676 msec}
2023-07-03 22:06:50.925 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
155. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-03 22:06:50.927 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
155. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-03 22:06:50.930 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 22:06:51.165 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$NdBGR8V.xlvWksIfJx4auujNt7HvpCuFSCWG7qkGqjKoiXgJ75QCW
2023-07-03 22:06:51.365 INFO  [http-nio-10010-exec-10] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 22:06:55.147 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
155. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 22:06:55.148 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
155. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 22:07:00.867 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
155. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 22:07:00.871 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
155. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 22:07:15.823 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
155. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 14942 msec}
2023-07-03 22:07:55.235 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
155. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 22:07:55.236 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
155. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-03 22:07:55.238 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 22:07:55.442 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$6iUk5TZf2oT9EgM.znSUBOce0EqvWteb1tWVUfmtWQ.DGZMG73F1m
2023-07-03 22:07:55.654 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 22:08:24.861 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
155. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 22:08:24.864 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
155. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 22:08:30.867 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
155. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 22:08:30.872 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
155. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 22:08:45.820 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
155. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 14941 msec}
2023-07-03 22:39:02.236 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
165. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 22:39:02.237 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
165. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 22:39:08.073 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
165. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 22:39:08.078 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
165. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 22:39:22.371 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
165. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE a.COMPANY_NO  = '100'
			AND a.work_date LIKE '2023-04' || '%'
			AND a.ROUTE_NM = '38번'
			AND a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 14286 msec}
2023-07-03 22:42:08.618 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
165. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 22:42:08.620 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
165. select * from MEMBER where userId = 'p00139'
 {executed in 2 msec}
2023-07-03 22:42:08.622 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 22:42:08.766 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$CgaceFRYcncXQZApsJyaYercQgaCEZyoBC.j2YmTUJ6FrmSlle83i
2023-07-03 22:42:08.977 INFO  [http-nio-10010-exec-3] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 22:45:22.473 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-03 22:45:22.475 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
167. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 22:45:22.505 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
167. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 30 msec}
2023-07-03 22:45:26.371 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c45864da
2023-07-03 22:45:26.372 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
167. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 22:45:26.377 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
167. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선'
	order by 1
 {executed in 3 msec}
2023-07-03 22:45:26.422 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8b67e28a
2023-07-03 22:45:26.422 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-03 22:45:26.422 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
2023-07-03 22:45:26.424 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
167. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
 {executed in 2 msec}
2023-07-03 22:45:26.426 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
167. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.acc_date desc,a.acc_time desc
 {executed in 0 msec}
2023-07-03 22:45:26.486 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
167. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '남기선'
 {executed in 0 msec}
2023-07-03 23:11:33.325 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 21176 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-03 23:11:33.332 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-03 23:11:33.394 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-03 23:11:33.395 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-03 23:11:35.146 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 23:11:35.147 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-03 23:11:35.316 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 159ms. Found 3 JPA repository interfaces.
2023-07-03 23:11:35.685 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 23:11:35.685 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-03 23:11:35.732 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:11:35.732 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:11:35.733 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:11:35.733 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 48ms. Found 0 JDBC repository interfaces.
2023-07-03 23:11:36.195 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-03 23:11:36.262 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-03 23:11:36.262 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 23:11:36.262 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:11:36.262 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:11:36.262 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:11:36.262 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-03 23:11:36.263 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:11:36.263 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:11:36.263 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:11:36.263 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:11:36.263 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 23:11:36.263 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:11:36.332 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$af1e031e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:11:36.390 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-03 23:11:36.485 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$9914674b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:11:36.576 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:11:36.579 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4aa58dc3' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:11:36.584 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$bde909fd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:11:36.593 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$e33e2213] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:11:36.598 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:11:36.599 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:11:36.622 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$669f11] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:11:36.652 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$7fe6ec43] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:11:36.802 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-03 23:11:36.807 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-03 23:11:37.281 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8080 (http)
2023-07-03 23:11:37.298 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8080"]
2023-07-03 23:11:37.309 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-03 23:11:37.309 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-03 23:11:37.714 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-03 23:11:37.726 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-03 23:11:37.726 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4331 ms
2023-07-03 23:11:38.642 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@3b529818 with name: jasyptStringEncryptor
2023-07-03 23:11:38.699 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-03 23:11:38.805 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-03 23:11:38.809 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-03 23:11:39.771 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-03 23:11:40.176 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-03 23:11:40.258 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-03 23:11:40.261 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-03 23:11:40.435 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-03 23:11:40.686 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:11:40.704 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-03 23:11:41.510 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:11:41.513 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-03 23:11:41.599 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-03 23:11:41.878 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-03 23:11:43.099 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-03 23:11:43.111 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-03 23:11:43.320 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-03 23:11:43.321 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-03 23:11:43.321 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-03 23:11:43.321 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-03 23:11:43.321 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-03 23:11:43.321 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-03 23:11:43.321 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-03 23:11:43.321 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-03 23:11:43.321 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-03 23:11:43.506 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@68fe3422, org.springframework.security.web.context.SecurityContextPersistenceFilter@7fb4bbc5, org.springframework.security.web.header.HeaderWriterFilter@7452eb74, org.springframework.web.filter.CorsFilter@33d9b22a, org.springframework.security.web.authentication.logout.LogoutFilter@4020608c, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5ebfbde9, org.springframework.security.web.session.ConcurrentSessionFilter@4517ae8, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@45aa4e67, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2f9e2ef2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5df08a8b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@56bb3775, org.springframework.security.web.session.SessionManagementFilter@1b67417a, org.springframework.security.web.access.ExceptionTranslationFilter@366f12c, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3750b15e]
2023-07-03 23:11:43.529 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-03 23:11:43.904 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-03 23:11:43.987 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-03 23:11:44.479 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:11:45.458 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-03 23:11:45.488 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-03 23:11:45.659 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-03 23:11:45.662 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8080"]
2023-07-03 23:11:45.725 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8080 (http) with context path ''
2023-07-03 23:11:45.730 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 12.938 seconds (JVM running for 16.829)
2023-07-03 23:11:45.730 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 23:11:45.731 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-03 23:11:45.731 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 23:11:46.797 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-03 23:11:46.798 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-03 23:11:46.823 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 25 ms
2023-07-03 23:12:08.084 INFO  [RMI TCP Connection(6)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-03 23:12:08.121 INFO  [RMI TCP Connection(6)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-03 23:12:08.124 INFO  [RMI TCP Connection(6)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-03 23:12:08.131 INFO  [RMI TCP Connection(6)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-03 23:12:08.182 INFO  [RMI TCP Connection(6)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-03 23:12:12.424 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 30992 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-03 23:12:12.429 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-03 23:12:12.490 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-03 23:12:12.490 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-03 23:12:13.786 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 23:12:13.787 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-03 23:12:13.941 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 145ms. Found 3 JPA repository interfaces.
2023-07-03 23:12:14.331 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 23:12:14.332 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-03 23:12:14.380 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:12:14.381 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:12:14.382 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:12:14.382 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 50ms. Found 0 JDBC repository interfaces.
2023-07-03 23:12:14.876 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-03 23:12:14.952 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-03 23:12:14.952 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 23:12:14.952 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:12:14.953 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:12:14.953 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:12:14.953 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-03 23:12:14.953 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:12:14.953 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:12:14.954 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:12:14.954 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:12:14.954 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 23:12:14.954 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:12:15.017 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$7245c1df] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:12:15.072 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-03 23:12:15.166 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$5c3c260c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:12:15.261 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:12:15.263 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@55175ac8' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:12:15.268 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$8110c8be] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:12:15.278 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$a665e0d4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:12:15.282 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:12:15.284 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:12:15.308 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c38e5dd2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:12:15.340 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$430eab04] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:12:15.496 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-03 23:12:15.502 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-03 23:12:16.028 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8080 (http)
2023-07-03 23:12:16.048 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8080"]
2023-07-03 23:12:16.060 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-03 23:12:16.061 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-03 23:12:16.483 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-03 23:12:16.496 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-03 23:12:16.497 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4007 ms
2023-07-03 23:12:17.433 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@3793f494 with name: jasyptStringEncryptor
2023-07-03 23:12:17.493 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-03 23:12:17.608 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 11 msec}
2023-07-03 23:12:17.613 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-03 23:12:18.544 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-03 23:12:18.936 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-03 23:12:19.033 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-03 23:12:19.034 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-03 23:12:19.188 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-03 23:12:19.448 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:12:19.468 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-03 23:12:20.261 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-03 23:12:20.263 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-03 23:12:20.341 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-03 23:12:20.629 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-03 23:12:21.856 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-03 23:12:21.867 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-03 23:12:22.055 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-03 23:12:22.056 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-03 23:12:22.056 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-03 23:12:22.056 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-03 23:12:22.056 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-03 23:12:22.056 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-03 23:12:22.056 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-03 23:12:22.056 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-03 23:12:22.056 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-03 23:12:22.235 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7d8aa8ac, org.springframework.security.web.context.SecurityContextPersistenceFilter@72fa585f, org.springframework.security.web.header.HeaderWriterFilter@79aab532, org.springframework.web.filter.CorsFilter@2046187e, org.springframework.security.web.authentication.logout.LogoutFilter@8dcd09, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7b39edb7, org.springframework.security.web.session.ConcurrentSessionFilter@6f7f1950, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@69b65d61, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4ac6bd79, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7ae393c4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2b2b55df, org.springframework.security.web.session.SessionManagementFilter@150f0a49, org.springframework.security.web.access.ExceptionTranslationFilter@52bdef41, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@36b45088]
2023-07-03 23:12:22.257 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-03 23:12:22.657 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-03 23:12:22.736 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-03 23:12:23.240 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:12:24.215 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-03 23:12:24.250 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-03 23:12:24.417 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-03 23:12:24.420 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8080"]
2023-07-03 23:12:24.471 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8080 (http) with context path ''
2023-07-03 23:12:24.476 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 12.595 seconds (JVM running for 14.155)
2023-07-03 23:12:24.476 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 23:12:24.477 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-03 23:12:24.477 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 23:12:25.532 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-03 23:12:25.533 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-03 23:12:25.558 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 25 ms
2023-07-03 23:13:48.103 INFO  [RMI TCP Connection(13)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-03 23:13:48.139 INFO  [RMI TCP Connection(13)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-03 23:13:48.142 INFO  [RMI TCP Connection(13)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-03 23:13:48.148 INFO  [RMI TCP Connection(13)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-03 23:13:48.200 INFO  [RMI TCP Connection(13)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-03 23:13:52.577 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 34548 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-03 23:13:52.586 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-03 23:13:52.650 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-03 23:13:52.650 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-03 23:13:53.956 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 23:13:53.956 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-03 23:13:54.112 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 146ms. Found 3 JPA repository interfaces.
2023-07-03 23:13:54.486 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 23:13:54.486 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-03 23:13:54.536 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:13:54.537 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:13:54.537 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:13:54.537 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 51ms. Found 0 JDBC repository interfaces.
2023-07-03 23:13:55.017 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-03 23:13:55.091 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-03 23:13:55.091 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 23:13:55.092 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:13:55.092 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:13:55.092 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:13:55.092 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-03 23:13:55.093 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:13:55.093 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:13:55.093 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:13:55.093 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:13:55.093 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 23:13:55.093 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:13:55.155 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$93cbdf86] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:13:55.205 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-03 23:13:55.302 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$7dc243b3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:13:55.390 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:13:55.393 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@251ee91' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:13:55.395 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$a296e665] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:13:55.409 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$c7ebfe7b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:13:55.413 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:13:55.414 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:13:55.437 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$e5147b79] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:13:55.465 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$6494c8ab] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:13:55.605 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-03 23:13:55.610 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-03 23:13:56.091 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8080 (http)
2023-07-03 23:13:56.107 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8080"]
2023-07-03 23:13:56.118 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-03 23:13:56.118 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-03 23:13:56.546 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-03 23:13:56.557 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-03 23:13:56.557 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3907 ms
2023-07-03 23:13:57.568 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@57ef4313 with name: jasyptStringEncryptor
2023-07-03 23:13:57.622 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-03 23:13:57.743 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 8 msec}
2023-07-03 23:13:57.748 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-03 23:13:58.670 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-03 23:13:59.080 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-03 23:13:59.162 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-03 23:13:59.165 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-03 23:13:59.330 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-03 23:13:59.587 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:13:59.604 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-03 23:14:00.397 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:14:00.400 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 0 msec}
2023-07-03 23:14:00.458 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-03 23:14:00.759 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-03 23:14:02.002 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-03 23:14:02.012 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-03 23:14:02.240 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-03 23:14:02.241 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-03 23:14:02.241 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-03 23:14:02.241 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-03 23:14:02.241 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-03 23:14:02.242 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-03 23:14:02.242 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-03 23:14:02.243 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-03 23:14:02.243 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-03 23:14:02.443 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2468e2e, org.springframework.security.web.context.SecurityContextPersistenceFilter@4597d060, org.springframework.security.web.header.HeaderWriterFilter@1a4acaa6, org.springframework.web.filter.CorsFilter@3fca13a8, org.springframework.security.web.authentication.logout.LogoutFilter@5ed191ec, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@22bd5e0b, org.springframework.security.web.session.ConcurrentSessionFilter@43dc00fa, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@69fd4cc2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7ea7bc97, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@25f08f7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7d3e8220, org.springframework.security.web.session.SessionManagementFilter@7e09e48e, org.springframework.security.web.access.ExceptionTranslationFilter@5a1db60f, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5d5b0a9c]
2023-07-03 23:14:02.463 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-03 23:14:02.869 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-03 23:14:02.953 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-03 23:14:03.444 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:14:04.443 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-03 23:14:04.472 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-03 23:14:04.660 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-03 23:14:04.662 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8080"]
2023-07-03 23:14:04.726 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8080 (http) with context path ''
2023-07-03 23:14:04.733 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 12.677 seconds (JVM running for 14.418)
2023-07-03 23:14:04.734 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 23:14:04.735 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-03 23:14:04.735 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 23:14:05.923 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-03 23:14:05.923 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-03 23:14:05.947 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 24 ms
2023-07-03 23:16:11.654 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-03 23:16:11.694 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-03 23:16:11.696 INFO  [RMI TCP Connection(14)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-03 23:16:11.703 INFO  [RMI TCP Connection(14)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-03 23:16:11.767 INFO  [RMI TCP Connection(14)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-03 23:16:16.162 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 34592 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-03 23:16:16.168 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-03 23:16:16.235 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-03 23:16:16.236 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-03 23:16:17.570 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 23:16:17.570 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-03 23:16:17.724 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 144ms. Found 3 JPA repository interfaces.
2023-07-03 23:16:18.109 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 23:16:18.110 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-03 23:16:18.164 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:16:18.165 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:16:18.167 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:16:18.167 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 57ms. Found 0 JDBC repository interfaces.
2023-07-03 23:16:18.629 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-03 23:16:18.703 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-03 23:16:18.703 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 23:16:18.703 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:16:18.703 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:16:18.703 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:16:18.704 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-03 23:16:18.704 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:16:18.704 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:16:18.704 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:16:18.704 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:16:18.704 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 23:16:18.705 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:16:18.773 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$659975e5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:16:18.829 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-03 23:16:18.923 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$4f8fda12] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:16:19.014 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:16:19.017 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4c3825ae' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:16:19.018 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$74647cc4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:16:19.027 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$99b994da] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:16:19.031 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:16:19.033 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:16:19.054 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b6e211d8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:16:19.084 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$36625f0a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:16:19.237 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-03 23:16:19.242 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-03 23:16:19.715 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-03 23:16:19.732 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-03 23:16:19.742 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-03 23:16:19.743 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-03 23:16:20.169 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-03 23:16:20.182 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-03 23:16:20.183 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3947 ms
2023-07-03 23:16:21.103 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@73207728 with name: jasyptStringEncryptor
2023-07-03 23:16:21.162 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-03 23:16:21.257 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-03 23:16:21.261 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-03 23:16:22.113 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-03 23:16:22.489 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-03 23:16:22.563 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-03 23:16:22.565 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-03 23:16:22.726 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-03 23:16:22.992 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:16:23.010 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-03 23:16:23.770 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:16:23.772 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-03 23:16:23.838 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-03 23:16:24.121 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-03 23:16:25.427 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-03 23:16:25.443 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-03 23:16:25.661 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-03 23:16:25.661 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-03 23:16:25.661 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-03 23:16:25.661 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-03 23:16:25.661 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-03 23:16:25.662 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-03 23:16:25.662 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-03 23:16:25.662 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-03 23:16:25.662 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-03 23:16:25.835 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6b106960, org.springframework.security.web.context.SecurityContextPersistenceFilter@3910cfe6, org.springframework.security.web.header.HeaderWriterFilter@22801841, org.springframework.web.filter.CorsFilter@75a4d536, org.springframework.security.web.authentication.logout.LogoutFilter@4a3a0cc8, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3fab92ad, org.springframework.security.web.session.ConcurrentSessionFilter@3b542e06, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@f3e5025, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@239d24b6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@21d846d2, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7d43b55d, org.springframework.security.web.session.SessionManagementFilter@5b535ba4, org.springframework.security.web.access.ExceptionTranslationFilter@695eb3db, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@23b426d7]
2023-07-03 23:16:25.856 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-03 23:16:26.247 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-03 23:16:26.330 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-03 23:16:26.781 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:16:27.737 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-03 23:16:27.769 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-03 23:16:27.918 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-03 23:16:27.920 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-03 23:16:27.989 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-03 23:16:27.996 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 12.359 seconds (JVM running for 13.84)
2023-07-03 23:16:27.997 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 23:16:27.997 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-03 23:16:27.997 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 23:16:29.189 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-03 23:16:29.189 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-03 23:16:29.220 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 31 ms
2023-07-03 23:16:37.328 WARN  [http-nio-10010-exec-1] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [164] milliseconds.
2023-07-03 23:16:37.418 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-03 23:16:37.418 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-03 23:16:37.419 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-03 23:16:37.419 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-03 23:16:37.419 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-03 23:16:39.303 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:16:39.312 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-03 23:16:39.337 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-03 23:16:39.427 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$1d3sApp5Ji2brqVn5HqxT.Ns00.MpOSXZKAobjV0QBObxxCWMuwkW
2023-07-03 23:16:39.516 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-03 23:16:42.748 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:16:42.749 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 23:16:47.573 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:16:47.580 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') <= DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 23:17:05.672 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') <= DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
			AND 	a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 18071 msec}
2023-07-03 23:18:36.400 INFO  [RMI TCP Connection(12)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-03 23:18:36.433 INFO  [RMI TCP Connection(12)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-03 23:18:36.437 INFO  [RMI TCP Connection(12)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-03 23:18:36.443 INFO  [RMI TCP Connection(12)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-03 23:18:36.492 INFO  [RMI TCP Connection(12)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-03 23:18:40.884 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 32724 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-03 23:18:40.889 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-03 23:18:40.953 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-03 23:18:40.953 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-03 23:18:42.292 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 23:18:42.292 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-03 23:18:42.463 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 162ms. Found 3 JPA repository interfaces.
2023-07-03 23:18:42.903 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-03 23:18:42.904 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-03 23:18:42.950 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:18:42.950 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:18:42.951 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-03 23:18:42.951 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 47ms. Found 0 JDBC repository interfaces.
2023-07-03 23:18:43.439 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-03 23:18:43.511 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-03 23:18:43.512 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 23:18:43.512 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:18:43.512 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:18:43.512 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:18:43.512 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-03 23:18:43.512 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-03 23:18:43.513 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:18:43.513 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:18:43.513 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:18:43.513 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-03 23:18:43.513 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-03 23:18:43.578 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$810fb2f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:18:43.632 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-03 23:18:43.726 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$6b061723] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:18:43.819 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:18:43.821 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@5985f3b0' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:18:43.827 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$8fdab9d5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:18:43.837 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$b52fd1eb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:18:43.841 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:18:43.842 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:18:43.869 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d2584ee9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:18:43.899 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$51d89c1b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-03 23:18:44.047 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-03 23:18:44.052 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-03 23:18:44.535 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-03 23:18:44.554 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-03 23:18:44.565 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-03 23:18:44.566 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-03 23:18:44.999 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-03 23:18:45.011 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-03 23:18:45.011 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4057 ms
2023-07-03 23:18:45.957 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@6167819c with name: jasyptStringEncryptor
2023-07-03 23:18:46.013 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-03 23:18:46.130 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 11 msec}
2023-07-03 23:18:46.133 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-03 23:18:46.958 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-03 23:18:47.342 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-03 23:18:47.416 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-03 23:18:47.418 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-03 23:18:47.598 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-03 23:18:47.862 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:18:47.881 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-03 23:18:48.643 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:18:48.645 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-03 23:18:48.713 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-03 23:18:48.991 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-03 23:18:50.272 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-03 23:18:50.283 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-03 23:18:50.471 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-03 23:18:50.472 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-03 23:18:50.472 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-03 23:18:50.472 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-03 23:18:50.472 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-03 23:18:50.472 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-03 23:18:50.472 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-03 23:18:50.472 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-03 23:18:50.472 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-03 23:18:50.657 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@782bb1c0, org.springframework.security.web.context.SecurityContextPersistenceFilter@3c72da22, org.springframework.security.web.header.HeaderWriterFilter@39b39cfa, org.springframework.web.filter.CorsFilter@302ee5c8, org.springframework.security.web.authentication.logout.LogoutFilter@7ea7bc97, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5fa03884, org.springframework.security.web.session.ConcurrentSessionFilter@442745d7, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@585d9f6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@24ed154f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@8cb4453, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@21c2331a, org.springframework.security.web.session.SessionManagementFilter@71f4f938, org.springframework.security.web.access.ExceptionTranslationFilter@57fd31b3, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4eff8f0d]
2023-07-03 23:18:50.678 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-03 23:18:51.060 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-03 23:18:51.179 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-03 23:18:51.646 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:18:52.565 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-03 23:18:52.595 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-03 23:18:52.752 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-03 23:18:52.756 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-03 23:18:52.812 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-03 23:18:52.817 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 12.448 seconds (JVM running for 14.234)
2023-07-03 23:18:52.818 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 23:18:52.818 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-03 23:18:52.818 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-03 23:18:53.832 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-03 23:18:53.832 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-03 23:18:53.855 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 22 ms
2023-07-03 23:19:01.969 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:19:01.971 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 23:19:06.560 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:19:06.578 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 23:19:25.043 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
			AND 	a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 18429 msec}
2023-07-03 23:24:03.240 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:24:03.242 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 23:24:08.001 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:24:08.007 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 23:24:25.755 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
			AND 	a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 17734 msec}
2023-07-03 23:28:23.032 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:28:23.033 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 23:28:27.481 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:28:27.488 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 23:28:45.741 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
			AND 	a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 18244 msec}
2023-07-03 23:30:36.800 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:30:36.802 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 23:31:04.919 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:31:04.920 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 23:31:11.818 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:31:11.824 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 23:31:29.975 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
			AND 	a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 18139 msec}
2023-07-03 23:43:35.488 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:43:35.489 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 23:43:41.151 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:43:41.156 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 23:43:58.786 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
			AND 	a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 17619 msec}
2023-07-03 23:44:42.791 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:44:42.794 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 23:44:47.195 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:44:47.200 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 23:45:04.922 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
			AND 	a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 17711 msec}
2023-07-03 23:46:52.941 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:46:52.942 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 23:46:57.516 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:46:57.522 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-03 23:47:16.110 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
			AND 	a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 18573 msec}
2023-07-03 23:51:07.712 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:51:07.714 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 23:51:11.761 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:51:11.767 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-03 23:51:29.493 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT b.EMP_NM, a.WORK_DATE ,sum(tot_min) AS tot_min FROM TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.COMPANY_NO = '100' AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
			AND 	a.DRIVER_ID > 0
			GROUP BY b.EMP_NM , a.WORK_DATE 
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm
 {executed in 17716 msec}
2023-07-03 23:55:01.726 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:55:01.728 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 23:55:48.066 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:55:48.067 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 23:56:03.204 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:56:03.204 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 23:56:42.255 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:56:42.256 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 23:57:13.838 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b8217d9
2023-07-03 23:57:13.838 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ISC_DRIVER_INFO} 
2023-07-03 23:57:13.838 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
2023-07-03 23:57:13.840 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:57:13.843 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
 {executed in 2 msec}
2023-07-03 23:57:13.845 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-07-03 23:57:15.451 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:57:15.453 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 23:58:03.765 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:58:03.767 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 23:58:55.386 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
26. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:58:55.387 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
26. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-03 23:59:02.144 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
26. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-03 23:59:02.145 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
26. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 23:59:07.488 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
26. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:59:07.489 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
26. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-03 23:59:29.197 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
26. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-03 23:59:29.198 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
26. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
