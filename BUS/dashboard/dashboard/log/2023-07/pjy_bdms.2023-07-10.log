2023-07-10 07:48:13.257 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-10 07:48:13.266 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  true
2023-07-10 07:48:13.266 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList -> userId p00139 
2023-07-10 07:48:13.266 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-10 07:48:13.266 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  true
2023-07-10 07:48:13.266 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList -> userId p00139 
2023-07-10 07:48:15.374 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=8h2m20s854ms109µs200ns).
2023-07-10 07:56:02.634 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 07:56:02.634 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 07:56:02.634 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 07:56:02.634 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 07:56:02.634 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 07:56:04.802 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 07:56:04.803 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-10 07:56:04.805 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 07:56:04.899 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$7zeSGvFaMNkZeF1JGldGmO.T3nWB0jC8ZpHpS6D4xDQBa5./aoBje
2023-07-10 07:56:04.989 INFO  [http-nio-10010-exec-6] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 07:56:07.532 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 07:56:07.533 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 07:56:10.979 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 07:56:10.980 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 07:56:11.002 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 21 msec}
2023-07-10 07:56:12.370 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a30867
2023-07-10 07:56:12.371 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 07:56:12.373 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 1 msec}
2023-07-10 07:56:12.399 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f462c312
2023-07-10 07:56:12.399 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 07:56:12.399 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 07:56:12.404 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 4 msec}
2023-07-10 07:56:12.405 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 07:56:12.450 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1525b984
2023-07-10 07:56:12.453 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 07:56:12.455 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 1 msec}
2023-07-10 07:56:12.680 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('국수현','',k.emp_nm,'국수현')
 {executed in 229 msec}
2023-07-10 07:56:51.321 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 07:56:51.322 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 07:56:51.324 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 07:56:52.272 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 07:56:52.273 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 07:56:52.276 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 2 msec}
2023-07-10 07:56:52.303 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 07:56:52.303 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 07:56:52.303 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 07:56:52.308 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 3 msec}
2023-07-10 07:56:52.309 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 07:56:52.353 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aff1cdf3
2023-07-10 07:56:52.354 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 1 msec}
2023-07-10 07:56:52.354 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 07:56:52.569 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
 {executed in 214 msec}
2023-07-10 07:57:07.328 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 07:57:07.329 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 07:57:07.330 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 07:57:08.936 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ebb914f9
2023-07-10 07:57:08.937 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 07:57:08.940 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 2 msec}
2023-07-10 07:57:08.968 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb78cfa4
2023-07-10 07:57:08.968 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 07:57:08.968 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 07:57:08.970 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 07:57:08.971 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 07:57:09.015 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c3bc616
2023-07-10 07:57:09.016 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 07:57:09.018 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 1 msec}
2023-07-10 07:57:09.227 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
 {executed in 211 msec}
2023-07-10 07:58:00.246 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 07:58:00.247 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 07:58:00.268 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 21 msec}
2023-07-10 07:58:01.275 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@43f8a6f7
2023-07-10 07:58:01.276 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 07:58:01.278 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영'
	order by 1
 {executed in 1 msec}
2023-07-10 07:58:01.304 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@43b861a2
2023-07-10 07:58:01.304 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 07:58:01.304 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 07:58:01.308 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 3 msec}
2023-07-10 07:58:01.309 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 07:58:01.346 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@647b5814
2023-07-10 07:58:01.347 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 07:58:01.349 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '구진영'
 {executed in 0 msec}
2023-07-10 07:58:01.576 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('구진영','',k.emp_nm,'구진영')
 {executed in 228 msec}
2023-07-10 07:59:25.502 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 07:59:25.503 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 07:59:25.504 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 07:59:26.479 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ebb914f9
2023-07-10 07:59:26.480 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 07:59:26.483 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 1 msec}
2023-07-10 07:59:26.509 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb78cfa4
2023-07-10 07:59:26.509 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 07:59:26.509 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 07:59:26.511 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 07:59:26.512 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 07:59:26.554 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c3bc616
2023-07-10 07:59:26.556 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 07:59:26.556 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 0 msec}
2023-07-10 07:59:26.775 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
 {executed in 218 msec}
2023-07-10 08:00:14.242 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:00:14.243 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:00:14.244 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 08:00:15.397 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 08:00:15.399 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:00:15.402 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 2 msec}
2023-07-10 08:00:15.430 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 08:00:15.430 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:00:15.431 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:00:15.432 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:00:15.434 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:00:15.483 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aff1cdf3
2023-07-10 08:00:15.484 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:00:15.484 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 1 msec}
2023-07-10 08:00:15.694 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
 {executed in 210 msec}
2023-07-10 08:01:04.718 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:01:04.719 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:01:04.721 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 08:01:05.473 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a30867
2023-07-10 08:01:05.474 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:01:05.477 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 2 msec}
2023-07-10 08:01:05.503 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f462c312
2023-07-10 08:01:05.504 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:01:05.504 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:01:05.506 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:01:05.508 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:01:05.553 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1525b984
2023-07-10 08:01:05.554 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:01:05.556 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 1 msec}
2023-07-10 08:01:05.779 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('국수현','',k.emp_nm,'국수현')
 {executed in 224 msec}
2023-07-10 08:05:28.736 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:05:28.737 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:05:28.758 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 20 msec}
2023-07-10 08:05:30.432 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a09822f7
2023-07-10 08:05:30.433 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:05:30.436 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-07-10 08:05:30.462 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a057dda2
2023-07-10 08:05:30.463 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:05:30.463 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:05:30.464 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:05:30.466 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:05:30.508 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c11ad414
2023-07-10 08:05:30.510 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:05:30.525 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '강근원'
 {executed in 0 msec}
2023-07-10 08:05:30.738 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('강근원','',k.emp_nm,'강근원')
 {executed in 227 msec}
2023-07-10 08:05:38.846 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b4a1d55d
2023-07-10 08:05:38.846 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMPLOYEE_VACATION_INFO_emp} 
2023-07-10 08:05:38.846 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
2023-07-10 08:05:38.847 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:05:38.850 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 3 msec}
2023-07-10 08:05:38.851 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 0 msec}
2023-07-10 08:05:40.920 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@67a7a0a7
2023-07-10 08:05:40.920 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-10 08:05:40.921 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
2023-07-10 08:05:40.921 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:05:40.922 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 08:05:40.923 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 08:05:44.734 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@456c1d20
2023-07-10 08:05:44.734 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-10 08:05:44.734 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-07-10 08:05:44.735 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:05:44.739 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-07-10 08:05:44.741 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 08:05:47.733 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dc8adcc3
2023-07-10 08:05:47.733 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 08:05:47.734 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 08:05:47.737 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 08:05:47.738 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:05:47.739 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:16:37.999 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:16:38.000 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:16:38.017 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 16 msec}
2023-07-10 08:16:38.894 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@43f8a6f7
2023-07-10 08:16:38.895 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:16:38.897 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영'
	order by 1
 {executed in 1 msec}
2023-07-10 08:16:38.923 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@43b861a2
2023-07-10 08:16:38.924 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:16:38.924 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:16:38.925 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:16:38.927 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:16:38.965 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@647b5814
2023-07-10 08:16:38.967 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:16:38.969 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
32. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '구진영'
 {executed in 0 msec}
2023-07-10 08:16:39.198 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('구진영','',k.emp_nm,'구진영')
 {executed in 231 msec}
2023-07-10 08:18:16.785 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@27a458a5
2023-07-10 08:18:16.786 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:18:16.789 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김광수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김광수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김광수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김광수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김광수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김광수'
	order by 1
 {executed in 2 msec}
2023-07-10 08:18:16.816 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@27641350
2023-07-10 08:18:16.816 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:18:16.816 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김광수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:18:16.819 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김광수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:18:16.820 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김광수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:18:16.867 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@482709c2
2023-07-10 08:18:16.868 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:18:16.870 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김광수'
 {executed in 0 msec}
2023-07-10 08:18:17.085 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김광수','',k.emp_nm,'김광수')
 {executed in 216 msec}
2023-07-10 08:18:18.073 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd6ed7a
2023-07-10 08:18:18.074 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:18:18.077 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철'
	order by 1
 {executed in 2 msec}
2023-07-10 08:18:18.106 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4c96a825
2023-07-10 08:18:18.106 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:18:18.106 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김만철' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:18:18.110 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김만철' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 3 msec}
2023-07-10 08:18:18.111 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김만철' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:18:18.161 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6d599e97
2023-07-10 08:18:18.163 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:18:18.164 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
32. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김만철'
 {executed in 0 msec}
2023-07-10 08:18:18.376 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김만철','',k.emp_nm,'김만철')
 {executed in 214 msec}
2023-07-10 08:18:19.465 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4e670f87
2023-07-10 08:18:19.466 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:18:19.469 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성'
	order by 1
 {executed in 1 msec}
2023-07-10 08:18:19.493 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4e26ca32
2023-07-10 08:18:19.493 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:18:19.493 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:18:19.495 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:18:19.496 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:18:19.546 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6ee9c0a4
2023-07-10 08:18:19.548 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:18:19.549 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
32. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김문성'
 {executed in 0 msec}
2023-07-10 08:18:19.769 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김문성','',k.emp_nm,'김문성')
 {executed in 221 msec}
2023-07-10 08:18:20.964 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3327d6da
2023-07-10 08:18:20.965 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:18:20.969 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕'
	order by 1
 {executed in 2 msec}
2023-07-10 08:18:20.993 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@32e79185
2023-07-10 08:18:20.993 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:18:20.993 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상덕' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:18:20.994 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:18:20.998 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상덕' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 4 msec}
2023-07-10 08:18:20.999 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상덕' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:18:21.049 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@53aa87f7
2023-07-10 08:18:21.051 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김상덕'
 {executed in 0 msec}
2023-07-10 08:18:21.266 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김상덕','',k.emp_nm,'김상덕')
 {executed in 215 msec}
2023-07-10 08:18:23.427 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c7f66dd5
2023-07-10 08:18:23.428 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:18:23.431 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취'
	order by 1
 {executed in 1 msec}
2023-07-10 08:18:23.456 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c7b62880
2023-07-10 08:18:23.456 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:18:23.456 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:18:23.456 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:18:23.460 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 4 msec}
2023-07-10 08:18:23.461 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:18:23.511 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e8791ef2
2023-07-10 08:18:23.516 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
32. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김성취'
 {executed in 0 msec}
2023-07-10 08:18:23.741 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김성취','',k.emp_nm,'김성취')
 {executed in 229 msec}
2023-07-10 08:18:26.389 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f05eb85
2023-07-10 08:18:26.389 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-10 08:18:26.389 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
2023-07-10 08:18:26.390 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:18:26.391 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 08:18:26.392 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 08:18:57.744 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3e927a1
2023-07-10 08:18:57.745 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 08:18:57.745 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '김성취' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 08:18:57.746 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:18:57.747 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '김성취' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:18:57.748 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '김성취' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:19:17.813 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c7b62880
2023-07-10 08:19:17.813 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:19:17.813 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:19:17.814 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:19:17.815 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:19:17.817 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:23:11.917 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5879c27d
2023-07-10 08:23:11.918 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:23:11.922 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신'
	order by 1
 {executed in 2 msec}
2023-07-10 08:23:11.946 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@58397d28
2023-07-10 08:23:11.946 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:23:11.953 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상신' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:23:11.955 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상신' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:23:11.958 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상신' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:23:12.014 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@78fc739a
2023-07-10 08:23:12.019 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:23:12.020 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김상신'
 {executed in 0 msec}
2023-07-10 08:23:12.240 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김상신','',k.emp_nm,'김상신')
 {executed in 224 msec}
2023-07-10 08:23:14.669 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@946c7c49
2023-07-10 08:23:14.669 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 08:23:14.669 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '김상신' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 08:23:14.670 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:23:14.671 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '김상신' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:23:14.672 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '김상신' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-07-10 08:23:16.489 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@58397d28
2023-07-10 08:23:16.489 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:23:16.489 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상신' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:23:16.490 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:23:16.491 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상신' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:23:16.493 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상신' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:23:16.563 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd6ed7a
2023-07-10 08:23:16.566 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철'
	order by 1
 {executed in 1 msec}
2023-07-10 08:23:16.590 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4c96a825
2023-07-10 08:23:16.590 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:23:16.590 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김만철' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:23:16.591 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김만철' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:23:16.593 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김만철' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:23:16.658 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6d599e97
2023-07-10 08:23:16.659 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:23:16.660 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김만철'
 {executed in 0 msec}
2023-07-10 08:23:16.871 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김만철','',k.emp_nm,'김만철')
 {executed in 212 msec}
2023-07-10 08:23:18.089 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@88c9a746
2023-07-10 08:23:18.089 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 08:23:18.089 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '김만철' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 08:23:18.090 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:23:18.091 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '김만철' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:23:18.092 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '김만철' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:23:20.736 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4c96a825
2023-07-10 08:23:20.736 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:23:20.736 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김만철' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:23:20.737 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:23:20.738 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김만철' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:23:20.739 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김만철' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 0 msec}
2023-07-10 08:23:20.809 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f17adcae
2023-07-10 08:23:20.810 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:23:20.813 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박정훈' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박정훈' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박정훈' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박정훈' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박정훈' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박정훈'
	order by 1
 {executed in 1 msec}
2023-07-10 08:23:20.843 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f13a9759
2023-07-10 08:23:20.843 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:23:20.843 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '박정훈' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:23:20.847 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '박정훈' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 4 msec}
2023-07-10 08:23:20.849 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '박정훈' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:23:20.901 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@11fd8dcb
2023-07-10 08:23:20.903 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '박정훈'
 {executed in 0 msec}
2023-07-10 08:23:21.112 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('박정훈','',k.emp_nm,'박정훈')
 {executed in 210 msec}
2023-07-10 08:23:22.643 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1a51e902
2023-07-10 08:23:22.643 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:23:22.646 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일'
	order by 1
 {executed in 1 msec}
2023-07-10 08:23:22.672 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1a11a3ad
2023-07-10 08:23:22.672 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:23:22.672 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:23:22.677 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 4 msec}
2023-07-10 08:23:22.678 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:23:22.730 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3ad49a1f
2023-07-10 08:23:22.731 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:23:22.732 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
32. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '양광일'
 {executed in 0 msec}
2023-07-10 08:23:22.931 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('양광일','',k.emp_nm,'양광일')
 {executed in 198 msec}
2023-07-10 08:23:25.095 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5644a2ce
2023-07-10 08:23:25.095 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 08:23:25.095 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '양광일' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 08:23:25.096 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:23:25.097 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '양광일' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:23:25.098 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '양광일' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:27:20.477 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:27:20.477 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:27:20.497 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 08:27:21.661 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ebb914f9
2023-07-10 08:27:21.662 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:27:21.666 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 3 msec}
2023-07-10 08:27:21.700 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb78cfa4
2023-07-10 08:27:21.700 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:27:21.700 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:27:21.701 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:27:21.704 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:27:21.706 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:27:21.758 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c3bc616
2023-07-10 08:27:21.760 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
32. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 0 msec}
2023-07-10 08:27:21.978 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
 {executed in 218 msec}
2023-07-10 08:27:23.192 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@27abcec5
2023-07-10 08:27:23.192 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 08:27:23.192 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '권용수' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 08:27:23.193 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:27:23.194 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '권용수' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:27:23.195 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '권용수' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:27:25.140 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb78cfa4
2023-07-10 08:27:25.140 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:27:25.140 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:27:25.141 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:27:25.143 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:27:25.144 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:27:25.199 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5879c27d
2023-07-10 08:27:25.203 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신'
	order by 1
 {executed in 3 msec}
2023-07-10 08:27:25.229 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@58397d28
2023-07-10 08:27:25.229 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:27:25.230 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상신' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:27:25.230 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:27:25.232 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상신' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:27:25.234 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상신' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 0 msec}
2023-07-10 08:27:25.287 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@78fc739a
2023-07-10 08:27:25.289 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김상신'
 {executed in 0 msec}
2023-07-10 08:27:25.525 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김상신','',k.emp_nm,'김상신')
 {executed in 237 msec}
2023-07-10 08:27:26.861 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c7f66dd5
2023-07-10 08:27:26.863 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 08:27:26.865 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취'
	order by 1
 {executed in 2 msec}
2023-07-10 08:27:26.889 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c7b62880
2023-07-10 08:27:26.889 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:27:26.889 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:27:26.890 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:27:26.892 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:27:26.893 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:27:26.942 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e8791ef2
2023-07-10 08:27:26.944 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김성취'
 {executed in 0 msec}
2023-07-10 08:27:27.168 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김성취','',k.emp_nm,'김성취')
 {executed in 224 msec}
2023-07-10 08:27:28.942 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3e927a1
2023-07-10 08:27:28.942 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 08:27:28.942 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '김성취' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 08:27:28.943 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:27:28.944 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '김성취' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:27:28.945 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '김성취' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-07-10 08:27:33.357 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6cca67fe
2023-07-10 08:27:33.358 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-10 08:27:33.358 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김성취' ORDER BY b.base_ym desc
2023-07-10 08:27:33.358 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:27:33.360 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김성취' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 08:27:33.362 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김성취' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 08:28:17.376 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cc8fc01
2023-07-10 08:28:17.376 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-10 08:28:17.376 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김성취'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-10 08:28:17.377 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:28:17.821 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김성취'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 444 msec}
2023-07-10 08:28:18.023 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김성취'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 202 msec}
2023-07-10 08:28:18.075 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b279fca1
2023-07-10 08:28:18.075 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-10 08:28:18.075 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김성취' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-10 08:28:18.837 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김성취' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 761 msec}
2023-07-10 08:28:18.837 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:28:18.838 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김성취' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-07-10 08:28:18.882 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@42199249
2023-07-10 08:28:18.882 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-10 08:28:18.882 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김성취' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-03' ORDER BY a.START_TIME
2023-07-10 08:28:18.941 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김성취' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-03' ORDER BY a.START_TIME
 {executed in 59 msec}
2023-07-10 08:28:18.971 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김성취' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-03' ORDER BY a.START_TIME
 {executed in 30 msec}
2023-07-10 08:28:38.681 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3579dac2
2023-07-10 08:28:38.681 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 08:28:38.681 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '김성취' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 08:28:38.682 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:28:38.684 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '김성취' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:28:38.685 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '김성취' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:28:40.564 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f946dba1
2023-07-10 08:28:40.564 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:28:40.564 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:28:40.565 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:28:40.568 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:28:40.569 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:28:40.639 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5e3bdcb6
2023-07-10 08:28:40.647 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승배' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승배' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승배' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승배' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승배' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승배'
	order by 1
 {executed in 3 msec}
2023-07-10 08:28:40.673 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5dfb9761
2023-07-10 08:28:40.673 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:28:40.673 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김승배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:28:40.675 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김승배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:28:40.677 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김승배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:28:40.732 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4d2ddab2
2023-07-10 08:28:40.735 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:28:40.736 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김승배'
 {executed in 0 msec}
2023-07-10 08:28:40.972 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김승배','',k.emp_nm,'김승배')
 {executed in 239 msec}
2023-07-10 08:28:43.797 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3c8803db
2023-07-10 08:28:43.798 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:28:43.801 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승섭' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승섭' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승섭' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승섭' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승섭' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승섭'
	order by 1
 {executed in 1 msec}
2023-07-10 08:28:43.827 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3c47be86
2023-07-10 08:28:43.827 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:28:43.827 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김승섭' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:28:43.829 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김승섭' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:28:43.830 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김승섭' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:28:43.874 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2b7a01d7
2023-07-10 08:28:43.879 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:28:43.880 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김승섭'
 {executed in 0 msec}
2023-07-10 08:28:44.110 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김승섭','',k.emp_nm,'김승섭')
 {executed in 234 msec}
2023-07-10 08:28:45.772 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b03a9ca6
2023-07-10 08:28:45.773 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:28:45.776 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승철' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승철' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승철' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승철' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승철' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승철'
	order by 1
 {executed in 1 msec}
2023-07-10 08:28:45.798 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@affa5751
2023-07-10 08:28:45.798 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:28:45.798 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김승철' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:28:45.800 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김승철' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:28:45.802 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김승철' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:28:45.846 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9f2c9aa2
2023-07-10 08:28:45.852 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:28:45.853 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김승철'
 {executed in 0 msec}
2023-07-10 08:28:46.065 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김승철','',k.emp_nm,'김승철')
 {executed in 218 msec}
2023-07-10 08:28:48.866 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b64647f
2023-07-10 08:28:48.867 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:28:48.870 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김환조' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김환조' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김환조' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김환조' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김환조' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김환조'
	order by 1
 {executed in 1 msec}
2023-07-10 08:28:48.894 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b241f2a
2023-07-10 08:28:48.894 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:28:48.894 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김환조' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:28:48.895 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:28:48.897 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김환조' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:28:48.898 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김환조' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:28:48.956 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a56627b
2023-07-10 08:28:48.957 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김환조'
 {executed in 0 msec}
2023-07-10 08:28:49.165 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김환조','',k.emp_nm,'김환조')
 {executed in 208 msec}
2023-07-10 08:28:50.127 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7826b3c
2023-07-10 08:28:50.128 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:28:50.131 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='노주성' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='노주성' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='노주성' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='노주성' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='노주성' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='노주성'
	order by 1
 {executed in 2 msec}
2023-07-10 08:28:50.156 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d74225e7
2023-07-10 08:28:50.156 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:28:50.156 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '노주성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:28:50.157 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:28:50.160 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '노주성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:28:50.162 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '노주성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:28:50.209 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6746938
2023-07-10 08:28:50.212 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '노주성'
 {executed in 0 msec}
2023-07-10 08:28:50.416 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('노주성','',k.emp_nm,'노주성')
 {executed in 205 msec}
2023-07-10 08:28:51.187 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cba076e5
2023-07-10 08:28:51.188 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:28:51.192 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='문영식B' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='문영식B' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='문영식B' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='문영식B' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='문영식B' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='문영식B'
	order by 1
 {executed in 2 msec}
2023-07-10 08:28:51.215 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cb603190
2023-07-10 08:28:51.215 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:28:51.215 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '문영식B' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:28:51.216 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:28:51.217 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '문영식B' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:28:51.218 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '문영식B' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:28:51.256 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ba9274e1
2023-07-10 08:28:51.259 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '문영식B'
 {executed in 0 msec}
2023-07-10 08:28:51.480 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('문영식B','',k.emp_nm,'문영식B')
 {executed in 222 msec}
2023-07-10 08:28:53.099 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@79330b1
2023-07-10 08:28:53.099 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 08:28:53.099 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '문영식B' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 08:28:53.100 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:28:53.101 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '문영식B' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:28:53.102 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '문영식B' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:29:32.327 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cb603190
2023-07-10 08:29:32.327 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:29:32.327 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '문영식B' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:29:32.328 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:29:32.329 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '문영식B' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:29:32.331 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '문영식B' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:32:12.033 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:32:12.034 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:32:12.051 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 17 msec}
2023-07-10 08:32:13.774 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@43f8a6f7
2023-07-10 08:32:13.775 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:32:13.778 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영'
	order by 1
 {executed in 1 msec}
2023-07-10 08:32:13.804 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@43b861a2
2023-07-10 08:32:13.805 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:32:13.805 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:32:13.806 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:32:13.808 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:32:13.809 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:32:13.852 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@647b5814
2023-07-10 08:32:13.854 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '구진영'
 {executed in 0 msec}
2023-07-10 08:32:14.072 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('구진영','',k.emp_nm,'구진영')
 {executed in 218 msec}
2023-07-10 08:32:53.771 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:32:53.772 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:32:53.798 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 26 msec}
2023-07-10 08:32:55.081 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ebb914f9
2023-07-10 08:32:55.081 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:32:55.087 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 3 msec}
2023-07-10 08:32:55.123 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb78cfa4
2023-07-10 08:32:55.123 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:32:55.123 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:32:55.125 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:32:55.127 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:32:55.170 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c3bc616
2023-07-10 08:32:55.172 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:32:55.173 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 1 msec}
2023-07-10 08:32:55.391 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
 {executed in 219 msec}
2023-07-10 08:35:59.280 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:35:59.281 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:35:59.283 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 08:36:00.923 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d0d591e6
2023-07-10 08:36:00.924 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:36:00.928 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규'
	order by 1
 {executed in 3 msec}
2023-07-10 08:36:00.968 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d0954c91
2023-07-10 08:36:00.968 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:36:00.968 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김민규' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:36:00.970 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김민규' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:36:00.972 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김민규' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:36:01.031 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f1584303
2023-07-10 08:36:01.034 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:36:01.035 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김민규'
 {executed in 0 msec}
2023-07-10 08:36:01.255 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김민규','',k.emp_nm,'김민규')
 {executed in 223 msec}
2023-07-10 08:36:12.835 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:36:12.836 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:36:12.837 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 08:36:13.876 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@558a51f
2023-07-10 08:36:13.878 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:36:13.882 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영'
	order by 1
 {executed in 2 msec}
2023-07-10 08:36:13.912 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5185fca
2023-07-10 08:36:13.912 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:36:13.913 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김기영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:36:13.914 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김기영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:36:13.916 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김기영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:36:13.979 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@25db563c
2023-07-10 08:36:13.980 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:36:13.981 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김기영'
 {executed in 0 msec}
2023-07-10 08:36:14.196 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김기영','',k.emp_nm,'김기영')
 {executed in 215 msec}
2023-07-10 08:36:19.563 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2f400d5e
2023-07-10 08:36:19.564 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:36:19.568 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호'
	order by 1
 {executed in 2 msec}
2023-07-10 08:36:19.600 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2effc809
2023-07-10 08:36:19.600 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:36:19.600 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:36:19.601 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:36:19.602 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:36:19.604 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:36:19.650 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4fc2be7b
2023-07-10 08:36:19.652 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김선호'
 {executed in 0 msec}
2023-07-10 08:36:19.865 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김선호','',k.emp_nm,'김선호')
 {executed in 214 msec}
2023-07-10 08:37:01.077 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:37:01.078 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:01.079 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 08:37:02.722 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1249f292
2023-07-10 08:37:02.723 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:02.727 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 2 msec}
2023-07-10 08:37:02.760 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1209ad3d
2023-07-10 08:37:02.761 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:02.761 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:02.762 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:02.764 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:02.809 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@32cca3af
2023-07-10 08:37:02.810 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:02.810 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권오현'
 {executed in 0 msec}
2023-07-10 08:37:03.030 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
 {executed in 219 msec}
2023-07-10 08:37:18.924 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ca98a986
2023-07-10 08:37:18.926 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:18.929 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석'
	order by 1
 {executed in 2 msec}
2023-07-10 08:37:18.962 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ca586431
2023-07-10 08:37:18.962 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:18.962 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경석' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:18.964 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경석' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:37:18.965 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경석' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:19.019 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb1b5aa3
2023-07-10 08:37:19.021 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:19.022 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경석'
 {executed in 1 msec}
2023-07-10 08:37:19.233 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김경석','',k.emp_nm,'김경석')
 {executed in 213 msec}
2023-07-10 08:37:21.892 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1a51e902
2023-07-10 08:37:21.893 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:21.895 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일'
	order by 1
 {executed in 1 msec}
2023-07-10 08:37:21.926 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1a11a3ad
2023-07-10 08:37:21.926 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:21.926 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:21.928 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:37:21.929 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:21.990 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3ad49a1f
2023-07-10 08:37:21.992 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:21.994 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '양광일'
 {executed in 0 msec}
2023-07-10 08:37:22.194 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('양광일','',k.emp_nm,'양광일')
 {executed in 203 msec}
2023-07-10 08:37:28.437 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2e5b9b68
2023-07-10 08:37:28.437 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMPLOYEE_VACATION_INFO_emp} 
2023-07-10 08:37:28.437 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
2023-07-10 08:37:28.438 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:28.439 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 08:37:28.440 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 08:37:29.488 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1a11a3ad
2023-07-10 08:37:29.488 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:29.488 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:29.489 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:29.490 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:29.492 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:31.711 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c7e9679e
2023-07-10 08:37:31.712 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:31.717 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='윤태원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='윤태원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='윤태원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='윤태원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='윤태원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='윤태원'
	order by 1
 {executed in 3 msec}
2023-07-10 08:37:31.747 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c7a92249
2023-07-10 08:37:31.747 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:31.748 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '윤태원' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:31.750 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '윤태원' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:37:31.751 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '윤태원' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:31.800 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e86c18bb
2023-07-10 08:37:31.801 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:31.802 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '윤태원'
 {executed in 1 msec}
2023-07-10 08:37:32.034 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('윤태원','',k.emp_nm,'윤태원')
 {executed in 231 msec}
2023-07-10 08:37:33.827 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@45499faa
2023-07-10 08:37:33.828 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:33.832 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='이기준' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='이기준' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='이기준' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='이기준' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='이기준' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='이기준'
	order by 1
 {executed in 2 msec}
2023-07-10 08:37:33.864 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@45095a55
2023-07-10 08:37:33.864 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:33.864 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '이기준' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:33.866 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '이기준' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:37:33.867 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '이기준' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 0 msec}
2023-07-10 08:37:33.916 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@65cc50c7
2023-07-10 08:37:33.918 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:33.919 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '이기준'
 {executed in 0 msec}
2023-07-10 08:37:34.160 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('이기준','',k.emp_nm,'이기준')
 {executed in 241 msec}
2023-07-10 08:37:35.607 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dc1384a7
2023-07-10 08:37:35.608 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:35.611 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='장진호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='장진호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='장진호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='장진호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='장진호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='장진호'
	order by 1
 {executed in 2 msec}
2023-07-10 08:37:35.638 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dbd33f52
2023-07-10 08:37:35.638 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:35.638 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '장진호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:35.639 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:35.641 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '장진호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:37:35.642 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '장진호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:35.688 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc9635c4
2023-07-10 08:37:35.692 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '장진호'
 {executed in 0 msec}
2023-07-10 08:37:35.906 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('장진호','',k.emp_nm,'장진호')
 {executed in 217 msec}
2023-07-10 08:37:37.561 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ca78031
2023-07-10 08:37:37.562 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:37.565 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='한국현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='한국현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='한국현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='한국현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='한국현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='한국현'
	order by 1
 {executed in 2 msec}
2023-07-10 08:37:37.592 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4c673adc
2023-07-10 08:37:37.592 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:37.592 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '한국현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:37.593 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:37.595 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '한국현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:37:37.597 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '한국현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:37:37.648 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6d2a314e
2023-07-10 08:37:37.649 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '한국현'
 {executed in 0 msec}
2023-07-10 08:37:37.867 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('한국현','',k.emp_nm,'한국현')
 {executed in 218 msec}
2023-07-10 08:37:39.782 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8882e36a
2023-07-10 08:37:39.783 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:39.787 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='한태전' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='한태전' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='한태전' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='한태전' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='한태전' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='한태전'
	order by 1
 {executed in 2 msec}
2023-07-10 08:37:39.815 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@88429e15
2023-07-10 08:37:39.815 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:39.815 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '한태전' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:39.816 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:39.818 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '한태전' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:39.819 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '한태전' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:39.867 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a9059487
2023-07-10 08:37:39.869 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '한태전'
 {executed in 0 msec}
2023-07-10 08:37:40.105 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('한태전','',k.emp_nm,'한태전')
 {executed in 237 msec}
2023-07-10 08:37:41.306 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2584d00e
2023-07-10 08:37:41.307 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:41.310 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='허선균' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='허선균' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='허선균' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='허선균' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='허선균' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='허선균'
	order by 1
 {executed in 2 msec}
2023-07-10 08:37:41.337 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@25448ab9
2023-07-10 08:37:41.337 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:41.337 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '허선균' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:41.338 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:41.340 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '허선균' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:37:41.342 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '허선균' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:41.393 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4607812b
2023-07-10 08:37:41.397 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '허선균'
 {executed in 0 msec}
2023-07-10 08:37:41.607 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('허선균','',k.emp_nm,'허선균')
 {executed in 213 msec}
2023-07-10 08:37:43.639 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1b37d61
2023-07-10 08:37:43.642 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:43.646 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='최종만' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='최종만' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='최종만' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='최종만' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='최종만' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='최종만'
	order by 1
 {executed in 2 msec}
2023-07-10 08:37:43.676 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@173380c
2023-07-10 08:37:43.676 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:43.676 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '최종만' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:43.677 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:43.679 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '최종만' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:37:43.681 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '최종만' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:43.740 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@22362e7e
2023-07-10 08:37:43.742 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '최종만'
 {executed in 0 msec}
2023-07-10 08:37:43.942 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('최종만','',k.emp_nm,'최종만')
 {executed in 201 msec}
2023-07-10 08:37:45.068 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@190f59d5
2023-07-10 08:37:45.069 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:45.072 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='최정배' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='최정배' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='최정배' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='최정배' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='최정배' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='최정배'
	order by 1
 {executed in 1 msec}
2023-07-10 08:37:45.104 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@18cf1480
2023-07-10 08:37:45.104 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:45.104 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '최정배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:45.105 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:45.107 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '최정배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:37:45.108 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '최정배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:45.173 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@39920af2
2023-07-10 08:37:45.177 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '최정배'
 {executed in 0 msec}
2023-07-10 08:37:45.386 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('최정배','',k.emp_nm,'최정배')
 {executed in 212 msec}
2023-07-10 08:37:53.807 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:37:53.807 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:53.822 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 13 msec}
2023-07-10 08:37:54.854 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d597735e
2023-07-10 08:37:54.856 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:37:54.858 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수'
	order by 1
 {executed in 2 msec}
2023-07-10 08:37:54.882 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d5572e09
2023-07-10 08:37:54.882 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:37:54.882 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김대수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:37:54.883 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:37:54.885 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김대수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:54.886 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김대수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:37:54.928 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f61a247b
2023-07-10 08:37:54.931 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김대수'
 {executed in 0 msec}
2023-07-10 08:37:55.146 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김대수','',k.emp_nm,'김대수')
 {executed in 216 msec}
2023-07-10 08:38:15.517 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:38:15.518 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:38:15.538 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 08:38:16.800 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de6bc812
2023-07-10 08:38:16.801 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:38:16.804 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호'
	order by 1
 {executed in 2 msec}
2023-07-10 08:38:16.830 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de2b82bd
2023-07-10 08:38:16.830 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:38:16.830 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:38:16.832 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:38:16.834 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:38:16.876 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@feee792f
2023-07-10 08:38:16.877 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:38:16.879 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김권호'
 {executed in 0 msec}
2023-07-10 08:38:17.088 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김권호','',k.emp_nm,'김권호')
 {executed in 209 msec}
2023-07-10 08:42:11.389 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:42:11.390 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:42:11.392 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 08:42:13.534 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@49da33b6
2023-07-10 08:42:13.535 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:42:13.538 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 2 msec}
2023-07-10 08:42:13.568 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4999ee61
2023-07-10 08:42:13.568 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:42:13.568 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:42:13.570 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:42:13.572 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:42:13.620 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a5ce4d3
2023-07-10 08:42:13.622 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:42:13.623 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
43. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 0 msec}
2023-07-10 08:42:13.879 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('고상욱','',k.emp_nm,'고상욱')
 {executed in 258 msec}
2023-07-10 08:44:19.799 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:44:19.800 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:44:19.800 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 08:44:22.510 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@49da33b6
2023-07-10 08:44:22.512 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:44:22.515 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 1 msec}
2023-07-10 08:44:22.525 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 0 msec}
2023-07-10 08:44:22.547 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4999ee61
2023-07-10 08:44:22.547 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:44:22.547 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:44:22.549 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:44:22.550 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:44:22.598 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a5ce4d3
2023-07-10 08:44:22.805 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('고상욱','',k.emp_nm,'고상욱')
 {executed in 206 msec}
2023-07-10 08:45:15.377 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:45:15.378 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:45:15.411 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 33 msec}
2023-07-10 08:45:16.515 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de6bc812
2023-07-10 08:45:16.516 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:45:16.520 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호'
	order by 1
 {executed in 2 msec}
2023-07-10 08:45:16.547 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de2b82bd
2023-07-10 08:45:16.547 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:45:16.547 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:45:16.548 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:45:16.550 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:45:16.594 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@feee792f
2023-07-10 08:45:16.595 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김권호'
 {executed in 1 msec}
2023-07-10 08:45:16.595 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:45:16.823 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
43. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('김권호','',k.emp_nm,'김권호')
 {executed in 227 msec}
2023-07-10 08:45:45.542 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77c0e8e3
2023-07-10 08:45:45.543 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:45:45.546 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종'
	order by 1
 {executed in 2 msec}
2023-07-10 08:45:45.572 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7780a38e
2023-07-10 08:45:45.572 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:45:45.572 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:45:45.574 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:45:45.575 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 0 msec}
2023-07-10 08:45:45.624 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98439a00
2023-07-10 08:45:45.625 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권태종'
 {executed in 0 msec}
2023-07-10 08:45:45.625 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:45:45.839 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
43. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('권태종','',k.emp_nm,'권태종')
 {executed in 213 msec}
2023-07-10 08:47:22.389 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 08:47:22.389 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
44. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:47:22.423 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
44. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 34 msec}
2023-07-10 08:47:23.686 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77c0e8e3
2023-07-10 08:47:23.687 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
44. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:47:23.690 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종'
	order by 1
 {executed in 2 msec}
2023-07-10 08:47:23.700 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
44. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권태종'
 {executed in 0 msec}
2023-07-10 08:47:23.727 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7780a38e
2023-07-10 08:47:23.727 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 08:47:23.727 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 08:47:23.729 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
44. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 08:47:23.731 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
44. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 08:47:23.785 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98439a00
2023-07-10 08:47:24.002 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('권태종','',k.emp_nm,'권태종')
 {executed in 214 msec}
2023-07-10 08:48:03.210 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8bca9b49
2023-07-10 08:48:03.210 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMPLOYEE_VACATION_INFO_emp} 
2023-07-10 08:48:03.210 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
2023-07-10 08:48:03.211 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:48:03.212 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 08:48:03.213 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 0 msec}
2023-07-10 08:48:04.315 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1c94e30c
2023-07-10 08:48:04.315 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-10 08:48:04.315 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
2023-07-10 08:48:04.316 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:48:04.322 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-07-10 08:48:04.323 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 08:48:05.010 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3ed06693
2023-07-10 08:48:05.010 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-10 08:48:05.010 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
2023-07-10 08:48:05.011 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:48:05.013 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 2 msec}
2023-07-10 08:48:05.014 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 08:48:05.913 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b3b3a2af
2023-07-10 08:48:05.913 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 08:48:05.913 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '권태종' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 08:48:05.914 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:48:05.915 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '권태종' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:48:05.916 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '권태종' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 08:48:06.515 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bc93770f
2023-07-10 08:48:06.515 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-10 08:48:06.515 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권태종'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-10 08:48:06.516 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:48:06.745 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권태종'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 229 msec}
2023-07-10 08:48:06.902 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권태종'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 157 msec}
2023-07-10 08:48:06.937 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@624477af
2023-07-10 08:48:06.937 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-10 08:48:06.938 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-10 08:48:07.574 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 635 msec}
2023-07-10 08:48:07.575 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:48:07.575 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-07-10 08:48:07.623 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@acc6e4e5
2023-07-10 08:48:07.623 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-10 08:48:07.623 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-07-10 08:48:07.652 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 28 msec}
2023-07-10 08:48:07.685 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 33 msec}
2023-07-10 08:48:19.118 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:48:19.119 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 08:48:20.914 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@51d77aec
2023-07-10 08:48:20.915 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:48:21.141 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
52. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('','',k.emp_nm,'')
 {executed in 224 msec}
2023-07-10 08:56:52.034 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:56:52.035 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 08:57:27.816 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 08:57:27.816 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 08:57:38.316 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 08:57:38.317 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 09:00:37.211 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:00:37.212 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
53. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 09:02:35.943 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:02:35.944 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
53. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 09:03:50.296 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:03:50.297 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
53. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 09:04:36.054 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:04:36.055 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
53. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 09:05:06.748 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:05:06.749 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
53. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 09:05:37.184 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:05:37.185 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
53. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 09:15:45.865 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 09:15:45.866 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
62. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:15:45.885 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
62. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 09:15:47.035 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@49da33b6
2023-07-10 09:15:47.037 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
62. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:15:47.040 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
62. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 2 msec}
2023-07-10 09:15:47.075 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4999ee61
2023-07-10 09:15:47.075 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 09:15:47.075 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 09:15:47.077 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
62. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 09:15:47.080 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
62. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 09:15:47.127 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a5ce4d3
2023-07-10 09:15:47.129 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
63. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:15:47.130 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
63. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 1 msec}
2023-07-10 09:15:47.467 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
62. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') 
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE k.emp_nm = decode ('고상욱','',k.emp_nm,'고상욱')
 {executed in 339 msec}
2023-07-10 09:24:27.865 INFO  [RMI TCP Connection(143)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-10 09:24:27.900 INFO  [RMI TCP Connection(143)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-10 09:24:27.903 INFO  [RMI TCP Connection(143)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-10 09:24:27.912 INFO  [RMI TCP Connection(143)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-10 09:24:27.966 INFO  [RMI TCP Connection(143)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-10 09:24:46.429 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 32624 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-10 09:24:46.435 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-10 09:24:46.489 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-10 09:24:46.489 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-10 09:24:47.733 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 09:24:47.733 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-10 09:24:47.889 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 145ms. Found 3 JPA repository interfaces.
2023-07-10 09:24:48.245 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 09:24:48.246 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-10 09:24:48.294 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 09:24:48.295 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 09:24:48.295 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 09:24:48.296 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 50ms. Found 0 JDBC repository interfaces.
2023-07-10 09:24:48.736 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-10 09:24:48.802 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-10 09:24:48.803 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 09:24:48.803 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 09:24:48.804 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 09:24:48.804 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 09:24:48.804 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-10 09:24:48.804 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-10 09:24:48.804 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 09:24:48.804 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 09:24:48.804 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 09:24:48.804 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 09:24:48.805 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 09:24:48.874 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$f1592006] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:24:48.925 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-10 09:24:49.013 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$db4f8433] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:24:49.103 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:24:49.108 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@7b34bcd9' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:24:49.113 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$2426e5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:24:49.126 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$25793efb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:24:49.130 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:24:49.132 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:24:49.159 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$42a1bbf9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:24:49.189 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$c222092b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:24:49.319 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-10 09:24:49.324 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-10 09:24:49.761 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-10 09:24:49.779 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-10 09:24:49.790 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-10 09:24:49.790 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-10 09:24:50.195 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-10 09:24:50.208 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-10 09:24:50.208 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3719 ms
2023-07-10 09:24:51.097 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@5559933a with name: jasyptStringEncryptor
2023-07-10 09:24:51.148 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-10 09:24:51.236 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-10 09:24:51.241 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-10 09:24:52.056 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-10 09:24:52.456 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-10 09:24:52.558 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-10 09:24:52.560 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-10 09:24:52.734 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-10 09:24:52.980 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:24:52.997 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-10 09:24:53.742 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:24:53.745 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-10 09:24:53.797 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-10 09:24:54.071 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-10 09:24:55.186 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-10 09:24:55.197 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-10 09:24:55.400 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-10 09:24:55.401 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-10 09:24:55.401 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-10 09:24:55.401 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-10 09:24:55.401 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-10 09:24:55.401 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-10 09:24:55.401 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-10 09:24:55.401 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-10 09:24:55.402 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-10 09:24:55.566 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@47e8f886, org.springframework.security.web.context.SecurityContextPersistenceFilter@71f38401, org.springframework.security.web.header.HeaderWriterFilter@50c3a62e, org.springframework.web.filter.CorsFilter@2c5088ed, org.springframework.security.web.authentication.logout.LogoutFilter@6337d002, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@29731814, org.springframework.security.web.session.ConcurrentSessionFilter@3085744f, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@e2b4397, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3dfdde51, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5fe484eb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@56f1aadb, org.springframework.security.web.session.SessionManagementFilter@442a366e, org.springframework.security.web.access.ExceptionTranslationFilter@71d45df1, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@14a5dd8d]
2023-07-10 09:24:55.589 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-10 09:24:55.948 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-10 09:24:56.020 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-10 09:24:56.464 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:24:57.314 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-10 09:24:57.347 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-10 09:24:57.494 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-10 09:24:57.500 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-10 09:24:57.564 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-10 09:24:57.569 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.619 seconds (JVM running for 13.045)
2023-07-10 09:24:57.570 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 09:24:57.570 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-10 09:24:57.570 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 09:24:58.686 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-10 09:24:58.686 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-10 09:24:58.707 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-07-10 09:28:45.835 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 09:28:45.855 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:28:45.883 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 27 msec}
2023-07-10 09:28:47.399 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1249f292
2023-07-10 09:28:47.462 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:28:47.472 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 2 msec}
2023-07-10 09:28:47.515 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1209ad3d
2023-07-10 09:28:47.515 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 09:28:47.515 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 09:28:47.519 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 09:28:47.521 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 0 msec}
2023-07-10 09:28:47.577 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@32cca3af
2023-07-10 09:28:47.590 ERROR [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:311)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('','ALL',0,)
 {FAILED after -1 msec}
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT K.*
	FROM (
		SELECT 	ROW_NUMBER() OVER(ORDER BY SUM(A.TOT_POINT) DESC) AS SEQ
			,	A.EMP_NM
			,	B.SP_GB
			,	B.ROUTE_NM
			,	LISTAGG(A.CODE_NM,'/') WITHIN GROUP (ORDER BY A.CODE_ID)   AS CODELIST
			,	LISTAGG(A.TOT_POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS POINTLIST
			,	LISTAGG(A.POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS CNTLIST
			,	SUM(A.TOT_POINT) AS TOT_POINT
			,	NVL(TO_CHAR(DATEDIFF(DAY,B.ENTER_DATE,TO_CHAR(SYSDATE,'yyyy-mm-dd'))),0) AS TOTWORKINGDAY
		FROM  TBM_EMP_POINT_INFO A JOIN TBL_DRIVERINFO B ON A.COMPANY_NO = B.COMPANY_NO AND A.EMP_NM = B.EMP_NM
		WHERE	A.COMPANY_NO = '100'
		AND	 	A.FROM_DATE = '2023-01-01' 
		AND 	A.TO_DATE = '2023-07-31' 
		AND 	B.ROUTE_NM = DECODE('','',B.ROUTE_NM,'') 
		AND 	B.SP_GB = DECODE('ALL','ALL',B.SP_GB,'ALL')
		GROUP BY A.EMP_NM
		ORDER BY 1
	) K
	WHERE 	K.EMP_NM = DECODE ('권오현','',K.EMP_NM,'권오현')
	AND		ROUND(K.TOTWORKINGDAY/365,0) >= DECODE ('','ALL',0,)[*]"; expected "NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('','ALL',0,) [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.prepare(CommandRemote.java:85)
	at org.h2.command.CommandRemote.<init>(CommandRemote.java:51)
	at org.h2.engine.SessionRemote.prepareCommand(SessionRemote.java:481)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:352)
	at net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy.prepareStatement(ConnectionSpy.java:475)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:311)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:87)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:85)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at jdk.proxy2/jdk.proxy2.$Proxy117.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:53)
	at jdk.proxy3/jdk.proxy3.$Proxy120.select_TBM_EMP_POINT_INFO(Unknown Source)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilterMybatis(DynamicSqlService.java:193)
	at com.pjy.dashboard.controller.TestController.DynamicSqlFilterMybatis(TestController.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$36447d9a.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 09:28:47.667 ERROR [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: 
### Error querying database.  Cause: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT K.*
	FROM (
		SELECT 	ROW_NUMBER() OVER(ORDER BY SUM(A.TOT_POINT) DESC) AS SEQ
			,	A.EMP_NM
			,	B.SP_GB
			,	B.ROUTE_NM
			,	LISTAGG(A.CODE_NM,'/') WITHIN GROUP (ORDER BY A.CODE_ID)   AS CODELIST
			,	LISTAGG(A.TOT_POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS POINTLIST
			,	LISTAGG(A.POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS CNTLIST
			,	SUM(A.TOT_POINT) AS TOT_POINT
			,	NVL(TO_CHAR(DATEDIFF(DAY,B.ENTER_DATE,TO_CHAR(SYSDATE,'yyyy-mm-dd'))),0) AS TOTWORKINGDAY
		FROM  TBM_EMP_POINT_INFO A JOIN TBL_DRIVERINFO B ON A.COMPANY_NO = B.COMPANY_NO AND A.EMP_NM = B.EMP_NM
		WHERE	A.COMPANY_NO = '100'
		AND	 	A.FROM_DATE = '2023-01-01' 
		AND 	A.TO_DATE = '2023-07-31' 
		AND 	B.ROUTE_NM = DECODE('','',B.ROUTE_NM,'') 
		AND 	B.SP_GB = DECODE('ALL','ALL',B.SP_GB,'ALL')
		GROUP BY A.EMP_NM
		ORDER BY 1
	) K
	WHERE 	K.EMP_NM = DECODE ('권오현','',K.EMP_NM,'권오현')
	AND		ROUND(K.TOTWORKINGDAY/365,0) >= DECODE ('','ALL',0,)[*]"; expected "NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('','ALL',0,) [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

### The error may exist in file [D:\BUS\dashboard\dashboard\target\classes\mapper\h3.xml]
### The error may involve com.pjy.dashboard.mapper.h2.h2Mapper3.select_TBM_EMP_POINT_INFO
### The error occurred while executing a query
### SQL: SELECT k.*  FROM (   SELECT  ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq    , a.emp_nm    , b.sp_gb    , b.route_nm    , listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList    , listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList    , listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList    , sum(a.tot_point) AS tot_point    , nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay   FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm   WHERE a.company_no = '100'   AND   a.from_date = '2023-01-01'    AND  a.to_date = '2023-07-31'    AND  b.route_nm = decode('','',b.route_nm,'')    AND  b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')   GROUP BY a.emp_nm   ORDER BY 1  ) K  WHERE  k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')  AND  round(k.totWorkingDay/365,0) >= decode ('','ALL',0,)
### Cause: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT K.*
	FROM (
		SELECT 	ROW_NUMBER() OVER(ORDER BY SUM(A.TOT_POINT) DESC) AS SEQ
			,	A.EMP_NM
			,	B.SP_GB
			,	B.ROUTE_NM
			,	LISTAGG(A.CODE_NM,'/') WITHIN GROUP (ORDER BY A.CODE_ID)   AS CODELIST
			,	LISTAGG(A.TOT_POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS POINTLIST
			,	LISTAGG(A.POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS CNTLIST
			,	SUM(A.TOT_POINT) AS TOT_POINT
			,	NVL(TO_CHAR(DATEDIFF(DAY,B.ENTER_DATE,TO_CHAR(SYSDATE,'yyyy-mm-dd'))),0) AS TOTWORKINGDAY
		FROM  TBM_EMP_POINT_INFO A JOIN TBL_DRIVERINFO B ON A.COMPANY_NO = B.COMPANY_NO AND A.EMP_NM = B.EMP_NM
		WHERE	A.COMPANY_NO = '100'
		AND	 	A.FROM_DATE = '2023-01-01' 
		AND 	A.TO_DATE = '2023-07-31' 
		AND 	B.ROUTE_NM = DECODE('','',B.ROUTE_NM,'') 
		AND 	B.SP_GB = DECODE('ALL','ALL',B.SP_GB,'ALL')
		GROUP BY A.EMP_NM
		ORDER BY 1
	) K
	WHERE 	K.EMP_NM = DECODE ('권오현','',K.EMP_NM,'권오현')
	AND		ROUND(K.TOTWORKINGDAY/365,0) >= DECODE ('','ALL',0,)[*]"; expected "NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('','ALL',0,) [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT K.*
	FROM (
		SELECT 	ROW_NUMBER() OVER(ORDER BY SUM(A.TOT_POINT) DESC) AS SEQ
			,	A.EMP_NM
			,	B.SP_GB
			,	B.ROUTE_NM
			,	LISTAGG(A.CODE_NM,'/') WITHIN GROUP (ORDER BY A.CODE_ID)   AS CODELIST
			,	LISTAGG(A.TOT_POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS POINTLIST
			,	LISTAGG(A.POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS CNTLIST
			,	SUM(A.TOT_POINT) AS TOT_POINT
			,	NVL(TO_CHAR(DATEDIFF(DAY,B.ENTER_DATE,TO_CHAR(SYSDATE,'yyyy-mm-dd'))),0) AS TOTWORKINGDAY
		FROM  TBM_EMP_POINT_INFO A JOIN TBL_DRIVERINFO B ON A.COMPANY_NO = B.COMPANY_NO AND A.EMP_NM = B.EMP_NM
		WHERE	A.COMPANY_NO = '100'
		AND	 	A.FROM_DATE = '2023-01-01' 
		AND 	A.TO_DATE = '2023-07-31' 
		AND 	B.ROUTE_NM = DECODE('','',B.ROUTE_NM,'') 
		AND 	B.SP_GB = DECODE('ALL','ALL',B.SP_GB,'ALL')
		GROUP BY A.EMP_NM
		ORDER BY 1
	) K
	WHERE 	K.EMP_NM = DECODE ('권오현','',K.EMP_NM,'권오현')
	AND		ROUND(K.TOTWORKINGDAY/365,0) >= DECODE ('','ALL',0,)[*]"; expected "NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('','ALL',0,) [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

2023-07-10 09:28:47.682 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권오현'
 {executed in 0 msec}
2023-07-10 09:28:47.698 WARN  [http-nio-10010-exec-6] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-07-10 09:31:05.517 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 09:31:05.518 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:31:05.519 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 09:31:06.961 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1249f292
2023-07-10 09:31:06.963 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:31:06.968 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 2 msec}
2023-07-10 09:31:06.982 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권오현'
 {executed in 1 msec}
2023-07-10 09:31:07.008 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1209ad3d
2023-07-10 09:31:07.008 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 09:31:07.008 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 09:31:07.011 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 09:31:07.013 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 09:31:07.071 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@55c174b1
2023-07-10 09:31:07.077 ERROR [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:311)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('ALL','ALL',0,ALL)
 {FAILED after -1 msec}
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT K.*
	FROM (
		SELECT 	ROW_NUMBER() OVER(ORDER BY SUM(A.TOT_POINT) DESC) AS SEQ
			,	A.EMP_NM
			,	B.SP_GB
			,	B.ROUTE_NM
			,	LISTAGG(A.CODE_NM,'/') WITHIN GROUP (ORDER BY A.CODE_ID)   AS CODELIST
			,	LISTAGG(A.TOT_POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS POINTLIST
			,	LISTAGG(A.POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS CNTLIST
			,	SUM(A.TOT_POINT) AS TOT_POINT
			,	NVL(TO_CHAR(DATEDIFF(DAY,B.ENTER_DATE,TO_CHAR(SYSDATE,'yyyy-mm-dd'))),0) AS TOTWORKINGDAY
		FROM  TBM_EMP_POINT_INFO A JOIN TBL_DRIVERINFO B ON A.COMPANY_NO = B.COMPANY_NO AND A.EMP_NM = B.EMP_NM
		WHERE	A.COMPANY_NO = '100'
		AND	 	A.FROM_DATE = '2023-01-01' 
		AND 	A.TO_DATE = '2023-07-31' 
		AND 	B.ROUTE_NM = DECODE('','',B.ROUTE_NM,'') 
		AND 	B.SP_GB = DECODE('ALL','ALL',B.SP_GB,'ALL')
		GROUP BY A.EMP_NM
		ORDER BY 1
	) K
	WHERE 	K.EMP_NM = DECODE ('권오현','',K.EMP_NM,'권오현')
	AND		ROUND(K.TOTWORKINGDAY/365,0) >= DECODE ('ALL','ALL',0,ALL[*])"; expected "NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('ALL','ALL',0,ALL) [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.prepare(CommandRemote.java:85)
	at org.h2.command.CommandRemote.<init>(CommandRemote.java:51)
	at org.h2.engine.SessionRemote.prepareCommand(SessionRemote.java:481)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:352)
	at net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy.prepareStatement(ConnectionSpy.java:475)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:311)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:87)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:85)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at jdk.proxy2/jdk.proxy2.$Proxy117.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:53)
	at jdk.proxy3/jdk.proxy3.$Proxy120.select_TBM_EMP_POINT_INFO(Unknown Source)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilterMybatis(DynamicSqlService.java:193)
	at com.pjy.dashboard.controller.TestController.DynamicSqlFilterMybatis(TestController.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$36447d9a.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 09:31:07.090 ERROR [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: 
### Error querying database.  Cause: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT K.*
	FROM (
		SELECT 	ROW_NUMBER() OVER(ORDER BY SUM(A.TOT_POINT) DESC) AS SEQ
			,	A.EMP_NM
			,	B.SP_GB
			,	B.ROUTE_NM
			,	LISTAGG(A.CODE_NM,'/') WITHIN GROUP (ORDER BY A.CODE_ID)   AS CODELIST
			,	LISTAGG(A.TOT_POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS POINTLIST
			,	LISTAGG(A.POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS CNTLIST
			,	SUM(A.TOT_POINT) AS TOT_POINT
			,	NVL(TO_CHAR(DATEDIFF(DAY,B.ENTER_DATE,TO_CHAR(SYSDATE,'yyyy-mm-dd'))),0) AS TOTWORKINGDAY
		FROM  TBM_EMP_POINT_INFO A JOIN TBL_DRIVERINFO B ON A.COMPANY_NO = B.COMPANY_NO AND A.EMP_NM = B.EMP_NM
		WHERE	A.COMPANY_NO = '100'
		AND	 	A.FROM_DATE = '2023-01-01' 
		AND 	A.TO_DATE = '2023-07-31' 
		AND 	B.ROUTE_NM = DECODE('','',B.ROUTE_NM,'') 
		AND 	B.SP_GB = DECODE('ALL','ALL',B.SP_GB,'ALL')
		GROUP BY A.EMP_NM
		ORDER BY 1
	) K
	WHERE 	K.EMP_NM = DECODE ('권오현','',K.EMP_NM,'권오현')
	AND		ROUND(K.TOTWORKINGDAY/365,0) >= DECODE ('ALL','ALL',0,ALL[*])"; expected "NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('ALL','ALL',0,ALL) [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

### The error may exist in file [D:\BUS\dashboard\dashboard\target\classes\mapper\h3.xml]
### The error may involve com.pjy.dashboard.mapper.h2.h2Mapper3.select_TBM_EMP_POINT_INFO
### The error occurred while executing a query
### SQL: SELECT k.*  FROM (   SELECT  ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq    , a.emp_nm    , b.sp_gb    , b.route_nm    , listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList    , listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList    , listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList    , sum(a.tot_point) AS tot_point    , nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay   FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm   WHERE a.company_no = '100'   AND   a.from_date = '2023-01-01'    AND  a.to_date = '2023-07-31'    AND  b.route_nm = decode('','',b.route_nm,'')    AND  b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')   GROUP BY a.emp_nm   ORDER BY 1  ) K  WHERE  k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')  AND  round(k.totWorkingDay/365,0) >= decode ('ALL','ALL',0,ALL)
### Cause: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT K.*
	FROM (
		SELECT 	ROW_NUMBER() OVER(ORDER BY SUM(A.TOT_POINT) DESC) AS SEQ
			,	A.EMP_NM
			,	B.SP_GB
			,	B.ROUTE_NM
			,	LISTAGG(A.CODE_NM,'/') WITHIN GROUP (ORDER BY A.CODE_ID)   AS CODELIST
			,	LISTAGG(A.TOT_POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS POINTLIST
			,	LISTAGG(A.POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS CNTLIST
			,	SUM(A.TOT_POINT) AS TOT_POINT
			,	NVL(TO_CHAR(DATEDIFF(DAY,B.ENTER_DATE,TO_CHAR(SYSDATE,'yyyy-mm-dd'))),0) AS TOTWORKINGDAY
		FROM  TBM_EMP_POINT_INFO A JOIN TBL_DRIVERINFO B ON A.COMPANY_NO = B.COMPANY_NO AND A.EMP_NM = B.EMP_NM
		WHERE	A.COMPANY_NO = '100'
		AND	 	A.FROM_DATE = '2023-01-01' 
		AND 	A.TO_DATE = '2023-07-31' 
		AND 	B.ROUTE_NM = DECODE('','',B.ROUTE_NM,'') 
		AND 	B.SP_GB = DECODE('ALL','ALL',B.SP_GB,'ALL')
		GROUP BY A.EMP_NM
		ORDER BY 1
	) K
	WHERE 	K.EMP_NM = DECODE ('권오현','',K.EMP_NM,'권오현')
	AND		ROUND(K.TOTWORKINGDAY/365,0) >= DECODE ('ALL','ALL',0,ALL[*])"; expected "NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('ALL','ALL',0,ALL) [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT K.*
	FROM (
		SELECT 	ROW_NUMBER() OVER(ORDER BY SUM(A.TOT_POINT) DESC) AS SEQ
			,	A.EMP_NM
			,	B.SP_GB
			,	B.ROUTE_NM
			,	LISTAGG(A.CODE_NM,'/') WITHIN GROUP (ORDER BY A.CODE_ID)   AS CODELIST
			,	LISTAGG(A.TOT_POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS POINTLIST
			,	LISTAGG(A.POINT,'/') WITHIN GROUP (ORDER BY A.CODE_ID) AS CNTLIST
			,	SUM(A.TOT_POINT) AS TOT_POINT
			,	NVL(TO_CHAR(DATEDIFF(DAY,B.ENTER_DATE,TO_CHAR(SYSDATE,'yyyy-mm-dd'))),0) AS TOTWORKINGDAY
		FROM  TBM_EMP_POINT_INFO A JOIN TBL_DRIVERINFO B ON A.COMPANY_NO = B.COMPANY_NO AND A.EMP_NM = B.EMP_NM
		WHERE	A.COMPANY_NO = '100'
		AND	 	A.FROM_DATE = '2023-01-01' 
		AND 	A.TO_DATE = '2023-07-31' 
		AND 	B.ROUTE_NM = DECODE('','',B.ROUTE_NM,'') 
		AND 	B.SP_GB = DECODE('ALL','ALL',B.SP_GB,'ALL')
		GROUP BY A.EMP_NM
		ORDER BY 1
	) K
	WHERE 	K.EMP_NM = DECODE ('권오현','',K.EMP_NM,'권오현')
	AND		ROUND(K.TOTWORKINGDAY/365,0) >= DECODE ('ALL','ALL',0,ALL[*])"; expected "NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('ALL','ALL',0,ALL) [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

2023-07-10 09:31:07.093 WARN  [http-nio-10010-exec-8] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-07-10 09:32:51.855 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 09:32:51.856 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:32:51.858 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 09:32:53.627 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1249f292
2023-07-10 09:32:53.629 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:32:53.634 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 3 msec}
2023-07-10 09:32:53.670 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1209ad3d
2023-07-10 09:32:53.670 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 09:32:53.671 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 09:32:53.672 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 09:32:53.675 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 09:32:53.728 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7f107f3e
2023-07-10 09:32:53.731 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:32:53.732 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권오현'
 {executed in 0 msec}
2023-07-10 09:32:53.993 ERROR [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('0','ALL',0,0)
 {FAILED after 263 msec}
org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant "10/14/15"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('0','ALL',0,0) [22007-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.executeQuery(CommandRemote.java:178)
	at org.h2.jdbc.JdbcPreparedStatement.execute(JdbcPreparedStatement.java:233)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.execute(PreparedStatementSpy.java:443)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at jdk.proxy2/jdk.proxy2.$Proxy117.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:53)
	at jdk.proxy3/jdk.proxy3.$Proxy120.select_TBM_EMP_POINT_INFO(Unknown Source)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilterMybatis(DynamicSqlService.java:193)
	at com.pjy.dashboard.controller.TestController.DynamicSqlFilterMybatis(TestController.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$36447d9a.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 09:32:53.996 ERROR [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: 
### Error querying database.  Cause: org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant "10/14/15"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('0','ALL',0,0) [22007-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:136)
	at org.h2.value.Value.convertToTimestamp(Value.java:1169)
	at org.h2.value.Value.convertTo(Value.java:822)
	at org.h2.value.Value.convertTo(Value.java:737)
	at org.h2.util.DateTimeUtils.dateAndTimeFromValue(DateTimeUtils.java:510)
	at org.h2.expression.function.DateTimeFunctions.datediff(DateTimeFunctions.java:276)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1510)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1266)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.function.Function.getNullOrValue(Function.java:1249)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1273)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.Alias.getValue(Alias.java:37)
	at org.h2.command.dml.Select.constructGroupResultRow(Select.java:586)
	at org.h2.command.dml.Select.processGroupResult(Select.java:553)
	at org.h2.command.dml.Select.queryGroupWindow(Select.java:475)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:831)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.index.ViewIndex.find(ViewIndex.java:288)
	at org.h2.index.ViewIndex.find(ViewIndex.java:160)
	at org.h2.index.BaseIndex.find(BaseIndex.java:148)
	at org.h2.index.IndexCursor.find(IndexCursor.java:163)
	at org.h2.table.TableFilter.next(TableFilter.java:498)
	at org.h2.command.dml.Select$LazyResultQueryFlat.fetchNextRow(Select.java:1843)
	at org.h2.result.LazyResult.hasNext(LazyResult.java:101)
	at org.h2.result.LazyResult.next(LazyResult.java:60)
	at org.h2.command.dml.Select.queryFlat(Select.java:737)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:844)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.command.CommandContainer.query(CommandContainer.java:285)
	at org.h2.command.Command.executeQuery(Command.java:195)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:343)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.NumberFormatException: For input string: "10/1"
	at java.lang.NumberFormatException.forInputString(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:169)
	at org.h2.util.DateTimeUtils.parseTimestamp(DateTimeUtils.java:316)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:134)
	... 38 more

### The error may exist in file [D:\BUS\dashboard\dashboard\target\classes\mapper\h3.xml]
### The error may involve com.pjy.dashboard.mapper.h2.h2Mapper3.select_TBM_EMP_POINT_INFO-Inline
### The error occurred while setting parameters
### SQL: SELECT k.*  FROM (   SELECT  ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq    , a.emp_nm    , b.sp_gb    , b.route_nm    , listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList    , listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList    , listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList    , sum(a.tot_point) AS tot_point    , nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay   FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm   WHERE a.company_no = '100'   AND   a.from_date = '2023-01-01'    AND  a.to_date = '2023-07-31'    AND  b.route_nm = decode('','',b.route_nm,'')    AND  b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')   GROUP BY a.emp_nm   ORDER BY 1  ) K  WHERE  k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')  AND  round(k.totWorkingDay/365,0) >= decode ('0','ALL',0,0)
### Cause: org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant "10/14/15"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('0','ALL',0,0) [22007-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:136)
	at org.h2.value.Value.convertToTimestamp(Value.java:1169)
	at org.h2.value.Value.convertTo(Value.java:822)
	at org.h2.value.Value.convertTo(Value.java:737)
	at org.h2.util.DateTimeUtils.dateAndTimeFromValue(DateTimeUtils.java:510)
	at org.h2.expression.function.DateTimeFunctions.datediff(DateTimeFunctions.java:276)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1510)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1266)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.function.Function.getNullOrValue(Function.java:1249)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1273)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.Alias.getValue(Alias.java:37)
	at org.h2.command.dml.Select.constructGroupResultRow(Select.java:586)
	at org.h2.command.dml.Select.processGroupResult(Select.java:553)
	at org.h2.command.dml.Select.queryGroupWindow(Select.java:475)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:831)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.index.ViewIndex.find(ViewIndex.java:288)
	at org.h2.index.ViewIndex.find(ViewIndex.java:160)
	at org.h2.index.BaseIndex.find(BaseIndex.java:148)
	at org.h2.index.IndexCursor.find(IndexCursor.java:163)
	at org.h2.table.TableFilter.next(TableFilter.java:498)
	at org.h2.command.dml.Select$LazyResultQueryFlat.fetchNextRow(Select.java:1843)
	at org.h2.result.LazyResult.hasNext(LazyResult.java:101)
	at org.h2.result.LazyResult.next(LazyResult.java:60)
	at org.h2.command.dml.Select.queryFlat(Select.java:737)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:844)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.command.CommandContainer.query(CommandContainer.java:285)
	at org.h2.command.Command.executeQuery(Command.java:195)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:343)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.NumberFormatException: For input string: "10/1"
	at java.lang.NumberFormatException.forInputString(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:169)
	at org.h2.util.DateTimeUtils.parseTimestamp(DateTimeUtils.java:316)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:134)
	... 38 more

; Cannot parse "TIMESTAMP" constant "10/14/15"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('0','ALL',0,0) [22007-200]; nested exception is org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant "10/14/15"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= decode ('0','ALL',0,0) [22007-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:136)
	at org.h2.value.Value.convertToTimestamp(Value.java:1169)
	at org.h2.value.Value.convertTo(Value.java:822)
	at org.h2.value.Value.convertTo(Value.java:737)
	at org.h2.util.DateTimeUtils.dateAndTimeFromValue(DateTimeUtils.java:510)
	at org.h2.expression.function.DateTimeFunctions.datediff(DateTimeFunctions.java:276)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1510)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1266)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.function.Function.getNullOrValue(Function.java:1249)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1273)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.Alias.getValue(Alias.java:37)
	at org.h2.command.dml.Select.constructGroupResultRow(Select.java:586)
	at org.h2.command.dml.Select.processGroupResult(Select.java:553)
	at org.h2.command.dml.Select.queryGroupWindow(Select.java:475)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:831)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.index.ViewIndex.find(ViewIndex.java:288)
	at org.h2.index.ViewIndex.find(ViewIndex.java:160)
	at org.h2.index.BaseIndex.find(BaseIndex.java:148)
	at org.h2.index.IndexCursor.find(IndexCursor.java:163)
	at org.h2.table.TableFilter.next(TableFilter.java:498)
	at org.h2.command.dml.Select$LazyResultQueryFlat.fetchNextRow(Select.java:1843)
	at org.h2.result.LazyResult.hasNext(LazyResult.java:101)
	at org.h2.result.LazyResult.next(LazyResult.java:60)
	at org.h2.command.dml.Select.queryFlat(Select.java:737)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:844)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.command.CommandContainer.query(CommandContainer.java:285)
	at org.h2.command.Command.executeQuery(Command.java:195)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:343)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.NumberFormatException: For input string: "10/1"
	at java.lang.NumberFormatException.forInputString(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:169)
	at org.h2.util.DateTimeUtils.parseTimestamp(DateTimeUtils.java:316)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:134)
	... 38 more

2023-07-10 09:32:53.999 WARN  [http-nio-10010-exec-2] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-07-10 09:34:15.411 INFO  [RMI TCP Connection(22)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-10 09:34:15.448 INFO  [RMI TCP Connection(22)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-10 09:34:15.451 INFO  [RMI TCP Connection(22)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-10 09:34:15.457 INFO  [RMI TCP Connection(22)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-10 09:34:15.507 INFO  [RMI TCP Connection(22)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-10 09:34:34.062 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 32764 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-10 09:34:34.066 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-10 09:34:34.123 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-10 09:34:34.124 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-10 09:34:35.342 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 09:34:35.342 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-10 09:34:35.496 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 143ms. Found 3 JPA repository interfaces.
2023-07-10 09:34:35.851 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 09:34:35.851 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-10 09:34:35.904 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 09:34:35.904 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 09:34:35.905 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 09:34:35.906 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 55ms. Found 0 JDBC repository interfaces.
2023-07-10 09:34:36.357 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-10 09:34:36.424 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-10 09:34:36.424 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 09:34:36.424 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 09:34:36.424 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 09:34:36.424 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 09:34:36.424 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-10 09:34:36.424 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-10 09:34:36.424 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 09:34:36.424 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 09:34:36.424 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 09:34:36.425 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 09:34:36.425 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 09:34:36.487 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$849f3917] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:34:36.539 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-10 09:34:36.623 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$6e959d44] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:34:36.705 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:34:36.709 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4b075003' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:34:36.715 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$936a3ff6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:34:36.726 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$b8bf580c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:34:36.731 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:34:36.732 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:34:36.758 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d5e7d50a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:34:36.791 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$5568223c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 09:34:36.933 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-10 09:34:36.938 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-10 09:34:37.369 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-10 09:34:37.386 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-10 09:34:37.398 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-10 09:34:37.398 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-10 09:34:37.800 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-10 09:34:37.812 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-10 09:34:37.813 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3689 ms
2023-07-10 09:34:38.702 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@42b64387 with name: jasyptStringEncryptor
2023-07-10 09:34:38.764 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-10 09:34:38.852 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-10 09:34:38.858 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-10 09:34:39.682 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-10 09:34:40.080 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-10 09:34:40.157 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-10 09:34:40.159 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-10 09:34:40.319 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-10 09:34:40.564 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:34:40.581 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-10 09:34:41.308 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:34:41.312 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-10 09:34:41.362 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-10 09:34:41.610 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-10 09:34:42.707 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-10 09:34:42.720 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-10 09:34:42.906 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-10 09:34:42.906 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-10 09:34:42.906 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-10 09:34:42.907 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-10 09:34:42.907 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-10 09:34:42.907 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-10 09:34:42.907 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-10 09:34:42.907 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-10 09:34:42.907 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-10 09:34:43.068 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@53b04d78, org.springframework.security.web.context.SecurityContextPersistenceFilter@55f9c923, org.springframework.security.web.header.HeaderWriterFilter@5b295e58, org.springframework.web.filter.CorsFilter@45f06b13, org.springframework.security.web.authentication.logout.LogoutFilter@5eedd3ac, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@74a73f8c, org.springframework.security.web.session.ConcurrentSessionFilter@63fbf946, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@5c056567, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@abe5945, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@73c39daa, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@44ef961d, org.springframework.security.web.session.SessionManagementFilter@10b0c9f9, org.springframework.security.web.access.ExceptionTranslationFilter@5db5d438, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5d8dbb81]
2023-07-10 09:34:43.090 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-10 09:34:43.455 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-10 09:34:43.531 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-10 09:34:43.956 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:34:44.809 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-10 09:34:44.838 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-10 09:34:44.980 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-10 09:34:44.987 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-10 09:34:45.049 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-10 09:34:45.055 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.47 seconds (JVM running for 12.899)
2023-07-10 09:34:45.056 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 09:34:45.056 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-10 09:34:45.056 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 09:34:46.197 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-10 09:34:46.198 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-10 09:34:46.219 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-07-10 09:34:57.581 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 09:34:57.611 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:34:57.642 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 30 msec}
2023-07-10 09:34:59.057 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2a0af2da
2023-07-10 09:34:59.107 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:34:59.119 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 2 msec}
2023-07-10 09:34:59.167 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@29caad85
2023-07-10 09:34:59.168 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 09:34:59.168 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 09:34:59.171 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 09:34:59.173 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 09:34:59.225 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96d17f86
2023-07-10 09:34:59.307 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:34:59.310 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 0 msec}
2023-07-10 09:34:59.493 ERROR [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0
 {FAILED after 262 msec}
org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant "10/14/15"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0 [22007-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.executeQuery(CommandRemote.java:178)
	at org.h2.jdbc.JdbcPreparedStatement.execute(JdbcPreparedStatement.java:233)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.execute(PreparedStatementSpy.java:443)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at jdk.proxy2/jdk.proxy2.$Proxy117.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:53)
	at jdk.proxy3/jdk.proxy3.$Proxy120.select_TBM_EMP_POINT_INFO(Unknown Source)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilterMybatis(DynamicSqlService.java:193)
	at com.pjy.dashboard.controller.TestController.DynamicSqlFilterMybatis(TestController.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$f2854af5.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 09:34:59.545 ERROR [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: 
### Error querying database.  Cause: org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant "10/14/15"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0 [22007-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:136)
	at org.h2.value.Value.convertToTimestamp(Value.java:1169)
	at org.h2.value.Value.convertTo(Value.java:822)
	at org.h2.value.Value.convertTo(Value.java:737)
	at org.h2.util.DateTimeUtils.dateAndTimeFromValue(DateTimeUtils.java:510)
	at org.h2.expression.function.DateTimeFunctions.datediff(DateTimeFunctions.java:276)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1510)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1266)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.function.Function.getNullOrValue(Function.java:1249)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1273)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.Alias.getValue(Alias.java:37)
	at org.h2.command.dml.Select.constructGroupResultRow(Select.java:586)
	at org.h2.command.dml.Select.processGroupResult(Select.java:553)
	at org.h2.command.dml.Select.queryGroupWindow(Select.java:475)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:831)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.index.ViewIndex.find(ViewIndex.java:288)
	at org.h2.index.ViewIndex.find(ViewIndex.java:160)
	at org.h2.index.BaseIndex.find(BaseIndex.java:148)
	at org.h2.index.IndexCursor.find(IndexCursor.java:163)
	at org.h2.table.TableFilter.next(TableFilter.java:498)
	at org.h2.command.dml.Select$LazyResultQueryFlat.fetchNextRow(Select.java:1843)
	at org.h2.result.LazyResult.hasNext(LazyResult.java:101)
	at org.h2.result.LazyResult.next(LazyResult.java:60)
	at org.h2.command.dml.Select.queryFlat(Select.java:737)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:844)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.command.CommandContainer.query(CommandContainer.java:285)
	at org.h2.command.Command.executeQuery(Command.java:195)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:343)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.NumberFormatException: For input string: "10/1"
	at java.lang.NumberFormatException.forInputString(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:169)
	at org.h2.util.DateTimeUtils.parseTimestamp(DateTimeUtils.java:316)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:134)
	... 38 more

### The error may exist in file [D:\BUS\dashboard\dashboard\target\classes\mapper\h3.xml]
### The error may involve com.pjy.dashboard.mapper.h2.h2Mapper3.select_TBM_EMP_POINT_INFO-Inline
### The error occurred while setting parameters
### SQL: SELECT k.*  FROM (   SELECT  ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq    , a.emp_nm    , b.sp_gb    , b.route_nm    , listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList    , listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList    , listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList    , sum(a.tot_point) AS tot_point    , nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay   FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm   WHERE a.company_no = '100'   AND   a.from_date = '2023-01-01'    AND  a.to_date = '2023-07-31'    AND  b.route_nm = decode('','',b.route_nm,'')    AND  b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')   GROUP BY a.emp_nm   ORDER BY 1  ) K  WHERE  k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')  AND  round(k.totWorkingDay/365,0) >= 0
### Cause: org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant "10/14/15"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0 [22007-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:136)
	at org.h2.value.Value.convertToTimestamp(Value.java:1169)
	at org.h2.value.Value.convertTo(Value.java:822)
	at org.h2.value.Value.convertTo(Value.java:737)
	at org.h2.util.DateTimeUtils.dateAndTimeFromValue(DateTimeUtils.java:510)
	at org.h2.expression.function.DateTimeFunctions.datediff(DateTimeFunctions.java:276)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1510)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1266)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.function.Function.getNullOrValue(Function.java:1249)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1273)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.Alias.getValue(Alias.java:37)
	at org.h2.command.dml.Select.constructGroupResultRow(Select.java:586)
	at org.h2.command.dml.Select.processGroupResult(Select.java:553)
	at org.h2.command.dml.Select.queryGroupWindow(Select.java:475)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:831)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.index.ViewIndex.find(ViewIndex.java:288)
	at org.h2.index.ViewIndex.find(ViewIndex.java:160)
	at org.h2.index.BaseIndex.find(BaseIndex.java:148)
	at org.h2.index.IndexCursor.find(IndexCursor.java:163)
	at org.h2.table.TableFilter.next(TableFilter.java:498)
	at org.h2.command.dml.Select$LazyResultQueryFlat.fetchNextRow(Select.java:1843)
	at org.h2.result.LazyResult.hasNext(LazyResult.java:101)
	at org.h2.result.LazyResult.next(LazyResult.java:60)
	at org.h2.command.dml.Select.queryFlat(Select.java:737)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:844)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.command.CommandContainer.query(CommandContainer.java:285)
	at org.h2.command.Command.executeQuery(Command.java:195)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:343)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.NumberFormatException: For input string: "10/1"
	at java.lang.NumberFormatException.forInputString(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:169)
	at org.h2.util.DateTimeUtils.parseTimestamp(DateTimeUtils.java:316)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:134)
	... 38 more

; Cannot parse "TIMESTAMP" constant "10/14/15"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0 [22007-200]; nested exception is org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant "10/14/15"; SQL statement:
SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0 [22007-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:136)
	at org.h2.value.Value.convertToTimestamp(Value.java:1169)
	at org.h2.value.Value.convertTo(Value.java:822)
	at org.h2.value.Value.convertTo(Value.java:737)
	at org.h2.util.DateTimeUtils.dateAndTimeFromValue(DateTimeUtils.java:510)
	at org.h2.expression.function.DateTimeFunctions.datediff(DateTimeFunctions.java:276)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1510)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1266)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.function.Function.getNullOrValue(Function.java:1249)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1273)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.Alias.getValue(Alias.java:37)
	at org.h2.command.dml.Select.constructGroupResultRow(Select.java:586)
	at org.h2.command.dml.Select.processGroupResult(Select.java:553)
	at org.h2.command.dml.Select.queryGroupWindow(Select.java:475)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:831)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.index.ViewIndex.find(ViewIndex.java:288)
	at org.h2.index.ViewIndex.find(ViewIndex.java:160)
	at org.h2.index.BaseIndex.find(BaseIndex.java:148)
	at org.h2.index.IndexCursor.find(IndexCursor.java:163)
	at org.h2.table.TableFilter.next(TableFilter.java:498)
	at org.h2.command.dml.Select$LazyResultQueryFlat.fetchNextRow(Select.java:1843)
	at org.h2.result.LazyResult.hasNext(LazyResult.java:101)
	at org.h2.result.LazyResult.next(LazyResult.java:60)
	at org.h2.command.dml.Select.queryFlat(Select.java:737)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:844)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.command.CommandContainer.query(CommandContainer.java:285)
	at org.h2.command.Command.executeQuery(Command.java:195)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:343)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.NumberFormatException: For input string: "10/1"
	at java.lang.NumberFormatException.forInputString(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:169)
	at org.h2.util.DateTimeUtils.parseTimestamp(DateTimeUtils.java:316)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:134)
	... 38 more

2023-07-10 09:34:59.561 WARN  [http-nio-10010-exec-7] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-07-10 09:36:56.339 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 09:36:56.340 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:36:56.362 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 22 msec}
2023-07-10 09:36:58.394 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a30867
2023-07-10 09:36:58.395 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:36:58.399 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 3 msec}
2023-07-10 09:36:58.430 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f462c312
2023-07-10 09:36:58.430 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 09:36:58.430 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 09:36:58.432 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 09:36:58.434 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 09:36:58.488 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@61699513
2023-07-10 09:36:58.489 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 0 msec}
2023-07-10 09:36:58.491 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:36:58.738 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('국수현','',k.emp_nm,'국수현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 245 msec}
2023-07-10 09:37:29.723 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:37:29.724 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 09:37:32.291 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 09:37:32.292 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:37:32.542 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 248 msec}
2023-07-10 09:38:28.434 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:38:28.435 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-10 09:38:28.456 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 09:38:28.547 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$1elx9gm1cYY765tU27caWu2WhTSc9hAg4atZ4k9DG4E48XotHnSOq
2023-07-10 09:38:28.800 WARN  [http-nio-10010-exec-6] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [160] milliseconds.
2023-07-10 09:38:28.802 INFO  [http-nio-10010-exec-6] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 09:38:32.619 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:38:32.620 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 09:38:34.439 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 09:38:34.441 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:38:34.662 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 219 msec}
2023-07-10 09:38:47.709 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad5c1bfe
2023-07-10 09:38:47.710 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:38:47.924 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 1
 {executed in 212 msec}
2023-07-10 09:38:58.860 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bc9ce181
2023-07-10 09:38:58.861 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:38:59.071 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 2
 {executed in 209 msec}
2023-07-10 09:39:08.257 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cbdda704
2023-07-10 09:39:08.258 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:39:08.488 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 3
 {executed in 229 msec}
2023-07-10 09:39:14.924 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2758ce77
2023-07-10 09:39:14.924 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 09:39:14.924 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 09:39:14.925 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:39:14.926 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 09:39:14.928 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 09:39:21.234 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ea5f320a
2023-07-10 09:39:21.237 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 09:39:21.444 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 5
 {executed in 205 msec}
2023-07-10 09:39:46.265 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1f6f4ac8
2023-07-10 09:39:46.266 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:39:46.504 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 10
 {executed in 235 msec}
2023-07-10 09:40:03.086 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 09:40:03.088 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:40:03.322 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 231 msec}
2023-07-10 09:40:26.726 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b7ec770f
2023-07-10 09:40:26.727 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 09:40:26.941 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('고정','ALL',b.sp_gb,'고정')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 212 msec}
2023-07-10 10:05:26.769 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b7ec770f
2023-07-10 10:05:26.771 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:05:27.031 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('고정','ALL',b.sp_gb,'고정')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 260 msec}
2023-07-10 10:07:17.792 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:07:17.794 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:07:17.824 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 28 msec}
2023-07-10 10:07:19.288 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@49da33b6
2023-07-10 10:07:19.289 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:07:19.293 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 3 msec}
2023-07-10 10:07:19.321 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4999ee61
2023-07-10 10:07:19.321 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:07:19.321 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:07:19.323 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:07:19.325 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:07:19.368 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b6a0c062
2023-07-10 10:07:19.369 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 1 msec}
2023-07-10 10:07:19.370 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:07:19.595 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('고상욱','',k.emp_nm,'고상욱')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 222 msec}
2023-07-10 10:07:35.876 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:07:35.877 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:07:35.878 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 10:07:37.088 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 10:07:37.089 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:07:37.091 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 1 msec}
2023-07-10 10:07:37.122 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 10:07:37.122 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:07:37.123 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:07:37.124 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:07:37.127 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:07:37.129 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:07:37.183 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc35a982
2023-07-10 10:07:37.184 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 1 msec}
2023-07-10 10:07:37.434 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 249 msec}
2023-07-10 10:11:24.161 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:11:24.162 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:11:24.164 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 10:11:24.971 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77cdf6f1
2023-07-10 10:11:24.972 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:11:24.976 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배'
	order by 1
 {executed in 2 msec}
2023-07-10 10:11:25.003 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@778db19c
2023-07-10 10:11:25.003 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:11:25.003 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:11:25.004 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:11:25.005 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:11:25.007 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 0 msec}
2023-07-10 10:11:25.049 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e494839d
2023-07-10 10:11:25.052 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
12. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경배'
 {executed in 0 msec}
2023-07-10 10:11:25.271 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김경배','',k.emp_nm,'김경배')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 221 msec}
2023-07-10 10:11:30.074 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@558a51f
2023-07-10 10:11:30.075 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:11:30.078 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영'
	order by 1
 {executed in 2 msec}
2023-07-10 10:11:30.101 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5185fca
2023-07-10 10:11:30.102 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:11:30.102 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김기영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:11:30.103 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김기영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:11:30.105 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김기영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:11:30.150 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@721f31cb
2023-07-10 10:11:30.151 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김기영'
 {executed in 1 msec}
2023-07-10 10:11:30.152 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:11:30.368 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김기영','',k.emp_nm,'김기영')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 214 msec}
2023-07-10 10:11:31.307 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d0d591e6
2023-07-10 10:11:31.308 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:11:31.311 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규'
	order by 1
 {executed in 2 msec}
2023-07-10 10:11:31.341 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d0954c91
2023-07-10 10:11:31.341 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:11:31.341 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김민규' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:11:31.343 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김민규' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:11:31.345 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김민규' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:11:31.400 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3d9c1e92
2023-07-10 10:11:31.403 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:11:31.404 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
12. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김민규'
 {executed in 0 msec}
2023-07-10 10:11:31.604 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김민규','',k.emp_nm,'김민규')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 202 msec}
2023-07-10 10:11:32.519 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2f400d5e
2023-07-10 10:11:32.521 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:11:32.525 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호'
	order by 1
 {executed in 2 msec}
2023-07-10 10:11:32.561 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2effc809
2023-07-10 10:11:32.561 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:11:32.562 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:11:32.563 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:11:32.565 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:11:32.567 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:11:32.619 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9c069a0a
2023-07-10 10:11:32.622 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
12. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김선호'
 {executed in 0 msec}
2023-07-10 10:11:32.875 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김선호','',k.emp_nm,'김선호')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 253 msec}
2023-07-10 10:11:34.278 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@43f8a6f7
2023-07-10 10:11:34.279 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:11:34.282 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영'
	order by 1
 {executed in 2 msec}
2023-07-10 10:11:34.307 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@43b861a2
2023-07-10 10:11:34.308 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:11:34.308 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:11:34.309 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:11:34.310 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:11:34.312 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:11:34.353 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0bf33a3
2023-07-10 10:11:34.354 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '구진영'
 {executed in 0 msec}
2023-07-10 10:11:34.568 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('구진영','',k.emp_nm,'구진영')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 213 msec}
2023-07-10 10:11:35.578 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@49da33b6
2023-07-10 10:11:35.579 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:11:35.582 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 2 msec}
2023-07-10 10:11:35.607 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4999ee61
2023-07-10 10:11:35.607 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:11:35.608 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:11:35.609 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:11:35.610 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:11:35.612 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:11:35.653 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b6a0c062
2023-07-10 10:11:35.655 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 0 msec}
2023-07-10 10:11:35.870 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('고상욱','',k.emp_nm,'고상욱')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 215 msec}
2023-07-10 10:11:54.191 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:11:54.192 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:11:54.213 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 21 msec}
2023-07-10 10:11:55.217 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 10:11:55.218 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:11:55.221 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 2 msec}
2023-07-10 10:11:55.248 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 10:11:55.248 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:11:55.248 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:11:55.251 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:11:55.253 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:11:55.297 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc35a982
2023-07-10 10:11:55.298 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:11:55.298 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 0 msec}
2023-07-10 10:11:55.522 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 223 msec}
2023-07-10 10:12:16.284 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:12:16.285 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:12:16.310 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 25 msec}
2023-07-10 10:12:17.114 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ebb914f9
2023-07-10 10:12:17.116 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:12:17.120 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 1 msec}
2023-07-10 10:12:17.147 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb78cfa4
2023-07-10 10:12:17.148 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:12:17.148 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:12:17.149 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:12:17.150 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:12:17.152 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:12:17.195 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@587fa1a5
2023-07-10 10:12:17.199 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 1 msec}
2023-07-10 10:12:17.431 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 235 msec}
2023-07-10 10:12:35.654 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:12:35.655 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:12:35.656 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 10:12:36.485 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ebb914f9
2023-07-10 10:12:36.486 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:12:36.488 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 1 msec}
2023-07-10 10:12:36.498 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:12:36.499 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
12. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 1 msec}
2023-07-10 10:12:36.517 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb78cfa4
2023-07-10 10:12:36.517 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:12:36.518 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:12:36.520 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:12:36.522 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:12:36.565 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@587fa1a5
2023-07-10 10:12:36.792 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 226 msec}
2023-07-10 10:12:53.834 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:12:53.836 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:12:53.837 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 10:12:54.756 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77cdf6f1
2023-07-10 10:12:54.757 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:12:54.760 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배'
	order by 1
 {executed in 2 msec}
2023-07-10 10:12:54.789 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@778db19c
2023-07-10 10:12:54.789 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:12:54.789 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:12:54.790 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:12:54.792 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:12:54.837 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e494839d
2023-07-10 10:12:54.839 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:12:54.839 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
12. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경배'
 {executed in 0 msec}
2023-07-10 10:12:55.048 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김경배','',k.emp_nm,'김경배')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 208 msec}
2023-07-10 10:12:56.855 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de6bc812
2023-07-10 10:12:56.856 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:12:56.859 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호'
	order by 1
 {executed in 2 msec}
2023-07-10 10:12:56.886 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de2b82bd
2023-07-10 10:12:56.886 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:12:56.886 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:12:56.888 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:12:56.890 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:12:56.945 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4b3254be
2023-07-10 10:12:56.947 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:12:56.948 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김권호'
 {executed in 1 msec}
2023-07-10 10:12:57.165 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김권호','',k.emp_nm,'김권호')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 217 msec}
2023-07-10 10:12:58.305 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1249f292
2023-07-10 10:12:58.306 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:12:58.309 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 2 msec}
2023-07-10 10:12:58.338 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1209ad3d
2023-07-10 10:12:58.339 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:12:58.339 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:12:58.341 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:12:58.343 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:12:58.393 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7f107f3e
2023-07-10 10:12:58.395 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:12:58.396 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권오현'
 {executed in 0 msec}
2023-07-10 10:12:58.630 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 234 msec}
2023-07-10 10:12:59.551 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a30867
2023-07-10 10:12:59.552 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:12:59.557 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 2 msec}
2023-07-10 10:12:59.583 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f462c312
2023-07-10 10:12:59.583 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:12:59.583 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:12:59.584 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:12:59.586 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:12:59.587 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:12:59.635 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@61699513
2023-07-10 10:12:59.637 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
12. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 0 msec}
2023-07-10 10:12:59.901 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('국수현','',k.emp_nm,'국수현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 264 msec}
2023-07-10 10:13:08.264 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:13:08.265 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:13:08.266 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 10:13:09.505 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a30867
2023-07-10 10:13:09.506 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:13:09.508 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 1 msec}
2023-07-10 10:13:09.517 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
12. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 0 msec}
2023-07-10 10:13:09.536 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f462c312
2023-07-10 10:13:09.536 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:13:09.537 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:13:09.538 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:13:09.540 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:13:09.587 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@61699513
2023-07-10 10:13:09.588 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:13:09.815 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('국수현','',k.emp_nm,'국수현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 225 msec}
2023-07-10 10:13:41.232 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:13:41.234 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:13:41.235 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 10:13:42.538 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2a0af2da
2023-07-10 10:13:42.539 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:13:42.541 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 1 msec}
2023-07-10 10:13:42.568 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@29caad85
2023-07-10 10:13:42.568 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:13:42.569 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:13:42.570 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:13:42.571 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:13:42.573 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:13:42.615 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96d17f86
2023-07-10 10:13:42.617 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
12. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 1 msec}
2023-07-10 10:13:42.833 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 217 msec}
2023-07-10 10:13:43.638 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 10:13:43.639 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:13:43.643 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 3 msec}
2023-07-10 10:13:43.668 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 10:13:43.668 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:13:43.668 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:13:43.670 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:13:43.671 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:13:43.719 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc35a982
2023-07-10 10:13:43.719 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:13:43.720 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
12. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 1 msec}
2023-07-10 10:13:43.938 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 218 msec}
2023-07-10 10:13:56.796 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:13:56.797 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:13:56.817 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 20 msec}
2023-07-10 10:13:58.003 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 10:13:58.004 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:13:58.007 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 1 msec}
2023-07-10 10:13:58.016 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
12. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 0 msec}
2023-07-10 10:13:58.035 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 10:13:58.035 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:13:58.035 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:13:58.037 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:13:58.038 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:13:58.078 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc35a982
2023-07-10 10:13:58.310 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 231 msec}
2023-07-10 10:14:16.887 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:14:16.888 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:14:16.908 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 10:14:17.903 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 10:14:17.904 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:14:17.906 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
19. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 2 msec}
2023-07-10 10:14:17.916 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
19. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 0 msec}
2023-07-10 10:14:17.936 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 10:14:17.937 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:14:17.937 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:14:17.938 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:14:17.940 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:14:17.987 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc35a982
2023-07-10 10:14:18.190 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
19. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 200 msec}
2023-07-10 10:14:56.150 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:14:56.152 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:14:56.171 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 10:14:57.643 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 10:14:57.644 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:14:57.647 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 2 msec}
2023-07-10 10:14:57.657 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 1 msec}
2023-07-10 10:14:57.678 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 10:14:57.678 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:14:57.678 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:14:57.680 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:14:57.681 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:14:57.725 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc35a982
2023-07-10 10:14:57.936 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 210 msec}
2023-07-10 10:15:40.945 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:15:40.945 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:15:40.946 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 10:15:42.131 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 10:15:42.133 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:15:42.140 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 2 msec}
2023-07-10 10:15:42.150 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 0 msec}
2023-07-10 10:15:42.169 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 10:15:42.169 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:15:42.169 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:15:42.172 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:15:42.174 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:15:42.215 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc35a982
2023-07-10 10:15:42.428 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 212 msec}
2023-07-10 10:17:30.049 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:17:30.050 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:17:30.051 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 10:17:30.892 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 10:17:30.893 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:17:30.896 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 2 msec}
2023-07-10 10:17:30.906 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 0 msec}
2023-07-10 10:17:30.928 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 10:17:30.928 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:17:30.929 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:17:30.930 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:17:30.932 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:17:30.970 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc35a982
2023-07-10 10:17:31.188 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 216 msec}
2023-07-10 10:17:50.252 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@21a33b5d
2023-07-10 10:17:50.253 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:17:50.256 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현'
	order by 1
 {executed in 2 msec}
2023-07-10 10:17:50.294 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2162f608
2023-07-10 10:17:50.294 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:17:50.294 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김명현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:17:50.297 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김명현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:17:50.299 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김명현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:17:50.381 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8e69c809
2023-07-10 10:17:50.382 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김명현'
 {executed in 0 msec}
2023-07-10 10:17:50.382 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:17:50.642 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김명현','',k.emp_nm,'김명현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 257 msec}
2023-07-10 10:17:56.096 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5879c27d
2023-07-10 10:17:56.097 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:17:56.099 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상신'
	order by 1
 {executed in 2 msec}
2023-07-10 10:17:56.124 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@58397d28
2023-07-10 10:17:56.124 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:17:56.124 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상신' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:17:56.127 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상신' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:17:56.129 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상신' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:17:56.181 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5404f29
2023-07-10 10:17:56.183 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:17:56.184 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김상신'
 {executed in 0 msec}
2023-07-10 10:17:56.411 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김상신','',k.emp_nm,'김상신')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 229 msec}
2023-07-10 10:17:58.274 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c7f66dd5
2023-07-10 10:17:58.275 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:17:58.278 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취'
	order by 1
 {executed in 2 msec}
2023-07-10 10:17:58.302 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c7b62880
2023-07-10 10:17:58.302 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:17:58.302 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:17:58.304 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:17:58.306 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김성취' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:17:58.350 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@34bcfa81
2023-07-10 10:17:58.351 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:17:58.353 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김성취'
 {executed in 0 msec}
2023-07-10 10:17:58.563 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김성취','',k.emp_nm,'김성취')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 212 msec}
2023-07-10 10:18:46.151 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:18:46.152 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:18:46.168 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 15 msec}
2023-07-10 10:18:47.506 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 10:18:47.507 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:18:47.510 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 1 msec}
2023-07-10 10:18:47.535 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 10:18:47.536 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:18:47.536 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:18:47.537 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:18:47.539 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:18:47.540 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:18:47.584 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc35a982
2023-07-10 10:18:47.588 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 1 msec}
2023-07-10 10:18:47.805 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 219 msec}
2023-07-10 10:19:07.562 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7ab0feb1
2023-07-10 10:19:07.563 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:19:07.566 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연'
	order by 1
 {executed in 2 msec}
2023-07-10 10:19:07.592 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7a70b95c
2023-07-10 10:19:07.592 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:19:07.592 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경연' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:19:07.594 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경연' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:19:07.595 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경연' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:19:07.647 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e7778b5d
2023-07-10 10:19:07.651 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 10:19:07.652 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경연'
 {executed in 0 msec}
2023-07-10 10:19:07.872 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김경연','',k.emp_nm,'김경연')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 222 msec}
2023-07-10 10:19:08.899 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:19:08.900 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:19:08.919 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 18 msec}
2023-07-10 10:19:09.906 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2a0af2da
2023-07-10 10:19:09.907 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:19:09.910 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 1 msec}
2023-07-10 10:19:09.938 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@29caad85
2023-07-10 10:19:09.938 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:19:09.938 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:19:09.939 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:19:09.941 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:19:09.942 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 0 msec}
2023-07-10 10:19:09.983 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96d17f86
2023-07-10 10:19:09.984 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 1 msec}
2023-07-10 10:19:10.196 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 211 msec}
2023-07-10 10:19:12.308 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@558a51f
2023-07-10 10:19:12.309 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:19:12.312 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영'
	order by 1
 {executed in 3 msec}
2023-07-10 10:19:12.338 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5185fca
2023-07-10 10:19:12.338 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:19:12.338 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김기영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:19:12.340 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김기영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:19:12.341 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김기영' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:19:12.381 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@721f31cb
2023-07-10 10:19:12.382 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:19:12.386 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김기영'
 {executed in 0 msec}
2023-07-10 10:19:12.603 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김기영','',k.emp_nm,'김기영')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 216 msec}
2023-07-10 10:19:13.355 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4e670f87
2023-07-10 10:19:13.356 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:19:13.359 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성'
	order by 1
 {executed in 1 msec}
2023-07-10 10:19:13.383 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4e26ca32
2023-07-10 10:19:13.383 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:19:13.383 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:19:13.384 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:19:13.386 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:19:13.388 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 0 msec}
2023-07-10 10:19:13.442 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bb2d9c33
2023-07-10 10:19:13.443 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김문성'
 {executed in 0 msec}
2023-07-10 10:19:13.658 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김문성','',k.emp_nm,'김문성')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 215 msec}
2023-07-10 10:19:14.961 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2f400d5e
2023-07-10 10:19:14.961 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:19:14.964 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호'
	order by 1
 {executed in 2 msec}
2023-07-10 10:19:14.996 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2effc809
2023-07-10 10:19:14.996 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:19:14.997 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:19:14.997 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:19:14.999 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:19:15.001 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:19:15.044 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9c069a0a
2023-07-10 10:19:15.047 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김선호'
 {executed in 0 msec}
2023-07-10 10:19:15.269 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김선호','',k.emp_nm,'김선호')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 224 msec}
2023-07-10 10:19:32.350 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:19:32.351 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:19:32.377 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 26 msec}
2023-07-10 10:19:34.166 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@70ebdbfe
2023-07-10 10:19:34.167 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:19:34.170 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근'
	order by 1
 {executed in 2 msec}
2023-07-10 10:19:34.196 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@70ab96a9
2023-07-10 10:19:34.196 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:19:34.196 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김도근' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:19:34.197 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:19:34.199 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김도근' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:19:34.200 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김도근' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:19:34.240 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ddb268aa
2023-07-10 10:19:34.240 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김도근'
 {executed in 0 msec}
2023-07-10 10:19:34.450 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김도근','',k.emp_nm,'김도근')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 208 msec}
2023-07-10 10:19:35.761 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3327d6da
2023-07-10 10:19:35.762 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:19:35.765 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕'
	order by 1
 {executed in 2 msec}
2023-07-10 10:19:35.789 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@32e79185
2023-07-10 10:19:35.789 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:19:35.789 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상덕' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:19:35.790 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:19:35.792 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상덕' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:19:35.793 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김상덕' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:19:35.848 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9fee6386
2023-07-10 10:19:35.852 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김상덕'
 {executed in 1 msec}
2023-07-10 10:19:36.067 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김상덕','',k.emp_nm,'김상덕')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 216 msec}
2023-07-10 10:19:38.159 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 10:19:38.160 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:19:38.162 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 1 msec}
2023-07-10 10:19:38.187 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 10:19:38.187 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:19:38.188 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:19:38.189 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:19:38.191 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:19:38.239 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc35a982
2023-07-10 10:19:38.242 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:19:38.244 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 0 msec}
2023-07-10 10:19:38.461 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 220 msec}
2023-07-10 10:21:09.928 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:21:09.930 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:21:09.931 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 10:21:11.523 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2a0af2da
2023-07-10 10:21:11.524 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:21:11.527 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 1 msec}
2023-07-10 10:21:11.553 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@29caad85
2023-07-10 10:21:11.553 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:21:11.553 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:21:11.555 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:21:11.557 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:21:11.601 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96d17f86
2023-07-10 10:21:11.603 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:21:11.604 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 0 msec}
2023-07-10 10:21:11.826 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 223 msec}
2023-07-10 10:21:40.548 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:21:40.549 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:21:40.572 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 23 msec}
2023-07-10 10:21:41.414 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2a0af2da
2023-07-10 10:21:41.415 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:21:41.417 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 2 msec}
2023-07-10 10:21:41.425 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:21:41.427 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 0 msec}
2023-07-10 10:21:41.448 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@29caad85
2023-07-10 10:21:41.448 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:21:41.448 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:21:41.449 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:21:41.451 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:21:41.493 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96d17f86
2023-07-10 10:21:41.711 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 217 msec}
2023-07-10 10:21:59.422 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:21:59.423 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:21:59.424 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 10:22:01.046 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2a0af2da
2023-07-10 10:22:01.047 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:22:01.049 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 2 msec}
2023-07-10 10:22:01.058 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:22:01.059 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 0 msec}
2023-07-10 10:22:01.083 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@29caad85
2023-07-10 10:22:01.083 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:22:01.083 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:22:01.085 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:22:01.086 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:22:01.138 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96d17f86
2023-07-10 10:22:01.342 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 202 msec}
2023-07-10 10:58:54.819 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:58:54.820 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:58:54.842 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 21 msec}
2023-07-10 10:58:58.621 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ddfba63d
2023-07-10 10:58:58.622 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:58:58.625 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 2 msec}
2023-07-10 10:58:58.658 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ddbb60e8
2023-07-10 10:58:58.658 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:58:58.658 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-02' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:58:58.660 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-02' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:58:58.662 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-02' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 10:58:58.722 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9b6ba7b3
2023-07-10 10:58:58.725 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-02-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 0 msec}
2023-07-10 10:58:58.728 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권오현'
 {executed in 0 msec}
2023-07-10 10:59:32.338 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:59:32.339 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:59:32.341 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 10:59:36.013 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 10:59:36.014 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:59:36.017 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 10:59:38.221 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5b20d081
2023-07-10 10:59:38.222 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 10:59:38.225 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 1 msec}
2023-07-10 10:59:38.258 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ae08b2c
2023-07-10 10:59:38.258 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 10:59:38.258 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-02' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 10:59:38.261 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-02' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:59:38.263 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-02' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 10:59:38.309 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1890d1f7
2023-07-10 10:59:38.311 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 10:59:38.311 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-02-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 0 msec}
2023-07-10 10:59:38.313 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
43. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 1 msec}
2023-07-10 11:49:45.465 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-10 11:49:45.465 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-10 11:49:45.466 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-10 11:49:45.466 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-10 11:58:17.957 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 11:58:17.957 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 11:58:17.957 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 11:58:17.957 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 11:58:17.957 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 11:58:19.474 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 11:58:19.475 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
72. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-10 11:58:19.476 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 11:58:19.576 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$01iV0l/LumDUOL.pFwlt3eTg9TsflTw6ECx/SKKFiPdLHMGjQHFjq
2023-07-10 11:58:19.671 INFO  [http-nio-10010-exec-1] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 11:58:23.208 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 11:58:23.209 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 11:58:23.229 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 11:58:28.007 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 11:58:28.008 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 11:58:28.009 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 11:58:30.751 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b76ac8a4
2023-07-10 11:58:30.752 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 11:58:30.755 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
72. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 2 msec}
2023-07-10 11:58:30.788 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b72a834f
2023-07-10 11:58:30.788 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 11:58:30.788 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-02' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 11:58:30.790 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-02' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 11:58:30.792 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-02' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 11:58:30.839 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@74daca1a
2023-07-10 11:58:30.841 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 11:58:30.841 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
72. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-02-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 1 msec}
2023-07-10 11:58:30.842 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
73. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 1 msec}
2023-07-10 11:59:50.654 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 11:59:50.655 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 11:59:50.656 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 12:00:52.277 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 12:00:52.278 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:00:52.279 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 12:01:17.338 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:01:17.339 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
72. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-10 12:01:17.340 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 12:01:17.436 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$RYora7SODq/MSWY3lffNO.xxWSWVjThKEyyMFqJK.xSMqguGgaFom
2023-07-10 12:01:17.526 INFO  [http-nio-10010-exec-6] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 12:01:19.170 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:01:19.171 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 12:02:02.201 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 12:02:02.201 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:02:02.203 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 12:02:10.791 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 12:02:10.791 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:02:10.792 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 12:04:17.826 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 12:04:17.828 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:04:17.830 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 12:04:59.436 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 12:04:59.438 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:04:59.439 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 12:05:02.222 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:05:02.227 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
72. DELETE TBM_EMP_POINT_INFO a
	WHERE 	a.COMPANY_NO =  '100'
	AND 	a.from_date = '2023-01' 
	AND 	a.to_date = '2023-07'
 {executed in 4 msec}
2023-07-10 12:05:05.996 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
72. WITH codeInfo AS (
		SELECT 	b.emp_nm,a.* FROM TBM_COMMON_CODE_INFO a,TBL_EMPLOYEEINFO b
		WHERE 	a.COMPANY_NO = '100' 
		AND 	a.CODE_GB  = '인사평가배점'
		AND 	a.COMPANY_NO = b.company_no
	), workingInfo AS (
		SELECT 	a.EMP_NM ,a.code_type1
			, 	count(a.WORK_DATE ) AS point
		FROM 	TBM_EMP_WORKING_LOG a JOIN TBM_COMMON_CODE_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.code_type1 = b.code_nm AND b.code_gb = '인사평가배점' AND b.code_id LIKE '2%'
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.WORK_DATE BETWEEN '2023-01' AND '2023-07' 
		GROUP BY a.EMP_NM , a.code_type1
		UNION
		SELECT 	a.EMP_NM ,'사고'
			, 	count(a.acc_DATE ) 
		FROM 	TBM_ACCIDENT_INFO a 
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.acc_DATE BETWEEN '2023-01' AND '2023-07' 
		GROUP BY a.EMP_NM
		UNION
		SELECT 	a.EMP_NM ,'사고금액'
			, 	round(sum(a.OUT_TOT_AMT) / 1000000,0)
		FROM 	TBM_ACCIDENT_INFO a 
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.acc_DATE BETWEEN '2023-01' AND '2023-07' 
		GROUP BY a.EMP_NM
		UNION 
		select  a.EMP_NM ,'배차정시성'
			,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 10.0,1) AS wibanRate
		from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
		where   a.company_no = '100' 
		AND 	a.BASE_YMD BETWEEN  '2023-01' AND '2023-07' 
		AND 	a.emp_nm <> '-'
		GROUP BY  a.EMP_NM 
		UNION 
		SELECT	b.emp_nm,'위험운전지수'
			,	round(avg(decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)) ,1) AS danger_level_no 
		FROM	TBL_DANGER_DRIVING_INFO b
		WHERE	b.company_no = '100'
		AND 	b.base_ym BETWEEN substring('2023-01',1,7) AND substring('2023-07',1,7) 
		GROUP BY b.EMP_NM 	
		UNION 
		SELECT 	m.emp_nm,'운행횟수'
			,	round(PERCENT_RANK() OVER (ORDER BY m.work_Avg) * 10,1) AS workRate
		FROM (
			SELECT k.emp_nm, avg(k.work_cnt) AS work_avg
			FROM (
				SELECT  a.EMP_NM 
						,substring(a.work_date,1,7) AS work_ym
						,count(a.work_Date) AS work_cnt
				FROM TBB_DRIVING_RECORD_DAY a
				WHERE a.COMPANY_NO ='100'
				AND 	a.work_date BETWEEN  '2023-01' AND '2023-07' 
				GROUP BY a.EMP_NM ,substring(a.work_date,1,7)
			)k
			GROUP BY k.emp_nm
		) m
	) 
	INSERT INTO TBM_EMP_POINT_INFO
	SELECT 	a.COMPANY_NO 
		,	'2023-01'
		,	'2023-07' 
		,	a.emp_nm
		,	a.code_gb
		,	a.CODE_ID 
		,	a.code_nm
		, 	a.MEMO 
		,	a.CODE_VALUE 
		,	a.code_max
		,	a.code_min
		,	nvl(b.point,0) AS point
		, 	a.code_value + (nvl(b.point,0) * a.code_min ) AS tot_point
		,	'batch'
		,	to_char(SYSDATE,'yyyy-MM-dd hh:mi:ss')
	FROM  codeInfo a LEFT OUTER JOIN workingInfo b ON  a.emp_nm = b.emp_nm and a.code_nm = b.CODE_TYPE1
 {executed in 3762 msec}
2023-07-10 12:06:28.473 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:06:28.474 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
72. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-10 12:06:28.475 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 12:06:28.570 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$RFnpmlIF5IzzERINShWu9eLo/8u9I.0Aci6ujTzB0nTsBWgWN2day
2023-07-10 12:06:28.664 INFO  [http-nio-10010-exec-7] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 12:06:31.040 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 12:06:31.041 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:06:31.064 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 23 msec}
2023-07-10 12:06:32.408 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:06:32.442 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
72. DELETE TBM_EMP_POINT_INFO a
	WHERE 	a.COMPANY_NO =  '100'
	AND 	a.from_date = '2023-01' 
	AND 	a.to_date = '2023-07'
 {executed in 33 msec}
2023-07-10 12:06:36.287 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
72. WITH codeInfo AS (
		SELECT 	b.emp_nm,a.* FROM TBM_COMMON_CODE_INFO a,TBL_EMPLOYEEINFO b
		WHERE 	a.COMPANY_NO = '100' 
		AND 	a.CODE_GB  = '인사평가배점'
		AND 	a.COMPANY_NO = b.company_no
	), workingInfo AS (
		SELECT 	a.EMP_NM ,a.code_type1
			, 	count(a.WORK_DATE ) AS point
		FROM 	TBM_EMP_WORKING_LOG a JOIN TBM_COMMON_CODE_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.code_type1 = b.code_nm AND b.code_gb = '인사평가배점' AND b.code_id LIKE '2%'
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.WORK_DATE BETWEEN '2023-01' AND '2023-07' 
		GROUP BY a.EMP_NM , a.code_type1
		UNION
		SELECT 	a.EMP_NM ,'사고'
			, 	count(a.acc_DATE ) 
		FROM 	TBM_ACCIDENT_INFO a 
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.acc_DATE BETWEEN '2023-01' AND '2023-07' 
		GROUP BY a.EMP_NM
		UNION
		SELECT 	a.EMP_NM ,'사고금액'
			, 	round(sum(a.OUT_TOT_AMT) / 1000000,0)
		FROM 	TBM_ACCIDENT_INFO a 
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.acc_DATE BETWEEN '2023-01' AND '2023-07' 
		GROUP BY a.EMP_NM
		UNION 
		select  a.EMP_NM ,'배차정시성'
			,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 10.0,1) AS wibanRate
		from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
		where   a.company_no = '100' 
		AND 	a.BASE_YMD BETWEEN  '2023-01' AND '2023-07' 
		AND 	a.emp_nm <> '-'
		GROUP BY  a.EMP_NM 
		UNION 
		SELECT	b.emp_nm,'위험운전지수'
			,	round(avg(decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)) ,1) AS danger_level_no 
		FROM	TBL_DANGER_DRIVING_INFO b
		WHERE	b.company_no = '100'
		AND 	b.base_ym BETWEEN substring('2023-01',1,7) AND substring('2023-07',1,7) 
		GROUP BY b.EMP_NM 	
		UNION 
		SELECT 	m.emp_nm,'운행횟수'
			,	round(PERCENT_RANK() OVER (ORDER BY m.work_Avg) * 10,1) AS workRate
		FROM (
			SELECT k.emp_nm, avg(k.work_cnt) AS work_avg
			FROM (
				SELECT  a.EMP_NM 
						,substring(a.work_date,1,7) AS work_ym
						,count(a.work_Date) AS work_cnt
				FROM TBB_DRIVING_RECORD_DAY a
				WHERE a.COMPANY_NO ='100'
				AND 	a.work_date BETWEEN  '2023-01' AND '2023-07' 
				GROUP BY a.EMP_NM ,substring(a.work_date,1,7)
			)k
			GROUP BY k.emp_nm
		) m
	) 
	INSERT INTO TBM_EMP_POINT_INFO
	SELECT 	a.COMPANY_NO 
		,	'2023-01'
		,	'2023-07' 
		,	a.emp_nm
		,	a.code_gb
		,	a.CODE_ID 
		,	a.code_nm
		, 	a.MEMO 
		,	a.CODE_VALUE 
		,	a.code_max
		,	a.code_min
		,	nvl(b.point,0) AS point
		, 	a.code_value + (nvl(b.point,0) * a.code_min ) AS tot_point
		,	'batch'
		,	to_char(SYSDATE,'yyyy-MM-dd hh:mi:ss')
	FROM  codeInfo a LEFT OUTER JOIN workingInfo b ON  a.emp_nm = b.emp_nm and a.code_nm = b.CODE_TYPE1
 {executed in 3842 msec}
2023-07-10 12:06:40.145 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b4a04f22
2023-07-10 12:06:40.147 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:06:40.151 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
72. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 3 msec}
2023-07-10 12:06:40.190 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb78cfa4
2023-07-10 12:06:40.190 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 12:06:40.190 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 12:06:40.193 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 3 msec}
2023-07-10 12:06:40.194 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 12:06:40.247 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@587fa1a5
2023-07-10 12:06:40.250 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:06:40.251 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
73. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 0 msec}
2023-07-10 12:06:40.472 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
72. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 224 msec}
2023-07-10 12:06:48.317 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 12:06:48.318 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:06:48.338 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 12:06:49.631 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ebb914f9
2023-07-10 12:06:49.632 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:06:49.635 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
72. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 2 msec}
2023-07-10 12:06:49.645 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
72. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 0 msec}
2023-07-10 12:06:49.666 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb78cfa4
2023-07-10 12:06:49.666 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 12:06:49.666 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 12:06:49.667 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:06:49.670 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 12:06:49.673 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 12:06:49.716 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@587fa1a5
2023-07-10 12:06:49.931 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
72. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 215 msec}
2023-07-10 12:15:16.929 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 12:15:16.930 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:15:17.142 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
82. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 211 msec}
2023-07-10 12:15:20.970 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:15:20.971 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 12:15:22.482 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 12:15:22.483 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:15:22.702 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
82. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 219 msec}
2023-07-10 12:18:05.038 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:18:05.039 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 12:18:06.138 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 12:18:06.138 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:18:06.351 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
82. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 212 msec}
2023-07-10 12:19:35.691 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:19:35.692 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 12:19:37.078 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 12:19:37.079 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:19:37.308 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
82. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 229 msec}
2023-07-10 12:27:58.373 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:27:58.374 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 12:27:59.634 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 12:27:59.635 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:27:59.907 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
82. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 271 msec}
2023-07-10 12:28:54.623 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2758ce77
2023-07-10 12:28:54.623 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 12:28:54.623 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 12:28:54.624 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:28:54.625 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 12:28:54.627 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 12:31:34.097 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 12:31:34.099 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:31:34.316 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
82. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 216 msec}
2023-07-10 12:31:46.878 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:31:46.879 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 12:31:49.124 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 12:31:49.125 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:31:49.334 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 208 msec}
2023-07-10 12:42:08.048 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:42:08.049 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 12:42:11.625 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 12:42:11.626 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:42:11.849 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
92. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 220 msec}
2023-07-10 12:42:55.731 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:42:55.731 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 12:42:57.621 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 12:42:57.622 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:42:57.643 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 21 msec}
2023-07-10 12:49:10.818 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:49:10.819 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 12:50:59.374 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 12:50:59.375 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:50:59.581 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
92. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 206 msec}
2023-07-10 12:52:46.835 INFO  [RMI TCP Connection(210)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-10 12:52:46.871 INFO  [RMI TCP Connection(210)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-10 12:52:46.874 INFO  [RMI TCP Connection(210)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-10 12:52:46.880 INFO  [RMI TCP Connection(210)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-10 12:52:46.946 INFO  [RMI TCP Connection(210)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-10 12:53:05.644 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 16732 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-10 12:53:05.650 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-10 12:53:05.707 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-10 12:53:05.707 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-10 12:53:07.002 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 12:53:07.002 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-10 12:53:07.155 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 140ms. Found 3 JPA repository interfaces.
2023-07-10 12:53:07.503 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 12:53:07.503 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-10 12:53:07.557 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 12:53:07.558 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 12:53:07.559 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 12:53:07.559 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 56ms. Found 0 JDBC repository interfaces.
2023-07-10 12:53:08.002 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-10 12:53:08.072 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-10 12:53:08.073 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 12:53:08.073 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 12:53:08.073 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 12:53:08.074 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 12:53:08.074 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-10 12:53:08.074 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-10 12:53:08.074 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 12:53:08.074 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 12:53:08.075 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 12:53:08.075 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 12:53:08.075 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 12:53:08.139 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$960bc03c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 12:53:08.192 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-10 12:53:08.282 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$80022469] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 12:53:08.366 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 12:53:08.368 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@340cb8e2' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 12:53:08.374 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$a4d6c71b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 12:53:08.384 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$ca2bdf31] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 12:53:08.389 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 12:53:08.390 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 12:53:08.410 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$e7545c2f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 12:53:08.440 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$66d4a961] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 12:53:08.583 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-10 12:53:08.588 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-10 12:53:09.011 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-10 12:53:09.031 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-10 12:53:09.045 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-10 12:53:09.045 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-10 12:53:09.447 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-10 12:53:09.460 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-10 12:53:09.460 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3753 ms
2023-07-10 12:53:10.335 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@26addbea with name: jasyptStringEncryptor
2023-07-10 12:53:10.389 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-10 12:53:10.473 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 6 msec}
2023-07-10 12:53:10.478 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-10 12:53:11.289 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-10 12:53:11.665 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-10 12:53:11.739 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-10 12:53:11.741 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-10 12:53:11.900 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-10 12:53:12.156 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:53:12.174 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-10 12:53:12.897 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:53:12.900 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-10 12:53:12.954 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-10 12:53:13.203 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-10 12:53:14.288 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-10 12:53:14.302 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-10 12:53:14.493 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-10 12:53:14.494 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-10 12:53:14.494 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-10 12:53:14.494 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-10 12:53:14.494 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-10 12:53:14.494 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-10 12:53:14.494 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-10 12:53:14.494 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-10 12:53:14.494 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-10 12:53:14.659 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1ce17e6b, org.springframework.security.web.context.SecurityContextPersistenceFilter@1e1897ce, org.springframework.security.web.header.HeaderWriterFilter@f67594d, org.springframework.web.filter.CorsFilter@2abca912, org.springframework.security.web.authentication.logout.LogoutFilter@6c84da0c, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1f658240, org.springframework.security.web.session.ConcurrentSessionFilter@3006acf5, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@46b9fe55, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@48fedf69, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3e5ab442, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3ba77939, org.springframework.security.web.session.SessionManagementFilter@18441c36, org.springframework.security.web.access.ExceptionTranslationFilter@b150213, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5fef6910]
2023-07-10 12:53:14.681 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-10 12:53:15.046 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-10 12:53:15.167 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-10 12:53:15.604 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:53:16.410 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-10 12:53:16.441 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-10 12:53:16.579 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-10 12:53:16.586 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-10 12:53:16.645 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-10 12:53:16.652 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.5 seconds (JVM running for 13.07)
2023-07-10 12:53:16.653 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 12:53:16.653 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-10 12:53:16.653 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 12:53:17.573 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-10 12:53:17.574 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-10 12:53:17.596 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 22 ms
2023-07-10 12:54:00.164 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:54:00.165 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 12:54:01.139 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 12:54:01.199 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:54:01.432 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 222 msec}
2023-07-10 12:55:36.826 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 12:55:36.828 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 12:55:37.951 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 12:55:37.952 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 12:55:38.176 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 223 msec}
2023-07-10 12:57:06.743 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2758ce77
2023-07-10 12:57:06.743 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 12:57:06.744 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 12:57:06.748 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 12:57:06.749 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 12:57:06.750 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 13:11:32.193 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 13:11:32.195 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 13:11:33.647 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 13:11:33.648 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 13:11:33.860 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 211 msec}
2023-07-10 13:13:13.969 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 13:13:13.970 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 13:13:14.922 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 13:13:14.924 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 13:13:15.151 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 226 msec}
2023-07-10 13:45:09.591 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 34380 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-10 13:45:09.595 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-10 13:45:09.651 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-10 13:45:09.651 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-10 13:45:10.869 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 13:45:10.869 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-10 13:45:11.025 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 146ms. Found 3 JPA repository interfaces.
2023-07-10 13:45:11.380 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 13:45:11.380 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-10 13:45:11.427 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 13:45:11.427 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 13:45:11.428 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 13:45:11.428 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 48ms. Found 0 JDBC repository interfaces.
2023-07-10 13:45:11.891 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-10 13:45:11.958 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-10 13:45:11.958 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 13:45:11.958 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 13:45:11.958 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 13:45:11.959 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 13:45:11.959 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-10 13:45:11.959 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-10 13:45:11.959 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 13:45:11.959 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 13:45:11.960 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 13:45:11.960 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 13:45:11.960 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 13:45:12.028 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$f468e86b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 13:45:12.081 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-10 13:45:12.173 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$de5f4c98] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 13:45:12.260 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 13:45:12.263 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@2f63e113' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 13:45:12.264 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$333ef4a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 13:45:12.283 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$28890760] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 13:45:12.288 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 13:45:12.289 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 13:45:12.331 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$45b1845e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 13:45:12.377 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$c531d190] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 13:45:12.525 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-10 13:45:12.529 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-10 13:45:12.981 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-10 13:45:12.999 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-10 13:45:13.011 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-10 13:45:13.011 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-10 13:45:13.469 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-10 13:45:13.482 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-10 13:45:13.482 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3831 ms
2023-07-10 13:45:14.390 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@1dbbd794 with name: jasyptStringEncryptor
2023-07-10 13:45:14.449 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-10 13:45:14.552 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-10 13:45:14.557 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-10 13:45:15.417 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-10 13:45:15.811 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-10 13:45:15.886 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-10 13:45:15.887 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-10 13:45:16.044 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-10 13:45:16.289 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 13:45:16.307 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-10 13:45:17.039 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 13:45:17.042 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-10 13:45:17.092 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-10 13:45:17.346 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-10 13:45:18.435 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-10 13:45:18.446 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-10 13:45:18.639 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-10 13:45:18.639 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-10 13:45:18.639 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-10 13:45:18.639 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-10 13:45:18.640 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-10 13:45:18.640 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-10 13:45:18.640 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-10 13:45:18.640 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-10 13:45:18.640 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-10 13:45:18.814 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@153decd0, org.springframework.security.web.context.SecurityContextPersistenceFilter@19f23b6a, org.springframework.security.web.header.HeaderWriterFilter@37c37b48, org.springframework.web.filter.CorsFilter@1126022f, org.springframework.security.web.authentication.logout.LogoutFilter@6e9304e0, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@17435919, org.springframework.security.web.session.ConcurrentSessionFilter@5d70a56b, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@57eea5a6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@477870f8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@16b1979, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@47e8f886, org.springframework.security.web.session.SessionManagementFilter@50c3a62e, org.springframework.security.web.access.ExceptionTranslationFilter@4013ad31, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7ddf4578]
2023-07-10 13:45:18.836 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-10 13:45:19.194 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-10 13:45:19.269 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-10 13:45:19.696 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 13:45:20.524 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-10 13:45:20.554 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-10 13:45:20.700 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-10 13:45:20.707 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-10 13:45:20.755 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-10 13:45:20.761 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.65 seconds (JVM running for 13.132)
2023-07-10 13:45:20.761 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 13:45:20.761 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-10 13:45:20.761 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 13:45:21.848 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-10 13:45:21.848 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-10 13:45:21.868 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 20 ms
2023-07-10 13:45:32.871 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 13:45:32.872 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 13:45:32.872 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-10 13:45:32.872 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 13:45:32.872 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-10 13:45:33.576 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a110c2ae.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 13:45:33.585 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a110c2ae.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 13:45:33.594 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 13:45:33.594 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 13:45:33.594 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 13:45:33.594 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 13:45:33.594 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 13:45:33.749 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a110c2ae.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 13:45:33.750 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a110c2ae.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 13:45:33.751 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a110c2ae.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 98 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 101 common frames omitted
2023-07-10 13:45:34.124 WARN  [http-nio-10010-exec-2] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [172] milliseconds.
2023-07-10 13:45:34.202 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 13:45:34.202 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 13:45:34.202 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 13:45:34.203 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 13:45:34.203 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 13:45:36.032 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 13:45:36.040 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-10 13:45:36.060 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 13:45:36.151 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$QVrvnsWt4WRJcVh21X2xBeePoVIYnCHCkWAJdRMdkgFMvZlfGsuLy
2023-07-10 13:45:36.241 INFO  [http-nio-10010-exec-5] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 13:47:28.463 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 13:47:28.464 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 13:47:33.192 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@11c1c1f9
2023-07-10 13:47:33.192 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-10 13:47:33.193 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-10 13:47:33.195 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 13:47:33.674 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 479 msec}
2023-07-10 13:47:33.676 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-10 13:47:33.738 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b35571ed
2023-07-10 13:47:33.738 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-10 13:47:33.738 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-07-10 13:47:33.894 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 155 msec}
2023-07-10 13:47:34.056 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 160 msec}
2023-07-10 13:47:34.450 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ce0c6fd
2023-07-10 13:47:34.450 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 13:47:34.450 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-07-10 13:47:34.451 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 13:47:34.485 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 33 msec}
2023-07-10 13:47:34.486 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 14:38:17.826 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-10 14:38:17.827 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-10 14:38:17.827 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-10 14:38:17.827 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-10 15:27:10.361 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=39m23s629ms112µs300ns).
2023-07-10 15:30:45.369 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 15:30:45.370 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 15:30:45.370 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-10 15:30:45.370 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 15:30:45.370 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-10 15:30:45.401 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a110c2ae.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 15:30:45.404 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a110c2ae.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 15:30:45.407 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 15:30:45.407 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 15:30:45.407 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 15:30:45.407 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 15:30:45.407 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 15:30:45.428 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a110c2ae.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 15:30:45.431 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a110c2ae.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 15:30:45.433 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a110c2ae.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-07-10 15:30:45.482 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 15:30:45.482 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 15:30:45.482 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 15:30:45.482 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 15:30:45.482 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 15:30:46.806 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 15:30:46.808 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-10 15:30:46.811 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 15:30:46.906 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$CQRKo0jZiRWIZXGczBwcK.Pj20pc2SRFtlXu9R0R68fcO.HUfVqvC
2023-07-10 15:30:46.997 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 15:30:49.909 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 15:30:49.910 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 15:30:51.649 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 15:30:51.707 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 15:30:51.934 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 224 msec}
2023-07-10 15:33:16.363 INFO  [RMI TCP Connection(81)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-10 15:33:16.394 INFO  [RMI TCP Connection(81)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-10 15:33:16.398 INFO  [RMI TCP Connection(81)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-10 15:33:16.405 INFO  [RMI TCP Connection(81)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-10 15:33:16.475 INFO  [RMI TCP Connection(81)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-10 15:33:36.765 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 32704 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-10 15:33:36.769 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-10 15:33:36.825 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-10 15:33:36.825 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-10 15:33:38.225 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 15:33:38.225 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-10 15:33:38.378 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 141ms. Found 3 JPA repository interfaces.
2023-07-10 15:33:38.734 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 15:33:38.734 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-10 15:33:38.780 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 15:33:38.781 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 15:33:38.782 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 15:33:38.782 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 48ms. Found 0 JDBC repository interfaces.
2023-07-10 15:33:39.256 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-10 15:33:39.327 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-10 15:33:39.328 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 15:33:39.328 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 15:33:39.328 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 15:33:39.328 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 15:33:39.329 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-10 15:33:39.329 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-10 15:33:39.329 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 15:33:39.329 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 15:33:39.329 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 15:33:39.329 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 15:33:39.329 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 15:33:39.395 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$1dc937a5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 15:33:39.449 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-10 15:33:39.542 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$7bf9bd2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 15:33:39.626 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 15:33:39.632 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@37335150' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 15:33:39.637 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$2c943e84] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 15:33:39.647 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$51e9569a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 15:33:39.651 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 15:33:39.653 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 15:33:39.676 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6f11d398] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 15:33:39.705 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$ee9220ca] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 15:33:39.837 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-10 15:33:39.842 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-10 15:33:40.274 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-10 15:33:40.291 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-10 15:33:40.302 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-10 15:33:40.302 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-10 15:33:40.695 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-10 15:33:40.706 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-10 15:33:40.707 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3882 ms
2023-07-10 15:33:41.596 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@378b19bd with name: jasyptStringEncryptor
2023-07-10 15:33:41.647 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-10 15:33:41.732 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-10 15:33:41.738 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-10 15:33:42.555 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-10 15:33:42.964 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-10 15:33:43.048 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-10 15:33:43.049 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-10 15:33:43.204 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-10 15:33:43.452 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 15:33:43.468 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-10 15:33:44.182 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 15:33:44.185 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-10 15:33:44.233 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-10 15:33:44.485 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-10 15:33:45.574 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-10 15:33:45.585 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-10 15:33:45.765 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-10 15:33:45.766 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-10 15:33:45.766 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-10 15:33:45.766 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-10 15:33:45.766 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-10 15:33:45.766 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-10 15:33:45.766 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-10 15:33:45.766 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-10 15:33:45.766 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-10 15:33:45.930 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@312eb65d, org.springframework.security.web.context.SecurityContextPersistenceFilter@4ba19cdb, org.springframework.security.web.header.HeaderWriterFilter@5d3cb8f0, org.springframework.web.filter.CorsFilter@4b2d2d1f, org.springframework.security.web.authentication.logout.LogoutFilter@6ea5cba8, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5a57da3f, org.springframework.security.web.session.ConcurrentSessionFilter@160881c2, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@2f62367d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@44b25e89, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@60cfe1b5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7530ebb8, org.springframework.security.web.session.SessionManagementFilter@2edf9493, org.springframework.security.web.access.ExceptionTranslationFilter@4a5568c5, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4be820c6]
2023-07-10 15:33:45.953 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-10 15:33:46.310 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-10 15:33:46.393 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-10 15:33:46.803 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 15:33:47.632 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-10 15:33:47.661 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-10 15:33:47.805 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-10 15:33:47.812 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-10 15:33:47.907 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-10 15:33:47.911 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.614 seconds (JVM running for 14.766)
2023-07-10 15:33:47.911 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 15:33:47.912 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-10 15:33:47.912 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 15:33:49.166 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-10 15:33:49.166 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-10 15:33:49.188 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-07-10 15:33:58.260 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 15:33:58.315 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 15:33:58.523 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 197 msec}
2023-07-10 15:44:10.336 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 15:44:10.338 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 15:44:13.825 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d6d1a765
2023-07-10 15:44:13.828 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 15:44:13.830 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-03-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 0 msec}
2023-07-10 15:49:01.152 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 15:49:01.153 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 15:49:02.612 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 15:49:02.613 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 15:49:02.858 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 244 msec}
2023-07-10 15:49:06.312 ERROR [http-nio-10010-exec-10] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'commonVoStr' is not present
	at org.springframework.web.method.annotation.RequestParamMethodArgumentResolver.handleMissingValue(RequestParamMethodArgumentResolver.java:203)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:114)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:127)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$604e7737.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 15:49:06.327 WARN  [http-nio-10010-exec-10] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'commonVoStr' is not present]
2023-07-10 15:51:25.798 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 15:51:25.799 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 15:51:27.355 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 15:51:27.356 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 15:51:27.589 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 232 msec}
2023-07-10 16:06:55.520 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 16:06:55.521 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 16:06:58.046 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 16:06:58.048 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 16:06:58.283 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 233 msec}
2023-07-10 16:14:17.453 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 16:14:17.455 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 16:14:21.686 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 16:14:21.688 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 16:14:21.923 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 234 msec}
2023-07-10 16:16:41.475 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 16:16:41.476 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 16:16:41.505 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 28 msec}
2023-07-10 16:16:43.314 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 16:16:43.317 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 16:16:43.319 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 2 msec}
2023-07-10 16:16:43.354 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 16:16:43.355 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 16:16:43.355 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 16:16:43.359 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 3 msec}
2023-07-10 16:16:43.361 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 16:16:43.412 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc35a982
2023-07-10 16:16:43.469 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 16:16:43.472 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 0 msec}
2023-07-10 16:16:43.649 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 234 msec}
2023-07-10 16:20:34.448 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 16:20:34.449 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 16:20:34.451 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 16:20:36.317 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@49da33b6
2023-07-10 16:20:36.318 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 16:20:36.321 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 2 msec}
2023-07-10 16:20:36.347 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4999ee61
2023-07-10 16:20:36.347 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 16:20:36.348 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 16:20:36.349 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 16:20:36.352 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 16:20:36.390 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b6a0c062
2023-07-10 16:20:36.393 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 16:20:36.394 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 0 msec}
2023-07-10 16:20:36.602 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('고상욱','',k.emp_nm,'고상욱')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 210 msec}
2023-07-10 16:39:05.864 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 16:39:05.865 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 16:39:07.841 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 16:39:07.843 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 16:39:08.080 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 235 msec}
2023-07-10 18:13:25.976 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=1h12m42s784ms574µs700ns).
2023-07-10 18:13:58.697 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-10 18:13:58.698 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-10 18:13:58.698 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-10 18:13:58.698 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-10 18:14:45.193 WARN  [http-nio-10010-exec-3] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [356] milliseconds.
2023-07-10 18:14:45.242 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 18:14:45.243 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 18:14:45.243 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 18:14:45.243 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 18:14:45.243 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 18:14:47.229 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:14:47.232 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-10 18:14:47.269 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 18:14:47.479 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$BRzrvgcW3ajABCUPz6OZOOKMAeJjQKL2Z8SE7xqrQVAor3A6.3aue
2023-07-10 18:14:47.693 INFO  [http-nio-10010-exec-3] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 18:14:51.336 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 18:14:51.338 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:14:51.363 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 25 msec}
2023-07-10 18:14:52.383 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-10 18:14:52.386 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:14:52.392 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 4 msec}
2023-07-10 18:14:52.427 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-10 18:14:52.427 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 18:14:52.428 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 18:14:52.430 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 18:14:52.432 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 18:14:52.473 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fc35a982
2023-07-10 18:14:52.475 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:14:52.476 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
52. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 0 msec}
2023-07-10 18:14:52.988 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권병묵','',k.emp_nm,'권병묵')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 512 msec}
2023-07-10 18:14:57.147 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77c0e8e3
2023-07-10 18:14:57.149 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:14:57.154 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종'
	order by 1
 {executed in 3 msec}
2023-07-10 18:14:57.189 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7780a38e
2023-07-10 18:14:57.189 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 18:14:57.189 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 18:14:57.191 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 18:14:57.194 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 18:14:57.239 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e487758f
2023-07-10 18:14:57.242 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:14:57.243 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
52. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권태종'
 {executed in 0 msec}
2023-07-10 18:14:57.698 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권태종','',k.emp_nm,'권태종')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 456 msec}
2023-07-10 18:16:27.968 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 18:16:27.969 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:16:27.970 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 18:16:29.643 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ca98a986
2023-07-10 18:16:29.646 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:16:29.650 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석'
	order by 1
 {executed in 2 msec}
2023-07-10 18:16:29.680 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ca586431
2023-07-10 18:16:29.680 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 18:16:29.681 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경석' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 18:16:29.682 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경석' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 18:16:29.683 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경석' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 18:16:29.721 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@375f3632
2023-07-10 18:16:29.725 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:16:29.726 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
52. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경석'
 {executed in 1 msec}
2023-07-10 18:16:30.175 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김경석','',k.emp_nm,'김경석')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 452 msec}
2023-07-10 18:18:21.394 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 18:18:21.396 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:18:21.398 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 18:18:26.320 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1a51e902
2023-07-10 18:18:26.322 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:18:26.328 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
52. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='양광일'
	order by 1
 {executed in 3 msec}
2023-07-10 18:18:26.359 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1a11a3ad
2023-07-10 18:18:26.359 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 18:18:26.360 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 18:18:26.364 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 4 msec}
2023-07-10 18:18:26.368 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '양광일' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 18:18:26.432 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@871875ae
2023-07-10 18:18:26.434 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:18:26.435 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
52. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '양광일'
 {executed in 0 msec}
2023-07-10 18:18:26.945 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('양광일','',k.emp_nm,'양광일')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 509 msec}
2023-07-10 18:19:55.654 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5f24772e
2023-07-10 18:19:55.655 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-10 18:19:55.656 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '양광일'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-10 18:19:55.657 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:19:56.274 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '양광일'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 615 msec}
2023-07-10 18:19:56.276 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:19:57.074 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '양광일'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 797 msec}
2023-07-10 18:19:57.120 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4d577ce
2023-07-10 18:19:57.120 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-10 18:19:57.121 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '양광일' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-10 18:19:57.122 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:19:58.682 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '양광일' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1559 msec}
2023-07-10 18:19:58.684 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:19:58.685 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '양광일' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-07-10 18:19:58.755 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@94750d76
2023-07-10 18:19:58.755 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-10 18:19:58.756 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '양광일' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-03' ORDER BY a.START_TIME
2023-07-10 18:19:58.832 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '양광일' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-03' ORDER BY a.START_TIME
 {executed in 75 msec}
2023-07-10 18:19:58.899 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '양광일' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-03' ORDER BY a.START_TIME
 {executed in 66 msec}
2023-07-10 18:20:31.059 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 18:20:31.061 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:20:31.084 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 23 msec}
2023-07-10 18:20:32.551 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77cdf6f1
2023-07-10 18:20:32.554 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:20:32.559 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배'
	order by 1
 {executed in 3 msec}
2023-07-10 18:20:32.589 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@778db19c
2023-07-10 18:20:32.589 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 18:20:32.589 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 18:20:32.591 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:20:32.596 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 5 msec}
2023-07-10 18:20:32.598 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경배' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 18:20:32.642 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e494839d
2023-07-10 18:20:32.646 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경배'
 {executed in 0 msec}
2023-07-10 18:20:32.865 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
52. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김경배','',k.emp_nm,'김경배')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 221 msec}
2023-07-10 18:20:34.253 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bca0851d
2023-07-10 18:20:34.253 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-10 18:20:34.255 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김경배'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-10 18:20:34.256 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:20:34.419 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김경배'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 163 msec}
2023-07-10 18:20:34.575 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김경배'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 156 msec}
2023-07-10 18:20:34.613 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@625185bd
2023-07-10 18:20:34.613 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-10 18:20:34.613 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김경배' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-10 18:20:35.312 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김경배' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 698 msec}
2023-07-10 18:20:35.313 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:20:35.314 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김경배' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-07-10 18:20:35.382 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@acd3f2f3
2023-07-10 18:20:35.382 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-10 18:20:35.382 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김경배' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-07-10 18:20:35.383 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:20:35.423 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김경배' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 38 msec}
2023-07-10 18:20:35.453 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김경배' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 28 msec}
2023-07-10 18:21:51.062 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 18:21:51.063 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:21:51.090 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 27 msec}
2023-07-10 18:21:52.516 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a30867
2023-07-10 18:21:52.518 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:21:52.523 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
52. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 3 msec}
2023-07-10 18:21:52.567 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@61699513
2023-07-10 18:21:52.568 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f462c312
2023-07-10 18:21:52.568 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 18:21:52.568 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 18:21:52.569 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:21:52.572 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 3 msec}
2023-07-10 18:21:52.572 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:21:52.574 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
53. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 1 msec}
2023-07-10 18:21:52.575 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 18:21:52.850 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('국수현','',k.emp_nm,'국수현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 278 msec}
2023-07-10 18:21:55.022 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@39759693
2023-07-10 18:21:55.023 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-10 18:21:55.023 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '국수현'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-10 18:21:55.024 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:21:55.225 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '국수현'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 200 msec}
2023-07-10 18:21:55.367 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '국수현'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 140 msec}
2023-07-10 18:21:55.404 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@df269733
2023-07-10 18:21:55.404 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-10 18:21:55.404 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-10 18:21:55.405 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:21:56.124 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 717 msec}
2023-07-10 18:21:56.125 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:21:56.127 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-07-10 18:21:56.185 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@29a90469
2023-07-10 18:21:56.185 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-10 18:21:56.185 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-07-10 18:21:56.186 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:21:56.216 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 28 msec}
2023-07-10 18:21:56.242 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 25 msec}
2023-07-10 18:21:57.822 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1d094ce2
2023-07-10 18:21:57.822 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 18:21:57.822 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '국수현' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 18:21:57.824 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:21:57.827 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '국수현' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 3 msec}
2023-07-10 18:21:57.829 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '국수현' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 18:21:59.122 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@85ea8d3f
2023-07-10 18:21:59.122 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-10 18:21:59.122 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
2023-07-10 18:21:59.124 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:21:59.135 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 10 msec}
2023-07-10 18:21:59.139 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-07-10 18:22:00.170 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a82610c6
2023-07-10 18:22:00.171 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-10 18:22:00.171 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
2023-07-10 18:22:00.172 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:22:00.175 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 2 msec}
2023-07-10 18:22:00.176 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 18:22:01.237 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f520457c
2023-07-10 18:22:01.237 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMPLOYEE_VACATION_INFO_emp} 
2023-07-10 18:22:01.237 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
2023-07-10 18:22:01.239 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:22:01.241 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 2 msec}
2023-07-10 18:22:01.244 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 18:22:02.190 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0d64dc1
2023-07-10 18:22:02.190 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 18:22:02.191 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 18:22:02.192 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:22:02.195 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 18:22:02.198 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 18:22:03.362 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@25e92142
2023-07-10 18:22:03.362 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-10 18:22:03.363 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '국수현'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-10 18:22:03.364 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:22:03.556 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
53. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '국수현'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 191 msec}
2023-07-10 18:22:03.787 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
53. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '국수현'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 230 msec}
2023-07-10 18:22:03.825 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@89951ab5
2023-07-10 18:22:03.825 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-10 18:22:03.825 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-10 18:22:03.827 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:22:04.567 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 740 msec}
2023-07-10 18:22:04.569 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:22:04.570 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-07-10 18:22:04.618 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@29a90469
2023-07-10 18:22:04.618 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-10 18:22:04.618 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-07-10 18:22:04.652 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 33 msec}
2023-07-10 18:22:04.698 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 45 msec}
2023-07-10 18:22:17.823 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:22:17.825 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 18:22:25.821 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8c829fab
2023-07-10 18:22:25.821 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-10 18:22:25.822 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg_min) AS tot_minute ,	sum(k.avg_km) AS tot_km , 	round(sum(k.avg_min)/count(k.emp_nm)) AS avg_minute , 	round(sum(k.avg_km)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg_min , 	sum(a.day_work_km) 	AS tot_km ,	sum(a.day_work_km) / count(a.work_date) AS avg_km FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-10 18:22:25.823 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:22:25.860 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg_min) AS tot_minute ,	sum(k.avg_km) AS tot_km , 	round(sum(k.avg_min)/count(k.emp_nm)) AS avg_minute , 	round(sum(k.avg_km)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg_min , 	sum(a.day_work_km) 	AS tot_km ,	sum(a.day_work_km) / count(a.work_date) AS avg_km FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 37 msec}
2023-07-10 18:22:25.878 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg_min) AS tot_minute ,	sum(k.avg_km) AS tot_km , 	round(sum(k.avg_min)/count(k.emp_nm)) AS avg_minute , 	round(sum(k.avg_km)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg_min , 	sum(a.day_work_km) 	AS tot_km ,	sum(a.day_work_km) / count(a.work_date) AS avg_km FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 17 msec}
2023-07-10 18:22:25.954 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. WITH /* select_empWorkingTimeViewHeader : 근무일수/운행거리일수 header 조회 */ monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 5 msec}
2023-07-10 18:22:25.978 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. WITH /* select_empWorkingTimeView : 근무일수/운행거리일수 조회 */ monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 17 msec}
2023-07-10 18:22:57.168 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:22:57.169 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 18:23:00.616 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e1b567b
2023-07-10 18:23:00.619 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:23:00.846 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 226 msec}
2023-07-10 18:23:53.169 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2758ce77
2023-07-10 18:23:53.170 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 18:23:53.170 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 18:23:53.171 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:23:53.172 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 18:23:53.173 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 18:31:35.434 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:31:35.438 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:31:35.442 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 2 msec}
2023-07-10 18:31:38.536 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a2635e1
2023-07-10 18:31:38.536 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:31:38.536 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:31:38.537 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:31:38.538 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:31:38.539 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-10 18:31:39.955 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:31:39.958 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:31:39.959 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 0 msec}
2023-07-10 18:40:19.991 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
63. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:40:19.993 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:40:19.996 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-10 18:40:22.536 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a2635e1
2023-07-10 18:40:22.536 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:40:22.536 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:40:22.537 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:40:22.539 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:40:22.540 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:40:29.796 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:40:29.809 INFO  [http-nio-10010-exec-10] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn 
2023-07-10 18:40:29.825 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
65. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:40:29.862 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
65. batching 25 statements:
 1:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 2:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 3:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 4:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 5:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 6:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 7:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 8:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 9:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
10:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
11:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
12:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
13:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
14:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
15:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
16:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
17:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
18:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
19:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , 'test' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
20:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
21:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
22:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
23:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
24:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
25:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y'
 {executed in 22 msec}
2023-07-10 18:40:29.887 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a2635e1
2023-07-10 18:40:29.888 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:40:29.888 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:40:29.890 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
65. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 2 msec}
2023-07-10 18:40:29.892 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
65. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:40:37.346 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
65. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:40:37.356 INFO  [http-nio-10010-exec-9] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn 
2023-07-10 18:40:37.358 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
66. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:40:37.373 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
66. batching 24 statements:
 1:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 2:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 3:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 4:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 5:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 6:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 7:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 8:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 9:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
10:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
11:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
12:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
13:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
14:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
15:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
16:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
17:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
18:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
19:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
20:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
21:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
22:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
23:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
24:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y'
 {executed in 9 msec}
2023-07-10 18:40:37.388 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a2635e1
2023-07-10 18:40:37.388 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:40:37.388 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:40:37.390 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
66. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:40:37.391 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
66. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-10 18:40:48.333 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
66. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:40:48.343 INFO  [http-nio-10010-exec-2] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn 
2023-07-10 18:40:48.345 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
67. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:40:48.353 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
67. batching 24 statements:
 1:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 2:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 3:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 4:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 5:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 6:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 7:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 8:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 9:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
10:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
11:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
12:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
13:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
14:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
15:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
16:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
17:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
18:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
19:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
20:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
21:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
22:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
23:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
24:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y'
 {executed in 6 msec}
2023-07-10 18:40:48.362 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a2635e1
2023-07-10 18:40:48.362 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:40:48.362 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:40:48.364 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
67. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:40:48.366 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
67. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-10 18:41:39.977 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
67. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:41:39.982 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
68. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 18:41:39.985 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
68. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-10 18:41:42.433 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a2635e1
2023-07-10 18:41:42.433 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:41:42.434 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:41:42.434 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
68. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:41:42.436 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
68. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:41:42.437 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
68. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:41:46.859 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
68. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:41:46.872 INFO  [http-nio-10010-exec-6] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn 
2023-07-10 18:41:46.874 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
69. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:41:46.887 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
69. batching 24 statements:
 1:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 2:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 3:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 4:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 5:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 6:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 7:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 8:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
 9:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
10:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
11:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
12:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
13:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
14:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
15:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
16:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
17:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
18:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
19:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
20:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
21:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
22:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
23:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' 
24:  MERGE INTO TBM_COMMON_CODE_INFO KEY (code_gb,code_id,company_no) select  '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y'
 {executed in 9 msec}
2023-07-10 18:41:46.899 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a2635e1
2023-07-10 18:41:46.900 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:41:46.900 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:41:46.903 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 2 msec}
2023-07-10 18:41:46.906 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:45:30.938 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 32092 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-10 18:45:30.944 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-10 18:45:31.006 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-10 18:45:31.008 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-10 18:45:32.845 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 18:45:32.846 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-10 18:45:33.013 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 157ms. Found 3 JPA repository interfaces.
2023-07-10 18:45:33.387 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 18:45:33.388 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-10 18:45:33.438 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 18:45:33.438 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 18:45:33.439 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 18:45:33.439 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 51ms. Found 0 JDBC repository interfaces.
2023-07-10 18:45:33.926 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-10 18:45:34.003 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-10 18:45:34.003 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 18:45:34.004 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 18:45:34.004 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 18:45:34.004 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:45:34.004 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-10 18:45:34.005 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-10 18:45:34.005 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:45:34.005 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:45:34.005 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:45:34.005 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 18:45:34.005 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:45:34.069 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$6a54a9ae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:45:34.125 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-10 18:45:34.215 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$544b0ddb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:45:34.304 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:45:34.306 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@2a1a5ad6' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:45:34.310 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$791fb08d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:45:34.320 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$9e74c8a3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:45:34.324 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:45:34.325 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:45:34.345 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bb9d45a1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:45:34.375 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$3b1d92d3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:45:34.518 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-10 18:45:34.522 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-10 18:45:35.011 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-10 18:45:35.029 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-10 18:45:35.041 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-10 18:45:35.041 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-10 18:45:35.475 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-10 18:45:35.488 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-10 18:45:35.489 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4481 ms
2023-07-10 18:45:36.430 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@6ac4d798 with name: jasyptStringEncryptor
2023-07-10 18:45:36.495 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-10 18:45:36.588 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-10 18:45:36.592 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-10 18:45:37.407 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-10 18:45:37.960 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-10 18:45:38.048 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-10 18:45:38.051 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-10 18:45:38.215 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-10 18:45:38.496 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:45:38.525 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-10 18:45:39.324 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:45:39.327 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-10 18:45:39.383 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-10 18:45:39.647 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-10 18:45:40.888 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-10 18:45:40.899 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-10 18:45:41.095 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-10 18:45:41.095 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-10 18:45:41.095 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-10 18:45:41.095 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-10 18:45:41.095 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-10 18:45:41.095 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-10 18:45:41.095 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-10 18:45:41.095 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-10 18:45:41.095 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-10 18:45:41.277 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@8ebcb75, org.springframework.security.web.context.SecurityContextPersistenceFilter@131d5d80, org.springframework.security.web.header.HeaderWriterFilter@76b627cc, org.springframework.web.filter.CorsFilter@48d3a94b, org.springframework.security.web.authentication.logout.LogoutFilter@2b55909f, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@44b25e89, org.springframework.security.web.session.ConcurrentSessionFilter@14a554cf, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@7e93297d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@d099001, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@36d14986, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3b7e055d, org.springframework.security.web.session.SessionManagementFilter@699168c2, org.springframework.security.web.access.ExceptionTranslationFilter@376690dd, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3320fa48]
2023-07-10 18:45:41.298 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-10 18:45:41.727 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-10 18:45:41.811 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-10 18:45:42.268 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:45:43.211 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-10 18:45:43.241 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-10 18:45:43.384 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-10 18:45:43.390 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-10 18:45:43.448 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-10 18:45:43.452 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 13.059 seconds (JVM running for 16.657)
2023-07-10 18:45:43.453 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 18:45:43.453 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-10 18:45:43.453 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 18:45:44.443 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-10 18:45:44.443 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-10 18:45:44.468 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 24 ms
2023-07-10 18:45:50.104 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 18:45:50.105 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 18:45:50.105 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-10 18:45:50.105 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 18:45:50.105 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-10 18:45:50.431 WARN  [http-nio-10010-exec-2] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [259] milliseconds.
2023-07-10 18:45:50.451 ERROR [http-nio-10010-exec-3] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$324e1386.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 18:45:50.458 ERROR [http-nio-10010-exec-3] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$324e1386.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 18:45:50.467 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 18:45:50.468 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 18:45:50.468 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 18:45:50.468 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 18:45:50.468 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 18:45:50.646 ERROR [http-nio-10010-exec-3] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$324e1386.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 18:45:50.647 ERROR [http-nio-10010-exec-3] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$324e1386.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 18:45:50.649 ERROR [http-nio-10010-exec-3] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$324e1386.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 98 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 101 common frames omitted
2023-07-10 18:45:50.703 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 18:45:50.704 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 18:45:50.704 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 18:45:50.704 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 18:45:50.704 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 18:45:52.521 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:45:52.533 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-10 18:45:52.578 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 18:45:52.786 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$vX0XzqPSm9Y1PqVMTLLXauK4LvGdNRLdY76W.q9K6AT75WhtrJmXq
2023-07-10 18:45:52.993 INFO  [http-nio-10010-exec-4] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 18:45:54.885 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:45:54.929 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:45:54.936 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 2 msec}
2023-07-10 18:45:56.031 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f3c501d6
2023-07-10 18:45:56.032 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:45:56.119 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:45:56.125 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:45:56.129 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 2 msec}
2023-07-10 18:45:56.135 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:46:00.033 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:46:00.040 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
2. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'
 {executed in 1 msec}
2023-07-10 18:46:00.050 INFO  [http-nio-10010-exec-5] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn )
2023-07-10 18:46:00.063 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 18:46:00.091 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
3. batching 24 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
14:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
15:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
16:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
17:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
18:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
19:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
20:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
21:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
22:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
23:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
24:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 {executed in 16 msec}
2023-07-10 18:46:00.113 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f3c501d6
2023-07-10 18:46:00.113 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:46:00.113 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:46:00.115 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 2 msec}
2023-07-10 18:46:00.117 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:46:03.626 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:46:03.629 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:46:03.632 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 2 msec}
2023-07-10 18:53:01.492 INFO  [RMI TCP Connection(20)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-10 18:53:01.523 INFO  [RMI TCP Connection(20)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-10 18:53:01.526 INFO  [RMI TCP Connection(20)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-10 18:53:01.532 INFO  [RMI TCP Connection(20)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-10 18:53:01.597 INFO  [RMI TCP Connection(20)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-10 18:53:20.232 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 17952 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-10 18:53:20.239 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-10 18:53:20.300 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-10 18:53:20.301 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-10 18:53:21.728 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 18:53:21.728 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-10 18:53:21.886 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 148ms. Found 3 JPA repository interfaces.
2023-07-10 18:53:22.260 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 18:53:22.261 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-10 18:53:22.316 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 18:53:22.316 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 18:53:22.317 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 18:53:22.317 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 56ms. Found 0 JDBC repository interfaces.
2023-07-10 18:53:22.818 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-10 18:53:22.890 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-10 18:53:22.891 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 18:53:22.891 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 18:53:22.891 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 18:53:22.891 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:53:22.892 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-10 18:53:22.892 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-10 18:53:22.892 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:53:22.892 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:53:22.892 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:53:22.892 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 18:53:22.893 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:53:22.956 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$638a0048] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:53:23.008 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-10 18:53:23.094 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$4d806475] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:53:23.185 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:53:23.187 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@f7e2042' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:53:23.193 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$72550727] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:53:23.203 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$97aa1f3d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:53:23.206 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:53:23.207 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:53:23.230 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b4d29c3b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:53:23.260 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$3452e96d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:53:23.426 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-10 18:53:23.432 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-10 18:53:23.921 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-10 18:53:23.938 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-10 18:53:23.950 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-10 18:53:23.950 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-10 18:53:24.410 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-10 18:53:24.421 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-10 18:53:24.421 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4120 ms
2023-07-10 18:53:25.401 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@6db116a6 with name: jasyptStringEncryptor
2023-07-10 18:53:25.469 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-10 18:53:25.572 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 9 msec}
2023-07-10 18:53:25.577 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-10 18:53:26.489 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-10 18:53:26.917 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-10 18:53:27.006 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-10 18:53:27.008 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-10 18:53:27.198 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-10 18:53:27.464 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:53:27.497 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-10 18:53:28.284 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:53:28.287 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-10 18:53:28.369 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-10 18:53:28.639 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-10 18:53:29.844 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-10 18:53:29.857 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-10 18:53:30.053 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-10 18:53:30.053 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-10 18:53:30.053 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-10 18:53:30.053 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-10 18:53:30.053 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-10 18:53:30.054 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-10 18:53:30.054 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-10 18:53:30.054 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-10 18:53:30.054 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-10 18:53:30.226 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5b60c93, org.springframework.security.web.context.SecurityContextPersistenceFilter@2c94d571, org.springframework.security.web.header.HeaderWriterFilter@12d03f77, org.springframework.web.filter.CorsFilter@fcbe99, org.springframework.security.web.authentication.logout.LogoutFilter@2fc6d2f9, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@65ced335, org.springframework.security.web.session.ConcurrentSessionFilter@51dd1001, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@4d0b74ca, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@646047d2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@26e24dcf, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2f6e47aa, org.springframework.security.web.session.SessionManagementFilter@78694953, org.springframework.security.web.access.ExceptionTranslationFilter@6ed2f73f, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@53317330]
2023-07-10 18:53:30.247 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-10 18:53:30.700 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-10 18:53:30.780 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-10 18:53:31.258 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:53:32.190 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-10 18:53:32.220 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-10 18:53:32.370 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-10 18:53:32.377 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-10 18:53:32.426 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-10 18:53:32.430 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 12.704 seconds (JVM running for 14.205)
2023-07-10 18:53:32.431 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 18:53:32.431 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-10 18:53:32.431 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 18:53:33.242 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-10 18:53:33.242 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-10 18:53:33.263 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 20 ms
2023-07-10 18:53:43.732 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:53:43.766 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:53:43.777 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-10 18:53:45.261 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f3c501d6
2023-07-10 18:53:45.262 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:53:45.303 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:53:45.305 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:53:45.306 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:53:45.309 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-10 18:53:48.972 ERROR [http-nio-10010-exec-7] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.util.UnknownFormatConversionException: Conversion = '''
	at java.base/java.util.Formatter.parse(Formatter.java:2750)
	at java.base/java.util.Formatter.format(Formatter.java:2671)
	at java.base/java.util.Formatter.format(Formatter.java:2625)
	at java.base/java.lang.String.format(String.java:4141)
	at com.pjy.dashboard.service.DynamicSqlService.deleteInfoTable(DynamicSqlService.java:444)
	at com.pjy.dashboard.controller.TestController.BUS_insertInfo(TestController.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$1bc31c38.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 18:53:49.000 WARN  [http-nio-10010-exec-7] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.util.UnknownFormatConversionException: Conversion = ''']
2023-07-10 18:54:12.056 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-10 18:54:12.090 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-10 18:54:12.093 INFO  [RMI TCP Connection(11)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-10 18:54:12.100 INFO  [RMI TCP Connection(11)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-10 18:54:12.147 INFO  [RMI TCP Connection(11)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-10 18:54:30.887 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 7492 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-10 18:54:30.893 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-10 18:54:30.965 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-10 18:54:30.965 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-10 18:54:32.330 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 18:54:32.331 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-10 18:54:32.493 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 153ms. Found 3 JPA repository interfaces.
2023-07-10 18:54:32.868 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 18:54:32.869 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-10 18:54:32.919 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 18:54:32.920 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 18:54:32.920 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 18:54:32.921 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 52ms. Found 0 JDBC repository interfaces.
2023-07-10 18:54:33.415 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-10 18:54:33.488 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-10 18:54:33.488 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 18:54:33.488 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 18:54:33.489 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 18:54:33.489 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:54:33.489 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-10 18:54:33.489 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-10 18:54:33.489 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:54:33.490 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:54:33.490 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:54:33.490 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 18:54:33.490 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 18:54:33.554 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$7af9ab4d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:54:33.604 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-10 18:54:33.696 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$64f00f7a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:54:33.785 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:54:33.788 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@164cb288' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:54:33.789 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$89c4b22c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:54:33.799 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$af19ca42] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:54:33.802 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:54:33.803 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:54:33.824 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$cc424740] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:54:33.852 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$4bc29472] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 18:54:33.998 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-10 18:54:34.004 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-10 18:54:34.478 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-10 18:54:34.496 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-10 18:54:34.507 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-10 18:54:34.507 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-10 18:54:34.974 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-10 18:54:34.989 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-10 18:54:34.989 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4023 ms
2023-07-10 18:54:35.997 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@43bd9753 with name: jasyptStringEncryptor
2023-07-10 18:54:36.054 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-10 18:54:36.145 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 9 msec}
2023-07-10 18:54:36.149 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-10 18:54:37.051 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-10 18:54:37.438 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-10 18:54:37.529 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-10 18:54:37.531 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-10 18:54:37.704 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-10 18:54:37.989 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:54:38.005 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-10 18:54:38.820 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:54:38.823 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 0 msec}
2023-07-10 18:54:38.875 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-10 18:54:39.156 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-10 18:54:40.380 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-10 18:54:40.391 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-10 18:54:40.589 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-10 18:54:40.590 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-10 18:54:40.590 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-10 18:54:40.590 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-10 18:54:40.590 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-10 18:54:40.590 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-10 18:54:40.590 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-10 18:54:40.590 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-10 18:54:40.590 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-10 18:54:40.756 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4cb8fab5, org.springframework.security.web.context.SecurityContextPersistenceFilter@559386ac, org.springframework.security.web.header.HeaderWriterFilter@1f457b24, org.springframework.web.filter.CorsFilter@2f426451, org.springframework.security.web.authentication.logout.LogoutFilter@72ab251d, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@49530cee, org.springframework.security.web.session.ConcurrentSessionFilter@5eafae32, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@47fdab8d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2ecf1627, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@791531aa, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1406e8bb, org.springframework.security.web.session.SessionManagementFilter@5e9b3fda, org.springframework.security.web.access.ExceptionTranslationFilter@5e6c53e3, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5d52d707]
2023-07-10 18:54:40.780 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-10 18:54:41.187 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-10 18:54:41.277 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-10 18:54:41.732 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:54:42.643 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-10 18:54:42.672 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-10 18:54:42.836 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-10 18:54:42.842 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-10 18:54:42.898 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-10 18:54:42.903 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 12.548 seconds (JVM running for 14.096)
2023-07-10 18:54:42.903 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 18:54:42.904 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-10 18:54:42.904 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 18:54:43.830 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-10 18:54:43.830 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-10 18:54:43.855 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 25 ms
2023-07-10 18:54:48.145 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:54:48.174 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 18:54:48.182 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-10 18:54:49.574 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f3c501d6
2023-07-10 18:54:49.575 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:54:49.619 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:54:49.622 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:54:49.623 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:54:49.627 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-10 18:54:52.598 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:54:52.613 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
2. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'  AND code_gb like '민원' || '%'
 {executed in 3 msec}
2023-07-10 18:54:52.630 INFO  [http-nio-10010-exec-2] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn )
2023-07-10 18:54:52.646 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:54:52.679 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
3. batching 25 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
14:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
15:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
16:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
17:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
18:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
19:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , 'test' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
20:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
21:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
22:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
23:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
24:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
25:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 {executed in 15 msec}
2023-07-10 18:54:52.700 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f3c501d6
2023-07-10 18:54:52.700 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:54:52.700 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:54:52.704 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 2 msec}
2023-07-10 18:54:52.708 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:54:57.824 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:54:57.827 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
3. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'  AND code_gb like '민원' || '%'
 {executed in 1 msec}
2023-07-10 18:54:57.842 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn )
2023-07-10 18:54:57.844 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:54:57.858 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
4. batching 24 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
14:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
15:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
16:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
17:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
18:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
19:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
20:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
21:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
22:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
23:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
24:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 {executed in 8 msec}
2023-07-10 18:54:57.878 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f3c501d6
2023-07-10 18:54:57.878 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:54:57.879 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:54:57.882 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 2 msec}
2023-07-10 18:54:57.885 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-10 18:56:33.892 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:56:33.895 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
4. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'  AND code_gb like '민원' || '%'
 {executed in 2 msec}
2023-07-10 18:56:33.915 INFO  [http-nio-10010-exec-2] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn )
2023-07-10 18:56:33.917 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 18:56:33.934 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
5. batching 25 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , 'test2' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
14:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
15:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
16:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
17:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
18:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
19:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
20:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
21:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
22:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
23:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
24:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
25:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 {executed in 10 msec}
2023-07-10 18:56:33.952 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f3c501d6
2023-07-10 18:56:33.952 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:56:33.953 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:56:33.956 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:56:33.959 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:56:39.114 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:56:39.117 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
5. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'  AND code_gb like '민원' || '%'
 {executed in 0 msec}
2023-07-10 18:56:39.132 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn )
2023-07-10 18:56:39.134 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
6. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 18:56:39.144 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
6. batching 24 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '결근' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '결원' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '면담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '승진' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '지각' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '퇴사' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '표창' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원대분류' , '휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '10년근속' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '법규위반' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
14:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '시민항의' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
15:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정규직전환' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
16:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정년퇴임' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
17:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '정신과상담' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
18:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원중분류' , '차량교육' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
19:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '공황장애' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
20:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '난폭운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
21:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '노조가입' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
22:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '상금' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
23:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '음주운전' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
24:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '민원소분류' , '포상휴가' , '' , '' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 0.0 , 0.0 , 'Y' )
 {executed in 5 msec}
2023-07-10 18:56:39.154 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f3c501d6
2023-07-10 18:56:39.154 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_complaints} 
2023-07-10 18:56:39.155 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
2023-07-10 18:56:39.156 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
6. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 0 msec}
2023-07-10 18:56:39.158 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
6. SELECT  k.NO,'N' as bit, max(k.type1) as code_type1,max(k.type2) as code_type2,max(k.type3) as code_type3 FROM ( SELECT ROWNUM AS no,code_id AS type1,'' AS type2,	'' AS type3 FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원대분류' UNION SELECT ROWNUM AS no,'',	code_id,'' FROM TBM_COMMON_CODE_INFO WHERE COMPANY_NO  ='100'	AND code_gb ='민원중분류' UNION SELECT ROWNUM AS no, '','',code_id FROM TBM_COMMON_CODE_INFO	WHERE COMPANY_NO  ='100' AND code_gb ='민원소분류') k GROUP BY k.no
 {executed in 1 msec}
2023-07-10 18:56:41.649 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
6. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:56:41.652 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
7. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:56:41.655 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
7. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-10 18:56:46.482 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
7. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:56:46.485 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
7. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 18:56:47.739 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 18:56:47.739 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 18:56:47.739 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 18:56:47.740 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
7. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:56:47.742 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
7. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 18:56:47.743 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
7. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 18:59:13.511 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
7. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:59:13.512 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
7. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 18:59:15.092 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 18:59:15.092 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 18:59:15.092 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 18:59:15.094 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
7. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 18:59:15.095 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
7. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 18:59:15.096 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
7. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 18:59:38.907 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
7. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:59:38.909 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
7. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'  AND code_gb like '인사평가' || '%'
 {executed in 1 msec}
2023-07-10 18:59:38.927 INFO  [http-nio-10010-exec-10] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn )
2023-07-10 18:59:38.929 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
8. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 18:59:38.937 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
8. batching 13 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '00' , '기본배점' , '칭찬/표창 보정용' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 1.0 , 0.0 , '' )
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '01' , '사고' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -5.0 , '' )
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '02' , '사고금액' , '백만원당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , '' )
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '11' , '위험운전지수' , '위험level당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -2.0 , '' )
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '12' , '배차정시성' , '위반율' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , '' )
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '13' , '운행횟수' , '상대평가등급' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 20.0 , 2.0 , '' )
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '21' , '결근' , '1일당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , '' )
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '22' , '결행' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , '' )
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '23' , '교통법규위반' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , '' )
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '24' , '민원' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , '' )
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '25' , '지각' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , '' )
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '26' , '칭찬' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 5.0 , 1.0 , '' )
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '27' , '표창' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 5.0 , 1.0 , '' )
 {executed in 4 msec}
2023-07-10 18:59:38.953 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 18:59:38.953 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 18:59:38.954 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 18:59:38.955 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
8. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 18:59:38.957 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
8. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 19:03:35.703 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
8. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 19:03:35.705 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
8. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'  AND code_gb like '인사평가' || '%'
 {executed in 2 msec}
2023-07-10 19:03:35.715 INFO  [http-nio-10010-exec-7] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn )
2023-07-10 19:03:35.716 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
9. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 19:03:35.724 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
9. batching 13 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '00' , '기본배점' , '칭찬/표창 보정용' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 1.0 , 0.0 , '' )
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '01' , '사고' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -5.0 , '' )
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '02' , '사고금액' , '백만원당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , '' )
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '11' , '위험운전지수' , '위험level당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -2.0 , '' )
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '12' , '배차정시성' , '위반율' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , '' )
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '13' , '근무협조도' , '상대평가등급' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 20.0 , 2.0 , '' )
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '21' , '결근' , '1일당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , '' )
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '22' , '결행' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , '' )
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '23' , '교통법규위반' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , '' )
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '24' , '민원' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , '' )
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '25' , '지각' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , '' )
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '26' , '칭찬' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 5.0 , 1.0 , '' )
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '27' , '표창' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 5.0 , 1.0 , '' )
 {executed in 5 msec}
2023-07-10 19:03:35.739 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 19:03:35.740 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 19:03:35.757 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 19:03:35.759 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
9. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 2 msec}
2023-07-10 19:03:35.762 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
9. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 20:20:10.677 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-10 20:20:10.677 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-10 20:20:10.677 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-10 20:20:10.678 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-10 20:20:19.186 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=1h16m12s802ms237µs800ns).
2023-07-10 20:20:51.964 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 20:20:51.964 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 20:20:51.964 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-10 20:20:51.964 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 20:20:51.964 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-10 20:20:51.980 ERROR [http-nio-10010-exec-4] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$31bda28a.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 20:20:51.985 ERROR [http-nio-10010-exec-4] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$31bda28a.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 20:20:51.988 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 20:20:51.989 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 20:20:51.989 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 20:20:51.989 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 20:20:51.989 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 20:20:52.255 ERROR [http-nio-10010-exec-4] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$31bda28a.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 20:20:52.257 ERROR [http-nio-10010-exec-4] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$31bda28a.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-10 20:20:52.258 ERROR [http-nio-10010-exec-4] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$31bda28a.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-07-10 20:20:54.885 WARN  [http-nio-10010-exec-5] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [184] milliseconds.
2023-07-10 20:20:54.948 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 20:20:54.948 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 20:20:54.948 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 20:20:54.949 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 20:20:54.949 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 20:21:06.526 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:21:06.530 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
19. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-10 20:21:06.552 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 20:21:06.660 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$ywYTq.Q9r0uW8BthbLb0Iu5Q00uAOBvOXPYxMbCSv4k1LLBFosnO6
2023-07-10 20:21:06.751 INFO  [http-nio-10010-exec-5] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 20:21:43.028 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:21:43.029 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 20:21:45.425 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e38ec862
2023-07-10 20:21:45.455 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:21:45.707 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
19. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 251 msec}
2023-07-10 20:22:40.906 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3298da03
2023-07-10 20:22:40.906 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_EMPLOYEEINFO} 
2023-07-10 20:22:40.906 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
2023-07-10 20:22:40.907 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:22:40.910 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
 {executed in 3 msec}
2023-07-10 20:22:40.914 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
 {executed in 3 msec}
2023-07-10 20:25:13.804 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 20:25:13.805 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:25:13.825 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 20:25:23.699 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c654766e
2023-07-10 20:25:23.701 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:25:23.704 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
19. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김광수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김광수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김광수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김광수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김광수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김광수'
	order by 1
 {executed in 1 msec}
2023-07-10 20:25:23.737 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@895ceafa
2023-07-10 20:25:23.737 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6143119
2023-07-10 20:25:23.737 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:25:23.738 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김광수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 20:25:23.739 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:25:23.741 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김광수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 20:25:23.744 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김광수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 20:25:23.753 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
20. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김광수'
 {executed in 0 msec}
2023-07-10 20:25:23.969 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
19. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김광수','',k.emp_nm,'김광수')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 230 msec}
2023-07-10 20:25:27.525 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dd5b9f11
2023-07-10 20:25:27.527 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:25:27.529 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
19. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수'
	order by 1
 {executed in 1 msec}
2023-07-10 20:25:27.555 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a064139d
2023-07-10 20:25:27.555 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dd1b59bc
2023-07-10 20:25:27.555 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:25:27.555 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김대수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 20:25:27.556 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:25:27.557 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:25:27.558 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김대수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:25:27.558 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김대수'
 {executed in 0 msec}
2023-07-10 20:25:27.561 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김대수' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:25:27.820 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
19. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김대수','',k.emp_nm,'김대수')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 264 msec}
2023-07-10 20:25:30.259 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5349c84
2023-07-10 20:25:30.261 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:25:30.264 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
19. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성'
	order by 1
 {executed in 1 msec}
2023-07-10 20:25:30.296 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@783d1110
2023-07-10 20:25:30.296 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b4f4572f
2023-07-10 20:25:30.296 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:25:30.296 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 20:25:30.297 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:25:30.298 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:25:30.299 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김문성'
 {executed in 0 msec}
2023-07-10 20:25:30.300 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:25:30.302 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:25:30.532 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
19. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김문성','',k.emp_nm,'김문성')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 234 msec}
2023-07-10 20:26:20.703 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d6a4a3de
2023-07-10 20:26:20.705 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:26:20.949 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('SP','ALL',b.sp_gb,'SP')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 243 msec}
2023-07-10 20:26:37.827 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fd5fe8f6
2023-07-10 20:26:37.829 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:26:38.066 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
19. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('고정','ALL',b.sp_gb,'고정')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 236 msec}
2023-07-10 20:27:03.346 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fa072ab0
2023-07-10 20:27:03.346 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-10 20:27:03.346 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김문성'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-10 20:27:03.347 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:27:03.594 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김문성'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 246 msec}
2023-07-10 20:27:03.752 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김문성'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 157 msec}
2023-07-10 20:27:03.789 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@94dbcb82
2023-07-10 20:27:03.789 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-10 20:27:03.789 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김문성' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-10 20:27:03.790 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:27:04.351 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김문성' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 561 msec}
2023-07-10 20:27:04.352 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:27:04.353 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김문성' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-07-10 20:27:04.399 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@60fc7f95
2023-07-10 20:27:04.399 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-10 20:27:04.399 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김문성' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-04' ORDER BY a.START_TIME
2023-07-10 20:27:04.400 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:27:04.433 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김문성' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-04' ORDER BY a.START_TIME
 {executed in 31 msec}
2023-07-10 20:27:04.460 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김문성' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-04' ORDER BY a.START_TIME
 {executed in 27 msec}
2023-07-10 20:27:11.651 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@df798bf2
2023-07-10 20:27:11.651 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-10 20:27:11.651 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
2023-07-10 20:27:11.653 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:27:11.655 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 2 msec}
2023-07-10 20:27:11.658 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 2 msec}
2023-07-10 20:27:13.387 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1829c8ed
2023-07-10 20:27:13.387 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:27:13.387 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 20:27:13.388 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:27:13.390 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 20:27:13.392 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김문성' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 20:27:13.421 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ba4577c6
2023-07-10 20:27:13.423 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:27:13.427 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
19. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김재중' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김재중' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김재중' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김재중' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김재중' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김재중'
	order by 1
 {executed in 2 msec}
2023-07-10 20:27:13.466 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ba053271
2023-07-10 20:27:13.466 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:27:13.467 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김재중' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 20:27:13.468 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:27:13.470 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1a187a94
2023-07-10 20:27:13.470 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김재중' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:27:13.471 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
19. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김재중'
 {executed in 1 msec}
2023-07-10 20:27:13.472 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김재중' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:27:13.742 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
20. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김재중','',k.emp_nm,'김재중')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 271 msec}
2023-07-10 20:27:25.154 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a01f2676
2023-07-10 20:27:25.155 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:27:25.158 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
19. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종'
	order by 1
 {executed in 2 msec}
2023-07-10 20:27:25.183 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9fdee121
2023-07-10 20:27:25.183 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:27:25.184 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 20:27:25.184 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fff22944
2023-07-10 20:27:25.185 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:27:25.185 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
19. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권태종'
 {executed in 0 msec}
2023-07-10 20:27:25.186 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:27:25.187 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 20:27:25.190 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:27:25.449 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
20. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권태종','',k.emp_nm,'권태종')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 260 msec}
2023-07-10 20:27:29.341 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@672ea426
2023-07-10 20:27:29.341 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-10 20:27:29.342 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
2023-07-10 20:27:29.343 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:27:29.345 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 20:27:29.346 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
19. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 20:28:10.150 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:28:10.152 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
19. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-10 20:28:10.152 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 20:28:10.246 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$KW.R38nuQ1fnjL4690Iue.f5WaFw5vjlFoXyBFOt/WgW/LovQL/5q
2023-07-10 20:28:10.338 INFO  [http-nio-10010-exec-10] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 20:28:12.825 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
19. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:28:12.828 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:28:12.830 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
20. SELECT	/* select_accident_option : 교통사고 칼럼별 option값 */ 	
			listagg( DISTINCT(GAPI_GB ),'/')  	AS gapi_gb
		,	listagg( DISTINCT(acc_gb ),'/') 	AS acc_gb
		,	listagg( DISTINCT(acc_kind ),'/') 	AS acc_kind
		,	listagg( DISTINCT(proc_result ),'/') 	AS proc_result
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100' ) AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100'  ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100'  ORDER BY 1) AS emp_nm
	FROM TBM_ACCIDENT_INFO a
 {executed in 2 msec}
2023-07-10 20:28:16.549 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96dddf06
2023-07-10 20:28:16.549 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-07-10 20:28:16.550 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
2023-07-10 20:28:16.550 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:28:16.553 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-07-10 20:28:16.556 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-07-10 20:29:16.153 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ddb8c0f
2023-07-10 20:29:16.153 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-07-10 20:29:16.153 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2022-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
2023-07-10 20:29:16.154 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:29:16.158 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2022-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-07-10 20:29:16.161 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2022-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-07-10 20:29:30.251 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:29:30.275 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
20. DELETE TBM_EMP_POINT_INFO a
	WHERE 	a.COMPANY_NO =  '100'
	AND 	a.from_date = '2023-01-01' 
	AND 	a.to_date = '2023-07-31'
 {executed in 23 msec}
2023-07-10 20:29:34.605 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
20. WITH codeInfo AS (
		SELECT 	b.emp_nm,a.* FROM TBM_COMMON_CODE_INFO a,TBL_EMPLOYEEINFO b
		WHERE 	a.COMPANY_NO = '100' 
		AND 	a.CODE_GB  = '인사평가배점'
		AND 	a.COMPANY_NO = b.company_no
	), workingInfo AS (
		SELECT 	a.EMP_NM ,a.code_type1
			, 	count(a.WORK_DATE ) AS point
		FROM 	TBM_EMP_WORKING_LOG a JOIN TBM_COMMON_CODE_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.code_type1 = b.code_nm AND b.code_gb = '인사평가배점' AND b.code_id LIKE '2%'
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.WORK_DATE BETWEEN '2023-01-01' AND '2023-07-31' 
		GROUP BY a.EMP_NM , a.code_type1
		UNION
		SELECT 	a.EMP_NM ,'사고'
			, 	count(a.acc_DATE ) 
		FROM 	TBM_ACCIDENT_INFO a 
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.acc_DATE BETWEEN '2023-01-01' AND '2023-07-31' 
		GROUP BY a.EMP_NM
		UNION
		SELECT 	a.EMP_NM ,'사고금액'
			, 	round(sum(a.OUT_TOT_AMT) / 1000000,0)
		FROM 	TBM_ACCIDENT_INFO a 
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.acc_DATE BETWEEN '2023-01-01' AND '2023-07-31' 
		GROUP BY a.EMP_NM
		UNION 
		select  a.EMP_NM ,'배차정시성'
			,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 10.0,1) AS wibanRate
		from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
		where   a.company_no = '100' 
		AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-31' 
		AND 	a.emp_nm <> '-'
		GROUP BY  a.EMP_NM 
		UNION 
		SELECT	b.emp_nm,'위험운전지수'
			,	round(avg(decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)) ,1) AS danger_level_no 
		FROM	TBL_DANGER_DRIVING_INFO b
		WHERE	b.company_no = '100'
		AND 	b.base_ym BETWEEN substring('2023-01-01',1,7) AND substring('2023-07-31',1,7) 
		GROUP BY b.EMP_NM 	
		UNION 
		SELECT 	m.emp_nm,'운행횟수'
			,	round(PERCENT_RANK() OVER (ORDER BY m.work_Avg) * 10,1) AS workRate
		FROM (
			SELECT k.emp_nm, avg(k.work_cnt) AS work_avg
			FROM (
				SELECT  a.EMP_NM 
						,substring(a.work_date,1,7) AS work_ym
						,count(a.work_Date) AS work_cnt
				FROM TBB_DRIVING_RECORD_DAY a
				WHERE a.COMPANY_NO ='100'
				AND 	a.work_date BETWEEN  '2023-01-01' AND '2023-07-31' 
				GROUP BY a.EMP_NM ,substring(a.work_date,1,7)
			)k
			GROUP BY k.emp_nm
		) m
	) 
	INSERT INTO TBM_EMP_POINT_INFO
	SELECT 	a.COMPANY_NO 
		,	'2023-01-01'
		,	'2023-07-31' 
		,	a.emp_nm
		,	a.code_gb
		,	a.CODE_ID 
		,	a.code_nm
		, 	a.MEMO 
		,	a.CODE_VALUE 
		,	a.code_max
		,	a.code_min
		,	nvl(b.point,0) AS point
		, 	a.code_value + (nvl(b.point,0) * a.code_min ) AS tot_point
		,	'batch'
		,	to_char(SYSDATE,'yyyy-MM-dd hh:mi:ss')
	FROM  codeInfo a LEFT OUTER JOIN workingInfo b ON  a.emp_nm = b.emp_nm and a.code_nm = b.CODE_TYPE1
 {executed in 4322 msec}
2023-07-10 20:31:41.514 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ddb8c0f
2023-07-10 20:31:41.514 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-07-10 20:31:41.514 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2022-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
2023-07-10 20:31:41.515 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:31:41.519 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2022-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-07-10 20:31:41.521 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2022-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-07-10 20:32:50.061 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ddb8c0f
2023-07-10 20:32:50.061 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-07-10 20:32:50.066 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2022-01-01' and '2023-07-31' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
2023-07-10 20:32:50.067 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:32:50.069 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2022-01-01' and '2023-07-31' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-07-10 20:32:50.072 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2022-01-01' and '2023-07-31' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-07-10 20:33:28.207 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@44f3209f
2023-07-10 20:33:28.207 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-10 20:33:28.207 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
2023-07-10 20:33:28.209 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:33:28.217 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 7 msec}
2023-07-10 20:33:28.219 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 20:33:28.992 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@672ea426
2023-07-10 20:33:28.992 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-10 20:33:28.993 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
2023-07-10 20:33:28.994 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:33:28.995 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 20:33:28.997 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 20:33:32.144 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b428d8dc
2023-07-10 20:33:32.144 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMPLOYEE_VACATION_INFO_emp} 
2023-07-10 20:33:32.144 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
2023-07-10 20:33:32.145 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:33:32.148 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 20:33:32.150 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 20:33:32.993 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@672ea426
2023-07-10 20:33:32.993 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-10 20:33:32.993 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
2023-07-10 20:33:32.994 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:33:32.995 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 20:33:32.998 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 20:33:52.151 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@44f3209f
2023-07-10 20:33:52.151 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-10 20:33:52.157 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
2023-07-10 20:33:52.159 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:33:52.161 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 20:33:52.165 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-07-10 20:33:53.350 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@672ea426
2023-07-10 20:33:53.350 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-10 20:33:53.351 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01-01' and '2023-07-31' order by a.acc_date desc,a.acc_time desc
2023-07-10 20:33:53.352 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:33:53.353 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01-01' and '2023-07-31' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 20:33:53.355 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01-01' and '2023-07-31' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 20:34:05.518 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:34:05.573 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
20. DELETE TBM_EMP_POINT_INFO a
	WHERE 	a.COMPANY_NO =  '100'
	AND 	a.from_date = '2023-01-01' 
	AND 	a.to_date = '2023-07-31'
 {executed in 53 msec}
2023-07-10 20:34:10.238 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
20. WITH codeInfo AS (
		SELECT 	b.emp_nm,a.* FROM TBM_COMMON_CODE_INFO a,TBL_EMPLOYEEINFO b
		WHERE 	a.COMPANY_NO = '100' 
		AND 	a.CODE_GB  = '인사평가배점'
		AND 	a.COMPANY_NO = b.company_no
	), workingInfo AS (
		SELECT 	a.EMP_NM ,a.code_type1
			, 	count(a.WORK_DATE ) AS point
		FROM 	TBM_EMP_WORKING_LOG a JOIN TBM_COMMON_CODE_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.code_type1 = b.code_nm AND b.code_gb = '인사평가배점' AND b.code_id LIKE '2%'
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.WORK_DATE BETWEEN '2023-01-01' AND '2023-07-31' 
		GROUP BY a.EMP_NM , a.code_type1
		UNION
		SELECT 	a.EMP_NM ,'사고'
			, 	count(a.acc_DATE ) 
		FROM 	TBM_ACCIDENT_INFO a 
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.acc_DATE BETWEEN '2023-01-01' AND '2023-07-31' 
		GROUP BY a.EMP_NM
		UNION
		SELECT 	a.EMP_NM ,'사고금액'
			, 	round(sum(a.OUT_TOT_AMT) / 1000000,0)
		FROM 	TBM_ACCIDENT_INFO a 
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.acc_DATE BETWEEN '2023-01-01' AND '2023-07-31' 
		GROUP BY a.EMP_NM
		UNION 
		select  a.EMP_NM ,'배차정시성'
			,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 10.0,1) AS wibanRate
		from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
		where   a.company_no = '100' 
		AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-31' 
		AND 	a.emp_nm <> '-'
		GROUP BY  a.EMP_NM 
		UNION 
		SELECT	b.emp_nm,'위험운전지수'
			,	round(avg(decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)) ,1) AS danger_level_no 
		FROM	TBL_DANGER_DRIVING_INFO b
		WHERE	b.company_no = '100'
		AND 	b.base_ym BETWEEN substring('2023-01-01',1,7) AND substring('2023-07-31',1,7) 
		GROUP BY b.EMP_NM 	
		UNION 
		SELECT 	m.emp_nm,'운행횟수'
			,	round(PERCENT_RANK() OVER (ORDER BY m.work_Avg) * 10,1) AS workRate
		FROM (
			SELECT k.emp_nm, avg(k.work_cnt) AS work_avg
			FROM (
				SELECT  a.EMP_NM 
						,substring(a.work_date,1,7) AS work_ym
						,count(a.work_Date) AS work_cnt
				FROM TBB_DRIVING_RECORD_DAY a
				WHERE a.COMPANY_NO ='100'
				AND 	a.work_date BETWEEN  '2023-01-01' AND '2023-07-31' 
				GROUP BY a.EMP_NM ,substring(a.work_date,1,7)
			)k
			GROUP BY k.emp_nm
		) m
	) 
	INSERT INTO TBM_EMP_POINT_INFO
	SELECT 	a.COMPANY_NO 
		,	'2023-01-01'
		,	'2023-07-31' 
		,	a.emp_nm
		,	a.code_gb
		,	a.CODE_ID 
		,	a.code_nm
		, 	a.MEMO 
		,	a.CODE_VALUE 
		,	a.code_max
		,	a.code_min
		,	nvl(b.point,0) AS point
		, 	a.code_value + (nvl(b.point,0) * a.code_min ) AS tot_point
		,	'batch'
		,	to_char(SYSDATE,'yyyy-MM-dd hh:mi:ss')
	FROM  codeInfo a LEFT OUTER JOIN workingInfo b ON  a.emp_nm = b.emp_nm and a.code_nm = b.CODE_TYPE1
 {executed in 4659 msec}
2023-07-10 20:34:31.796 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fd5fe8f6
2023-07-10 20:34:31.798 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:34:32.066 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
20. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('고정','ALL',b.sp_gb,'고정')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 266 msec}
2023-07-10 20:34:58.542 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9fdee121
2023-07-10 20:34:58.542 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:34:58.542 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 20:34:58.543 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:34:58.547 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 4 msec}
2023-07-10 20:34:58.550 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:35:31.577 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b428d8dc
2023-07-10 20:35:31.577 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMPLOYEE_VACATION_INFO_emp} 
2023-07-10 20:35:31.578 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
2023-07-10 20:35:31.579 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:35:31.581 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 20:35:31.582 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 20:35:32.438 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9fdee121
2023-07-10 20:35:32.438 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:35:32.438 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-10 20:35:32.439 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:35:32.441 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 20:35:32.443 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:35:36.441 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b428d8dc
2023-07-10 20:35:36.441 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMPLOYEE_VACATION_INFO_emp} 
2023-07-10 20:35:36.450 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
2023-07-10 20:35:36.451 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:35:36.452 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 20:35:36.453 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 20:35:37.283 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9fdee121
2023-07-10 20:35:37.283 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:35:37.283 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 20:35:37.284 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:35:37.286 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 20:35:37.288 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 20:35:40.354 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b428d8dc
2023-07-10 20:35:40.355 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMPLOYEE_VACATION_INFO_emp} 
2023-07-10 20:35:40.355 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
2023-07-10 20:35:40.356 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:35:40.358 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 20:35:40.360 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 20:36:05.010 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@672ea426
2023-07-10 20:36:05.010 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-10 20:36:05.019 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01-01' and '2023-07-31' order by a.acc_date desc,a.acc_time desc
2023-07-10 20:36:05.021 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:36:05.023 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01-01' and '2023-07-31' order by a.acc_date desc,a.acc_time desc
 {executed in 2 msec}
2023-07-10 20:36:05.025 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.acc_date between '2023-01-01' and '2023-07-31' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 20:36:07.915 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b428d8dc
2023-07-10 20:36:07.915 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMPLOYEE_VACATION_INFO_emp} 
2023-07-10 20:36:07.915 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01-01' and '2023-07-31' and		a.delete_yn = 'N' order by a.start_date desc
2023-07-10 20:36:07.916 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:36:07.917 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01-01' and '2023-07-31' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 20:36:07.919 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.start_date between '2023-01-01' and '2023-07-31' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 20:36:09.803 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@44f3209f
2023-07-10 20:36:09.803 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-10 20:36:09.803 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
2023-07-10 20:36:09.804 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:36:09.810 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 6 msec}
2023-07-10 20:36:09.814 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-07-10 20:36:22.600 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dc11e042
2023-07-10 20:36:22.600 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 20:36:22.600 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '권태종' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 20:36:22.602 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:36:22.605 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '권태종' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 3 msec}
2023-07-10 20:36:22.607 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '권태종' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 20:37:20.177 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@44f3209f
2023-07-10 20:37:20.177 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-10 20:37:20.177 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
2023-07-10 20:37:20.178 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:37:20.181 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 20:37:20.184 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 20:37:20.979 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dc11e042
2023-07-10 20:37:20.979 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 20:37:20.979 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '권태종' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 20:37:20.980 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:37:20.981 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '권태종' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-07-10 20:37:20.983 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01' AND '2023-07'  and		a.emp_nm = '권태종' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 20:37:35.762 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@44f3209f
2023-07-10 20:37:35.763 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-10 20:37:35.772 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
2023-07-10 20:37:35.773 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:37:35.776 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 20:37:35.780 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 20:37:37.874 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dc11e042
2023-07-10 20:37:37.874 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 20:37:37.874 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-31'  and		a.emp_nm = '권태종' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 20:37:37.875 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:37:37.876 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-31'  and		a.emp_nm = '권태종' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 20:37:37.878 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-31'  and		a.emp_nm = '권태종' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-07-10 20:37:42.023 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e4f1b4a2
2023-07-10 20:37:42.023 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-10 20:37:42.023 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권태종'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-10 20:37:42.024 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:37:42.339 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권태종'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 315 msec}
2023-07-10 20:37:42.544 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권태종'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 205 msec}
2023-07-10 20:37:42.582 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@489dae15
2023-07-10 20:37:42.582 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-10 20:37:42.582 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-10 20:37:42.584 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:37:43.173 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 589 msec}
2023-07-10 20:37:43.174 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:37:43.175 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-07-10 20:37:43.232 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@41d1c60
2023-07-10 20:37:43.232 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-10 20:37:43.232 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-07-10 20:37:43.233 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:37:43.276 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 42 msec}
2023-07-10 20:37:43.302 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 26 msec}
2023-07-10 20:38:02.220 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bb4a65b8
2023-07-10 20:38:02.220 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:38:02.221 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 20:38:02.222 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:38:02.226 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 3 msec}
2023-07-10 20:38:02.227 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:38:02.256 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5d81366
2023-07-10 20:38:02.261 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
20. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호'
	order by 1
 {executed in 3 msec}
2023-07-10 20:38:02.294 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@597ce11
2023-07-10 20:38:02.294 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:38:02.294 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 20:38:02.296 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 20:38:02.298 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a3f919d
2023-07-10 20:38:02.298 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 20:38:02.299 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:38:02.299 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
20. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김선호'
 {executed in 0 msec}
2023-07-10 20:38:02.562 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김선호','',k.emp_nm,'김선호')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 262 msec}
2023-07-10 20:38:05.235 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@41cacd32
2023-07-10 20:38:05.235 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 20:38:05.235 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-31'  and		a.emp_nm = '김선호' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 20:38:05.236 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:38:05.239 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-31'  and		a.emp_nm = '김선호' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 20:38:05.240 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-31'  and		a.emp_nm = '김선호' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 20:38:09.415 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@597ce11
2023-07-10 20:38:09.415 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:38:09.415 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 20:38:09.416 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:38:09.418 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:38:09.420 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김선호' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:38:09.438 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@99b40026
2023-07-10 20:38:09.440 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
20. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선'
	order by 1
 {executed in 2 msec}
2023-07-10 20:38:09.476 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de1b7e5d
2023-07-10 20:38:09.476 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9973bad1
2023-07-10 20:38:09.476 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 20:38:09.476 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '남기선' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 20:38:09.477 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:38:09.479 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:38:09.480 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '남기선' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 20:38:09.480 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '남기선'
 {executed in 0 msec}
2023-07-10 20:38:09.481 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '남기선' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 20:38:09.720 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
20. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('남기선','',k.emp_nm,'남기선')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 242 msec}
2023-07-10 20:38:17.824 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d5a6b9f2
2023-07-10 20:38:17.824 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 20:38:17.824 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-31'  and		a.emp_nm = '남기선' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 20:38:17.826 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:38:17.827 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-31'  and		a.emp_nm = '남기선' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 20:38:17.830 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-31'  and		a.emp_nm = '남기선' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 2 msec}
2023-07-10 20:38:30.317 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 20:38:30.317 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 20:38:30.317 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 20:38:30.318 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:38:30.319 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 20:38:30.320 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 20:39:35.601 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
20. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:39:35.602 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
20. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 20:40:03.865 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:40:03.867 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 20:40:10.549 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:40:10.550 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 20:40:56.574 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
29. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:40:56.575 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
29. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 20:42:11.664 INFO  [http-nio-10010-exec-6] [c.p.d.configuration.SecurityConfig] - addLogoutHandler:logout: 
2023-07-10 20:42:11.665 INFO  [http-nio-10010-exec-6] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-10 20:42:11.665 INFO  [http-nio-10010-exec-6] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  true
2023-07-10 20:42:11.665 INFO  [http-nio-10010-exec-6] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList -> userId p00139 
2023-07-10 20:42:11.665 INFO  [http-nio-10010-exec-6] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-10 20:42:11.665 INFO  [http-nio-10010-exec-6] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  true
2023-07-10 20:42:11.665 INFO  [http-nio-10010-exec-6] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList -> userId p00139 
2023-07-10 20:42:11.665 INFO  [http-nio-10010-exec-6] [c.p.d.configuration.SecurityConfig] - logoutSuccessHandler:onLogoutSuccess: 
2023-07-10 20:42:11.719 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 20:42:11.719 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 20:42:11.719 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 20:42:11.719 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 20:42:11.719 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 20:42:14.139 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
29. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:42:14.140 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
29. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-10 20:42:14.142 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 20:42:14.236 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$JH2LlrqIysyHrmqlDpfYKudYlzJOkgdwQxQzYgCLuUHtSLG.S7L.O
2023-07-10 20:42:14.332 INFO  [http-nio-10010-exec-4] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 20:43:04.305 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
29. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:43:04.306 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
29. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 20:43:09.216 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 20:43:09.217 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 20:43:09.217 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 20:43:09.218 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
29. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:43:09.219 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
29. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 20:43:09.221 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
29. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 20:45:44.553 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 20:45:44.553 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 20:45:44.553 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 20:45:44.554 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
29. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:45:44.555 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
29. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 20:45:44.556 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
29. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 20:46:10.161 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 20:46:10.161 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 20:46:10.161 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 20:46:10.162 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
29. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:46:10.163 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
29. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 20:46:10.165 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
29. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 20:47:25.484 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 20:47:25.484 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 20:47:25.484 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 20:47:25.485 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
29. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 20:47:25.486 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
29. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 20:47:25.488 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
29. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 20:48:18.854 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 20:48:18.854 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 20:48:18.854 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 20:48:18.855 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
30. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 20:48:18.856 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
30. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 20:48:18.858 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
30. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 20:59:29.689 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 17072 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-10 20:59:29.715 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-10 20:59:29.768 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-10 20:59:29.768 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-10 20:59:31.115 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 20:59:31.116 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-10 20:59:31.264 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 139ms. Found 3 JPA repository interfaces.
2023-07-10 20:59:31.618 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 20:59:31.618 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-10 20:59:31.663 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 20:59:31.664 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 20:59:31.665 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 20:59:31.665 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 47ms. Found 0 JDBC repository interfaces.
2023-07-10 20:59:32.109 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-10 20:59:32.176 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-10 20:59:32.176 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 20:59:32.177 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 20:59:32.177 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 20:59:32.177 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 20:59:32.177 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-10 20:59:32.178 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-10 20:59:32.178 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 20:59:32.178 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 20:59:32.178 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 20:59:32.178 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 20:59:32.178 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 20:59:32.237 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$37ec8b08] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 20:59:32.286 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-10 20:59:32.373 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$21e2ef35] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 20:59:32.458 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 20:59:32.460 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@59642fd4' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 20:59:32.466 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$46b791e7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 20:59:32.476 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$6c0ca9fd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 20:59:32.480 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 20:59:32.481 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 20:59:32.502 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$893526fb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 20:59:32.533 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$8b5742d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 20:59:32.651 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-10 20:59:32.655 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-10 20:59:33.065 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-10 20:59:33.081 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-10 20:59:33.090 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-10 20:59:33.090 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-10 20:59:34.132 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-10 20:59:34.143 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-10 20:59:34.143 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4374 ms
2023-07-10 20:59:34.945 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@3c767e36 with name: jasyptStringEncryptor
2023-07-10 20:59:35.030 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-10 20:59:37.591 ERROR [restartedMain] [com.zaxxer.hikari.pool.HikariPool] - H2 - Exception during pool initialization.
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:439)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:321)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at net.sf.log4jdbc.sql.jdbcapi.DriverSpy.connect(DriverSpy.java:401)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.<init>(HikariDataSource.java:81)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration.h2DataSource(H2DataSourceConfiguration.java:67)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration$$EnhancerBySpringCGLIB$$46853959.CGLIB$h2DataSource$5(<generated>)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration$$EnhancerBySpringCGLIB$$46853959$$FastClassBySpringCGLIB$$d6d8fb89.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration$$EnhancerBySpringCGLIB$$46853959.h2DataSource(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1471)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1213)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1175)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:218)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1340)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1186)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:392)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:608)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:596)
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1226)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorRegistryBeans.get(HealthIndicatorRegistryBeans.java:42)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration.healthIndicatorRegistry(HealthIndicatorAutoConfiguration.java:77)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$92b742bb.CGLIB$healthIndicatorRegistry$2(<generated>)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$92b742bb$$FastClassBySpringCGLIB$$728674ca.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$92b742bb.healthIndicatorRegistry(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1255)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1175)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.createEndpointBean(EndpointDiscoverer.java:141)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.createEndpointBeans(EndpointDiscoverer.java:131)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.discoverEndpoints(EndpointDiscoverer.java:120)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.getEndpoints(EndpointDiscoverer.java:114)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.servletEndpointRegistrar(ServletEndpointManagementContextConfiguration.java:72)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$3f697ed6.CGLIB$servletEndpointRegistrar$0(<generated>)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$3f697ed6$$FastClassBySpringCGLIB$$1f0d70b9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$3f697ed6.servletEndpointRegistrar(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:211)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:202)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:85)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:253)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:227)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:53)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5135)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:841)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:421)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:930)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:459)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:105)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:86)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:416)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:180)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:180)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:153)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:744)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:391)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:312)
	at com.pjy.dashboard.PjyApplication.main(PjyApplication.java:40)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused: no further information
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:542)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:597)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:633)
	at org.h2.util.NetUtils.createSocket(NetUtils.java:103)
	at org.h2.util.NetUtils.createSocket(NetUtils.java:83)
	at org.h2.engine.SessionRemote.initTransfer(SessionRemote.java:119)
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:435)
	... 171 common frames omitted
2023-07-10 20:59:37.594 ERROR [restartedMain] [o.s.b.web.embedded.tomcat.TomcatStarter] - Error starting Tomcat context. Exception: org.springframework.beans.factory.BeanCreationException. Message: Error creating bean with name 'servletEndpointRegistrar' defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method 'servletEndpointRegistrar' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'healthEndpoint' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.class]: Unsatisfied dependency expressed through method 'healthEndpoint' parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthIndicatorRegistry' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
2023-07-10 20:59:37.622 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Stopping service [Tomcat]
2023-07-10 20:59:37.627 WARN  [restartedMain] [o.a.c.loader.WebappClassLoaderBase] - The web application [ROOT] appears to have started a thread named [ReloadingTrigger-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.6/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.6/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.6/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.6/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.6/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.6/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.6/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.6/java.lang.Thread.run(Thread.java:833)
2023-07-10 20:59:37.629 WARN  [restartedMain] [o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
2023-07-10 20:59:37.648 INFO  [restartedMain] [o.s.b.a.l.ConditionEvaluationReportLoggingListener] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2023-07-10 20:59:37.650 ERROR [restartedMain] [o.springframework.boot.SpringApplication] - Application run failed
org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:156)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:744)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:391)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:312)
	at com.pjy.dashboard.PjyApplication.main(PjyApplication.java:40)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:124)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:86)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:416)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:180)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:180)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:153)
	... 11 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'servletEndpointRegistrar' defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method 'servletEndpointRegistrar' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'healthEndpoint' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.class]: Unsatisfied dependency expressed through method 'healthEndpoint' parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthIndicatorRegistry' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:211)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:202)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:85)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:253)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:227)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:53)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5135)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:841)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:421)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:930)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:459)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:105)
	... 16 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method 'servletEndpointRegistrar' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'healthEndpoint' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.class]: Unsatisfied dependency expressed through method 'healthEndpoint' parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthIndicatorRegistry' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 56 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'healthEndpoint' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.class]: Unsatisfied dependency expressed through method 'healthEndpoint' parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthIndicatorRegistry' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.createEndpointBean(EndpointDiscoverer.java:141)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.createEndpointBeans(EndpointDiscoverer.java:131)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.discoverEndpoints(EndpointDiscoverer.java:120)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.getEndpoints(EndpointDiscoverer.java:114)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.servletEndpointRegistrar(ServletEndpointManagementContextConfiguration.java:72)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$3f697ed6.CGLIB$servletEndpointRegistrar$0(<generated>)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$3f697ed6$$FastClassBySpringCGLIB$$1f0d70b9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$3f697ed6.servletEndpointRegistrar(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 57 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthIndicatorRegistry' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1255)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1175)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 82 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 96 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:218)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1340)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1186)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:392)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:608)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:596)
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1226)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorRegistryBeans.get(HealthIndicatorRegistryBeans.java:42)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration.healthIndicatorRegistry(HealthIndicatorAutoConfiguration.java:77)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$92b742bb.CGLIB$healthIndicatorRegistry$2(<generated>)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$92b742bb$$FastClassBySpringCGLIB$$728674ca.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$92b742bb.healthIndicatorRegistry(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 97 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1471)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1213)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1175)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 130 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 147 common frames omitted
Caused by: com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at com.zaxxer.hikari.pool.HikariPool.throwPoolInitializationException(HikariPool.java:576)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:562)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.<init>(HikariDataSource.java:81)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration.h2DataSource(H2DataSourceConfiguration.java:67)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration$$EnhancerBySpringCGLIB$$46853959.CGLIB$h2DataSource$5(<generated>)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration$$EnhancerBySpringCGLIB$$46853959$$FastClassBySpringCGLIB$$d6d8fb89.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration$$EnhancerBySpringCGLIB$$46853959.h2DataSource(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 148 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLNonTransientConnectionException: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:439)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:321)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at net.sf.log4jdbc.sql.jdbcapi.DriverSpy.connect(DriverSpy.java:401)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	... 161 common frames omitted
Caused by: java.net.ConnectException: Connection refused: no further information
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:542)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:597)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:633)
	at org.h2.util.NetUtils.createSocket(NetUtils.java:103)
	at org.h2.util.NetUtils.createSocket(NetUtils.java:83)
	at org.h2.engine.SessionRemote.initTransfer(SessionRemote.java:119)
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:435)
	... 171 common frames omitted
2023-07-10 21:00:17.010 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 11872 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-10 21:00:17.019 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-10 21:00:17.071 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-10 21:00:17.072 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-10 21:00:18.263 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 21:00:18.264 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-10 21:00:18.412 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 138ms. Found 3 JPA repository interfaces.
2023-07-10 21:00:18.774 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 21:00:18.775 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-10 21:00:18.820 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 21:00:18.820 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 21:00:18.821 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 21:00:18.821 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 46ms. Found 0 JDBC repository interfaces.
2023-07-10 21:00:19.286 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-10 21:00:19.354 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-10 21:00:19.355 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 21:00:19.355 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 21:00:19.355 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 21:00:19.355 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 21:00:19.355 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-10 21:00:19.356 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-10 21:00:19.356 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 21:00:19.356 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 21:00:19.356 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 21:00:19.356 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 21:00:19.356 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 21:00:19.418 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$53bcbce9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 21:00:19.471 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-10 21:00:19.561 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$3db32116] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 21:00:19.644 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 21:00:19.646 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@255ca6e8' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 21:00:19.650 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$6287c3c8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 21:00:19.660 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$87dcdbde] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 21:00:19.664 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 21:00:19.665 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 21:00:19.689 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a50558dc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 21:00:19.719 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$2485a60e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 21:00:19.859 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-10 21:00:19.864 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-10 21:00:20.301 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-10 21:00:20.319 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-10 21:00:20.329 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-10 21:00:20.330 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-10 21:00:20.694 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-10 21:00:20.706 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-10 21:00:20.706 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3634 ms
2023-07-10 21:00:21.540 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@2ee385d with name: jasyptStringEncryptor
2023-07-10 21:00:21.589 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-10 21:00:21.699 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 10 msec}
2023-07-10 21:00:21.706 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-10 21:00:22.468 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-10 21:00:22.877 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-10 21:00:22.955 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-10 21:00:22.956 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-10 21:00:23.111 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-10 21:00:23.544 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:00:23.562 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-10 21:00:24.264 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:00:24.267 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-10 21:00:24.366 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-10 21:00:24.619 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-10 21:00:25.755 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-10 21:00:25.765 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-10 21:00:25.943 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-10 21:00:25.944 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-10 21:00:25.944 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-10 21:00:25.944 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-10 21:00:25.944 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-10 21:00:25.944 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-10 21:00:25.944 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-10 21:00:25.944 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-10 21:00:25.944 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-10 21:00:26.098 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4d0b74ca, org.springframework.security.web.context.SecurityContextPersistenceFilter@566a2620, org.springframework.security.web.header.HeaderWriterFilter@69fddf54, org.springframework.web.filter.CorsFilter@2f3f7d64, org.springframework.security.web.authentication.logout.LogoutFilter@563ccb7a, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1e6a06a0, org.springframework.security.web.session.ConcurrentSessionFilter@dbe5ddb, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@503d6a5a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7c092a4b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@27b1be3e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4feed869, org.springframework.security.web.session.SessionManagementFilter@11e22a11, org.springframework.security.web.access.ExceptionTranslationFilter@477a0e1c, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@47bc81b4]
2023-07-10 21:00:26.120 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-10 21:00:26.469 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-10 21:00:26.565 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-10 21:00:26.978 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:00:27.798 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-10 21:00:27.826 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-10 21:00:27.964 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-10 21:00:27.971 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-10 21:00:28.044 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-10 21:00:28.050 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.501 seconds (JVM running for 12.885)
2023-07-10 21:00:28.050 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 21:00:28.051 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-10 21:00:28.051 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 21:00:29.472 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-10 21:00:29.472 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-10 21:00:29.492 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 20 ms
2023-07-10 21:00:35.801 WARN  [http-nio-10010-exec-1] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [131] milliseconds.
2023-07-10 21:00:35.885 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-10 21:00:35.886 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-10 21:00:35.886 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-10 21:00:35.886 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-10 21:00:35.886 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-10 21:00:37.874 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:00:37.882 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-10 21:00:37.904 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 21:00:37.993 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$o7/J2myHsaVPRfmPGUqExe0oZoeBjuZ.rB92eJ27ZBtgpDKWIPnQq
2023-07-10 21:00:38.085 INFO  [http-nio-10010-exec-1] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 21:00:42.645 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 21:00:42.647 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 21:00:48.601 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:00:48.601 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:00:48.601 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:00:48.603 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:00:48.606 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 3 msec}
2023-07-10 21:00:48.607 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:01:57.866 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:01:57.867 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 21:01:59.127 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:01:59.127 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:01:59.128 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:01:59.129 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:01:59.130 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:01:59.132 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:02:44.115 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:02:44.115 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:02:44.115 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:02:44.116 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:02:44.118 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:02:44.119 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:13:08.524 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:13:08.524 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:13:08.524 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:13:08.526 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:13:08.527 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:13:08.529 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:14:39.400 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:14:39.400 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:14:39.401 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:14:39.403 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:14:39.405 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 2 msec}
2023-07-10 21:14:39.407 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:18:04.225 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:18:04.225 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:18:04.226 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:18:04.227 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:18:04.229 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 2 msec}
2023-07-10 21:18:04.231 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:18:18.825 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:18:18.826 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:18:18.826 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:18:18.827 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:18:18.829 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:18:18.831 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:18:57.132 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:18:57.133 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:18:57.133 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:18:57.135 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:18:57.136 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:18:57.138 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:19:34.410 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:19:34.411 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:19:34.411 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:19:34.412 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:19:34.413 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:19:34.415 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:19:47.419 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:19:47.420 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:19:47.420 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:19:47.421 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:19:47.423 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:19:47.424 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:20:19.889 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:20:19.889 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:20:19.890 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:20:19.891 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:20:19.893 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:20:19.895 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:25:48.697 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:25:48.697 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:25:48.698 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:25:48.699 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:25:48.701 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:25:48.701 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:26:10.633 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:26:10.643 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
11. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'  AND code_gb like '인사평가' || '%'
 {executed in 3 msec}
2023-07-10 21:26:10.670 INFO  [http-nio-10010-exec-1] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn )
2023-07-10 21:26:10.677 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:26:10.698 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
12. batching 13 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '00' , '기본배점' , '칭찬/표창 보정용' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 1.0 , 0.0 , 'Y' )
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '01' , '사고' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -5.0 , 'Y' )
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '02' , '사고금액' , '백만원당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , 'Y' )
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '11' , '위험운전지수' , '위험level당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -2.0 , 'Y' )
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '12' , '배차정시성' , '위반율' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , 'Y' )
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '13' , '근무협조도' , '상대평가등급' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 20.0 , 2.0 , 'Y' )
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '21' , '결근' , '1일당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , 'Y' )
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '22' , '결행' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , 'Y' )
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '23' , '교통법규위반' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , 'Y' )
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '24' , '민원' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , 'Y' )
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '25' , '지각' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , 'Y' )
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '26' , '칭찬' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 5.0 , 1.0 , 'Y' )
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '27' , '표창' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 5.0 , 1.0 , 'Y' )
 {executed in 15 msec}
2023-07-10 21:26:10.718 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:26:10.719 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:26:10.719 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:26:10.721 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:26:10.724 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 2 msec}
2023-07-10 21:26:37.226 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 21:26:37.228 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:26:37.322 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 94 msec}
2023-07-10 21:26:49.848 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a6841754
2023-07-10 21:26:49.889 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:26:49.896 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 4 msec}
2023-07-10 21:26:49.939 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a643d1ff
2023-07-10 21:26:49.939 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@698c8be0
2023-07-10 21:26:49.939 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 21:26:49.939 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 21:26:49.943 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:26:49.953 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 21:26:49.958 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 18 msec}
2023-07-10 21:26:49.962 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
14. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '강근원'
 {executed in 3 msec}
2023-07-10 21:26:49.963 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 3 msec}
2023-07-10 21:26:50.309 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('강근원','',k.emp_nm,'강근원')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 355 msec}
2023-07-10 21:29:45.099 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:29:45.101 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 2 msec}
2023-07-10 21:29:52.252 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@57aa1858
2023-07-10 21:29:52.252 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-10 21:29:52.253 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg_min) AS tot_minute ,	sum(k.avg_km) AS tot_km , 	round(sum(k.avg_min)/count(k.emp_nm)) AS avg_minute , 	round(sum(k.avg_km)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg_min , 	sum(a.day_work_km) 	AS tot_km ,	sum(a.day_work_km) / count(a.work_date) AS avg_km FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-10 21:29:52.254 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:29:52.333 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg_min) AS tot_minute ,	sum(k.avg_km) AS tot_km , 	round(sum(k.avg_min)/count(k.emp_nm)) AS avg_minute , 	round(sum(k.avg_km)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg_min , 	sum(a.day_work_km) 	AS tot_km ,	sum(a.day_work_km) / count(a.work_date) AS avg_km FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 79 msec}
2023-07-10 21:29:52.360 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg_min) AS tot_minute ,	sum(k.avg_km) AS tot_km , 	round(sum(k.avg_min)/count(k.emp_nm)) AS avg_minute , 	round(sum(k.avg_km)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg_min , 	sum(a.day_work_km) 	AS tot_km ,	sum(a.day_work_km) / count(a.work_date) AS avg_km FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 26 msec}
2023-07-10 21:29:52.429 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH /* select_empWorkingTimeViewHeader : 근무일수/운행거리일수 header 조회 */ monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 16 msec}
2023-07-10 21:29:52.647 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH /* select_empWorkingTimeView : 근무일수/운행거리일수 조회 */ monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 187 msec}
2023-07-10 21:30:56.139 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@57aa1858
2023-07-10 21:30:56.139 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-10 21:30:56.139 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg_min) AS tot_minute ,	sum(k.avg_km) AS tot_km , 	round(sum(k.avg_min)/count(k.emp_nm)) AS avg_minute , 	round(sum(k.avg_km)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg_min , 	sum(a.day_work_km) 	AS tot_km ,	sum(a.day_work_km) / count(a.work_date) AS avg_km FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-10 21:30:56.141 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:30:56.170 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg_min) AS tot_minute ,	sum(k.avg_km) AS tot_km , 	round(sum(k.avg_min)/count(k.emp_nm)) AS avg_minute , 	round(sum(k.avg_km)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg_min , 	sum(a.day_work_km) 	AS tot_km ,	sum(a.day_work_km) / count(a.work_date) AS avg_km FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 28 msec}
2023-07-10 21:30:56.191 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg_min) AS tot_minute ,	sum(k.avg_km) AS tot_km , 	round(sum(k.avg_min)/count(k.emp_nm)) AS avg_minute , 	round(sum(k.avg_km)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg_min , 	sum(a.day_work_km) 	AS tot_km ,	sum(a.day_work_km) / count(a.work_date) AS avg_km FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 21 msec}
2023-07-10 21:30:56.254 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH /* select_empWorkingTimeViewHeader : 근무일수/운행거리일수 header 조회 */ monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 6 msec}
2023-07-10 21:30:56.333 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. WITH /* select_empWorkingKMView : 근무일수/운행거리일수 조회 */ monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_km AS tot_km FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_km,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 57 msec}
2023-07-10 21:31:16.138 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 21:31:16.140 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 21:31:22.475 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@944c217e
2023-07-10 21:31:22.475 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-10 21:31:22.475 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-10 21:31:22.476 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:31:22.931 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 454 msec}
2023-07-10 21:31:22.935 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 3 msec}
2023-07-10 21:31:22.985 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@35dfd172
2023-07-10 21:31:22.985 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-10 21:31:22.985 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-07-10 21:31:23.239 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 253 msec}
2023-07-10 21:31:23.434 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 195 msec}
2023-07-10 21:31:23.811 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9eb2576e
2023-07-10 21:31:23.811 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:23.811 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-07-10 21:31:23.812 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:31:23.814 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:23.815 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-10 21:31:38.413 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@381a320c
2023-07-10 21:31:38.413 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:38.413 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김경배' ORDER BY b.base_ym desc
2023-07-10 21:31:38.414 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:31:38.416 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김경배' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 21:31:38.418 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김경배' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-10 21:31:39.429 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de7964a7
2023-07-10 21:31:39.429 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:39.430 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김권호' ORDER BY b.base_ym desc
2023-07-10 21:31:39.431 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:31:39.434 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김권호' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-07-10 21:31:39.437 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김권호' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:40.391 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@512b039f
2023-07-10 21:31:40.391 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:40.391 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김만철' ORDER BY b.base_ym desc
2023-07-10 21:31:40.393 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:31:40.395 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김만철' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 21:31:40.396 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김만철' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:41.332 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@381a320c
2023-07-10 21:31:41.333 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:41.333 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김경배' ORDER BY b.base_ym desc
2023-07-10 21:31:41.334 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:31:41.336 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김경배' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:41.337 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김경배' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:41.970 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fd35383e
2023-07-10 21:31:41.970 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:41.970 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
2023-07-10 21:31:41.971 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:31:41.974 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 21:31:41.976 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:42.949 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1fdfc0b
2023-07-10 21:31:42.949 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:42.949 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김도근' ORDER BY b.base_ym desc
2023-07-10 21:31:42.950 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:31:42.952 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김도근' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:42.954 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김도근' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-10 21:31:43.646 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5c40f6f0
2023-07-10 21:31:43.646 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:43.646 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김명현' ORDER BY b.base_ym desc
2023-07-10 21:31:43.647 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:31:43.649 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김명현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:43.651 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김명현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:44.913 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bcdae883
2023-07-10 21:31:44.913 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:44.913 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김민규' ORDER BY b.base_ym desc
2023-07-10 21:31:44.913 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:31:44.916 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김민규' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 21:31:44.917 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김민규' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:45.863 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@512b039f
2023-07-10 21:31:45.863 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:45.864 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김만철' ORDER BY b.base_ym desc
2023-07-10 21:31:45.865 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:31:45.867 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김만철' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:45.869 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김만철' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-10 21:31:46.449 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de7964a7
2023-07-10 21:31:46.449 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:46.449 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김권호' ORDER BY b.base_ym desc
2023-07-10 21:31:46.450 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:31:46.451 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김권호' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:46.453 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김권호' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-10 21:31:47.164 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3517f4d2
2023-07-10 21:31:47.164 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:47.165 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
2023-07-10 21:31:47.166 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:31:47.168 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:47.169 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:48.459 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d2ad3027
2023-07-10 21:31:48.459 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:48.459 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
2023-07-10 21:31:48.461 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:31:48.462 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:48.463 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:49.956 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a0ec3373
2023-07-10 21:31:49.957 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:49.957 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-07-10 21:31:49.958 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:31:49.960 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 21:31:49.961 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:52.544 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd575536
2023-07-10 21:31:52.544 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:52.545 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강병석' ORDER BY b.base_ym desc
2023-07-10 21:31:52.545 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:31:52.547 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강병석' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:52.549 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강병석' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-10 21:31:53.476 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9eb2576e
2023-07-10 21:31:53.476 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:53.476 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-07-10 21:31:53.477 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:31:53.479 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:53.480 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:55.527 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2249524c
2023-07-10 21:31:55.527 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:31:55.528 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김동회' ORDER BY b.base_ym desc
2023-07-10 21:31:55.528 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:31:55.530 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김동회' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:31:55.532 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김동회' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 21:32:16.544 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4c2840bf
2023-07-10 21:32:16.544 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:32:16.544 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '권재범' ORDER BY b.base_ym desc
2023-07-10 21:32:16.545 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:32:16.547 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '권재범' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:32:16.548 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '권재범' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:32:18.811 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fd35383e
2023-07-10 21:32:18.811 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:32:18.812 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
2023-07-10 21:32:18.813 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:32:18.815 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 21:32:18.816 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:32:20.517 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd575536
2023-07-10 21:32:20.517 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:32:20.517 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강병석' ORDER BY b.base_ym desc
2023-07-10 21:32:20.518 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:32:20.519 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강병석' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:32:20.520 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강병석' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:32:21.797 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@381a320c
2023-07-10 21:32:21.797 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:32:21.798 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김경배' ORDER BY b.base_ym desc
2023-07-10 21:32:21.799 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:32:21.801 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김경배' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:32:21.802 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김경배' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-10 21:32:23.525 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e26cfb4c
2023-07-10 21:32:23.525 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:32:23.525 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김경연' ORDER BY b.base_ym desc
2023-07-10 21:32:23.527 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:32:23.528 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김경연' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:32:23.530 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김경연' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:32:25.806 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@512b039f
2023-07-10 21:32:25.806 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-10 21:32:25.807 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김만철' ORDER BY b.base_ym desc
2023-07-10 21:32:25.808 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:32:25.810 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김만철' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-10 21:32:25.811 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '김만철' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-10 21:40:23.842 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:40:23.843 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-10 21:40:23.845 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 21:40:23.939 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$UnSRs.B8D2C8fIcxUvAaHOn5WOiP3K6bGb59gvcs4T9ZJzrMTKXLq
2023-07-10 21:40:24.030 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 21:44:50.974 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:44:50.975 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 21:44:55.854 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:44:55.854 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:44:55.854 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:44:55.855 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:44:55.857 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:44:55.858 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:45:10.869 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:45:10.871 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
22. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'  AND code_gb like '인사평가' || '%'
 {executed in 1 msec}
2023-07-10 21:45:10.879 INFO  [http-nio-10010-exec-6] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn )
2023-07-10 21:45:10.881 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:45:10.890 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
23. batching 13 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '00' , '기본배점' , '칭찬/표창 보정용' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 1.0 , 0.0 , 'Y' )
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '01' , '사고' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -5.0 , 'Y' )
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '02' , '사고금액' , '백만원당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , 'Y' )
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '11' , '위험운전지수' , '위험level당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -2.0 , 'N' )
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '12' , '배차정시성' , '위반율' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , 'Y' )
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '13' , '근무협조도' , '상대평가등급' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 20.0 , 2.0 , 'Y' )
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '21' , '결근' , '1일당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , 'Y' )
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '22' , '결행' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , 'Y' )
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '23' , '교통법규위반' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , 'Y' )
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '24' , '민원' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , 'Y' )
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '25' , '지각' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , 'Y' )
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '26' , '칭찬' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 5.0 , 1.0 , 'Y' )
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '27' , '표창' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 5.0 , 1.0 , 'Y' )
 {executed in 8 msec}
2023-07-10 21:45:10.901 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:45:10.901 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:45:10.901 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:45:10.903 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:45:10.904 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:45:22.817 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:45:22.818 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:45:22.818 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:45:22.819 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:45:22.820 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:45:22.821 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:45:26.207 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:45:26.209 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
23. DELETE FROM TBM_COMMON_CODE_INFO WHERE company_no = '100'  AND code_gb like '인사평가' || '%'
 {executed in 1 msec}
2023-07-10 21:45:26.218 INFO  [http-nio-10010-exec-8] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , :code_gb , :code_id , :code_nm , :memo , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), :code_value , :code_max , :code_min , :use_yn )
2023-07-10 21:45:26.219 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:45:26.226 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
24. batching 13 statements:
 1:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '00' , '기본배점' , '칭찬/표창 보정용' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 1.0 , 0.0 , 'Y' )
 2:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '01' , '사고' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -5.0 , 'Y' )
 3:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '02' , '사고금액' , '백만원당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , 'Y' )
 4:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '11' , '위험운전지수' , '위험level당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -2.0 , 'Y' )
 5:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '12' , '배차정시성' , '위반율' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , 'Y' )
 6:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '13' , '근무협조도' , '상대평가등급' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 20.0 , 2.0 , 'Y' )
 7:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '21' , '결근' , '1일당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , 'Y' )
 8:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '22' , '결행' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , 'Y' )
 9:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '23' , '교통법규위반' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , 'Y' )
10:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '24' , '민원' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 10.0 , 10.0 , -1.0 , 'Y' )
11:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '25' , '지각' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 5.0 , 5.0 , -1.0 , 'Y' )
12:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '26' , '칭찬' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 5.0 , 1.0 , 'Y' )
13:  INSERT INTO TBM_COMMON_CODE_INFO (company_no,code_gb,code_id,code_nm,memo,last_chg_user,last_chg_date,code_value,code_max,code_min,use_yn) values ( '100' , '인사평가배점' , '27' , '표창' , '1건당' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'), 0.0 , 5.0 , 1.0 , 'Y' )
 {executed in 5 msec}
2023-07-10 21:45:26.235 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:45:26.235 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:45:26.235 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:45:26.237 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:45:26.239 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:48:01.606 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:48:01.606 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:48:01.608 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:48:01.608 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:48:01.610 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 2 msec}
2023-07-10 21:48:01.612 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:49:21.173 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:49:21.174 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:49:21.174 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:49:21.175 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:49:21.176 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:49:21.178 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:49:56.392 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:49:56.392 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:49:56.392 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:49:56.393 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:49:56.394 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:49:56.396 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:50:43.332 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:50:43.332 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:50:43.333 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:50:43.334 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:50:43.336 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:50:43.337 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:51:19.617 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:51:19.617 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:51:19.617 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:51:19.619 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:51:19.620 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:51:19.622 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:51:49.096 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:51:49.096 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:51:49.097 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:51:49.098 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:51:49.099 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:51:49.101 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:52:07.256 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:52:07.256 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:52:07.256 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:52:07.257 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:52:07.258 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:52:07.260 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:52:36.010 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:52:36.010 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:52:36.010 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:52:36.012 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 21:52:36.013 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:52:36.014 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:53:23.574 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:53:23.575 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:53:23.575 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:53:23.576 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:53:23.577 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:53:23.579 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:53:44.453 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:53:44.454 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:53:44.454 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:53:44.455 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:53:44.456 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:53:44.458 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 21:56:10.731 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:56:10.733 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 21:56:34.293 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:56:34.294 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 21:56:48.168 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:56:48.170 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 21:57:01.723 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e38ec862
2023-07-10 21:57:01.724 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:57:02.011 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 284 msec}
2023-07-10 21:57:33.836 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 21:57:33.836 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 21:57:33.837 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 21:57:33.838 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 21:57:33.839 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:57:33.841 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 21:57:40.225 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:57:40.313 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. DELETE TBM_EMP_POINT_INFO a
	WHERE 	a.COMPANY_NO =  '100'
	AND 	a.from_date = '2023-01-01' 
	AND 	a.to_date = '2023-07-31'
 {executed in 86 msec}
2023-07-10 21:57:44.137 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. WITH codeInfo AS (
		SELECT 	b.emp_nm,a.* FROM TBM_COMMON_CODE_INFO a,TBL_EMPLOYEEINFO b
		WHERE 	a.COMPANY_NO = '100' 
		AND 	a.CODE_GB  = '인사평가배점'
		AND 	a.COMPANY_NO = b.company_no
	), workingInfo AS (
		SELECT 	a.EMP_NM ,a.code_type1
			, 	count(a.WORK_DATE ) AS point
		FROM 	TBM_EMP_WORKING_LOG a JOIN TBM_COMMON_CODE_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.code_type1 = b.code_nm AND b.code_gb = '인사평가배점' AND b.code_id LIKE '2%'
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.WORK_DATE BETWEEN '2023-01-01' AND '2023-07-31' 
		GROUP BY a.EMP_NM , a.code_type1
		UNION
		SELECT 	a.EMP_NM ,'사고'
			, 	count(a.acc_DATE ) 
		FROM 	TBM_ACCIDENT_INFO a 
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.acc_DATE BETWEEN '2023-01-01' AND '2023-07-31' 
		GROUP BY a.EMP_NM
		UNION
		SELECT 	a.EMP_NM ,'사고금액'
			, 	round(sum(a.OUT_TOT_AMT) / 1000000,0)
		FROM 	TBM_ACCIDENT_INFO a 
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.acc_DATE BETWEEN '2023-01-01' AND '2023-07-31' 
		GROUP BY a.EMP_NM
		UNION 
		select  a.EMP_NM ,'배차정시성'
			,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 10.0,1) AS wibanRate
		from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
		where   a.company_no = '100' 
		AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-31' 
		AND 	a.emp_nm <> '-'
		GROUP BY  a.EMP_NM 
		UNION 
		SELECT	b.emp_nm,'위험운전지수'
			,	round(avg(decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)) ,1) AS danger_level_no 
		FROM	TBL_DANGER_DRIVING_INFO b
		WHERE	b.company_no = '100'
		AND 	b.base_ym BETWEEN substring('2023-01-01',1,7) AND substring('2023-07-31',1,7) 
		GROUP BY b.EMP_NM 	
		UNION 
		SELECT 	m.emp_nm,'운행횟수'
			,	round(PERCENT_RANK() OVER (ORDER BY m.work_Avg) * 10,1) AS workRate
		FROM (
			SELECT k.emp_nm, avg(k.work_cnt) AS work_avg
			FROM (
				SELECT  a.EMP_NM 
						,substring(a.work_date,1,7) AS work_ym
						,count(a.work_Date) AS work_cnt
				FROM TBB_DRIVING_RECORD_DAY a
				WHERE a.COMPANY_NO ='100'
				AND 	a.work_date BETWEEN  '2023-01-01' AND '2023-07-31' 
				GROUP BY a.EMP_NM ,substring(a.work_date,1,7)
			)k
			GROUP BY k.emp_nm
		) m
	) 
	INSERT INTO TBM_EMP_POINT_INFO
	SELECT 	a.COMPANY_NO 
		,	'2023-01-01'
		,	'2023-07-31' 
		,	a.emp_nm
		,	a.code_gb
		,	a.CODE_ID 
		,	a.code_nm
		, 	a.MEMO 
		,	a.CODE_VALUE 
		,	a.code_max
		,	a.code_min
		,	nvl(b.point,0) AS point
		, 	a.code_value + (nvl(b.point,0) * a.code_min ) AS tot_point
		,	'batch'
		,	to_char(SYSDATE,'yyyy-MM-dd hh:mi:ss')
	FROM  codeInfo a LEFT OUTER JOIN workingInfo b ON  a.emp_nm = b.emp_nm and a.code_nm = b.CODE_TYPE1
 {executed in 3799 msec}
2023-07-10 21:57:46.845 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e38ec862
2023-07-10 21:57:46.848 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 21:57:47.065 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 212 msec}
2023-07-10 22:00:10.494 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 22:00:10.494 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 22:00:10.494 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 22:00:10.495 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:00:10.497 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 22:00:10.498 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 0 msec}
2023-07-10 22:04:24.697 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b0f79a6c
2023-07-10 22:04:24.697 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_COMMON_CODE_INFO_point} 
2023-07-10 22:04:24.698 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
2023-07-10 22:04:24.699 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:04:24.700 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 22:04:24.701 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	'N' as bit, a.CODE_GB, CODE_ID, CODE_NM ,MEMO, CODE_VALUE, CODE_MIN, CODE_MAX, USE_YN FROM 	TBM_COMMON_CODE_INFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.CODE_GB = '인사평가배점'
 {executed in 1 msec}
2023-07-10 22:08:14.493 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:08:14.495 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
34. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 22:08:16.117 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e38ec862
2023-07-10 22:08:16.119 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:08:16.307 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 186 msec}
2023-07-10 22:08:51.292 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 22:08:51.293 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
34. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-10 22:08:52.447 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e38ec862
2023-07-10 22:08:52.450 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:08:52.648 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 198 msec}
2023-07-10 22:09:57.528 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:09:57.529 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
34. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-10 22:09:58.540 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e38ec862
2023-07-10 22:09:58.541 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:09:58.721 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 179 msec}
2023-07-10 22:10:15.406 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:10:15.466 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. DELETE TBM_EMP_POINT_INFO a
	WHERE 	a.COMPANY_NO =  '100'
	AND 	a.from_date = '2023-01-01' 
	AND 	a.to_date = '2023-07-31'
 {executed in 60 msec}
2023-07-10 22:10:18.839 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. WITH codeInfo AS (
		SELECT 	b.emp_nm,a.* FROM TBM_COMMON_CODE_INFO a,TBL_EMPLOYEEINFO b
		WHERE 	a.COMPANY_NO = '100' 
		AND 	a.CODE_GB  = '인사평가배점'
		AND 	a.COMPANY_NO = b.company_no
	), workingInfo AS (
		SELECT 	a.EMP_NM ,a.code_type1
			, 	count(a.WORK_DATE ) AS point
		FROM 	TBM_EMP_WORKING_LOG a JOIN TBM_COMMON_CODE_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.code_type1 = b.code_nm AND b.code_gb = '인사평가배점' AND b.code_id LIKE '2%'
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.WORK_DATE BETWEEN '2023-01-01' AND '2023-07-31' 
		GROUP BY a.EMP_NM , a.code_type1
		UNION
		SELECT 	a.EMP_NM ,'사고'
			, 	count(a.acc_DATE ) 
		FROM 	TBM_ACCIDENT_INFO a 
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.acc_DATE BETWEEN '2023-01-01' AND '2023-07-31' 
		GROUP BY a.EMP_NM
		UNION
		SELECT 	a.EMP_NM ,'사고금액'
			, 	round(sum(a.OUT_TOT_AMT) / 1000000,0)
		FROM 	TBM_ACCIDENT_INFO a 
		WHERE 	a.COMPANY_NO ='100'
		AND 	a.acc_DATE BETWEEN '2023-01-01' AND '2023-07-31' 
		GROUP BY a.EMP_NM
		UNION 
		select  a.EMP_NM ,'배차정시성'
			,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 10.0,1) AS wibanRate
		from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
		where   a.company_no = '100' 
		AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-31' 
		AND 	a.emp_nm <> '-'
		GROUP BY  a.EMP_NM 
		UNION 
		SELECT	b.emp_nm,'위험운전지수'
			,	round(avg(decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)) ,1) AS danger_level_no 
		FROM	TBL_DANGER_DRIVING_INFO b
		WHERE	b.company_no = '100'
		AND 	b.base_ym BETWEEN substring('2023-01-01',1,7) AND substring('2023-07-31',1,7) 
		GROUP BY b.EMP_NM 	
		UNION 
		SELECT 	m.emp_nm,'운행횟수'
			,	round(PERCENT_RANK() OVER (ORDER BY m.work_Avg) * 10,1) AS workRate
		FROM (
			SELECT k.emp_nm, avg(k.work_cnt) AS work_avg
			FROM (
				SELECT  a.EMP_NM 
						,substring(a.work_date,1,7) AS work_ym
						,count(a.work_Date) AS work_cnt
				FROM TBB_DRIVING_RECORD_DAY a
				WHERE a.COMPANY_NO ='100'
				AND 	a.work_date BETWEEN  '2023-01-01' AND '2023-07-31' 
				GROUP BY a.EMP_NM ,substring(a.work_date,1,7)
			)k
			GROUP BY k.emp_nm
		) m
	) 
	INSERT INTO TBM_EMP_POINT_INFO
	SELECT 	a.COMPANY_NO 
		,	'2023-01-01'
		,	'2023-07-31' 
		,	a.emp_nm
		,	a.code_gb
		,	a.CODE_ID 
		,	a.code_nm
		, 	a.MEMO 
		,	a.CODE_VALUE 
		,	a.code_max
		,	a.code_min
		,	nvl(b.point,0) AS point
		, 	a.code_value + (nvl(b.point,0) * a.code_min ) AS tot_point
		,	'batch'
		,	to_char(SYSDATE,'yyyy-MM-dd hh:mi:ss')
	FROM  codeInfo a LEFT OUTER JOIN workingInfo b ON  a.emp_nm = b.emp_nm and a.code_nm = b.CODE_TYPE1
 {executed in 3365 msec}
2023-07-10 22:10:21.798 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e38ec862
2023-07-10 22:10:21.800 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:10:21.993 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('','',k.emp_nm,'')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 192 msec}
2023-07-10 22:10:29.744 INFO  [RMI TCP Connection(80)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-10 22:10:29.781 INFO  [RMI TCP Connection(80)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-10 22:10:29.785 INFO  [RMI TCP Connection(80)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-10 22:10:29.795 INFO  [RMI TCP Connection(80)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-10 22:10:29.845 INFO  [RMI TCP Connection(80)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-10 22:10:48.170 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 16372 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-10 22:10:48.176 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-10 22:10:48.233 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-10 22:10:48.233 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-10 22:10:49.408 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 22:10:49.408 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-10 22:10:49.568 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 149ms. Found 3 JPA repository interfaces.
2023-07-10 22:10:49.913 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 22:10:49.914 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-10 22:10:49.959 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 22:10:49.960 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 22:10:49.960 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 22:10:49.960 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 46ms. Found 0 JDBC repository interfaces.
2023-07-10 22:10:50.403 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-10 22:10:50.474 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-10 22:10:50.474 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 22:10:50.474 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 22:10:50.474 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 22:10:50.475 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 22:10:50.475 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-10 22:10:50.475 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-10 22:10:50.475 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 22:10:50.476 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 22:10:50.476 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 22:10:50.476 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 22:10:50.476 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 22:10:50.534 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$beeee6d2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:10:50.583 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-10 22:10:50.674 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$a8e54aff] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:10:50.758 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:10:50.760 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4b15850e' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:10:50.761 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$cdb9edb1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:10:50.771 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$f30f05c7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:10:50.773 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:10:50.776 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:10:50.797 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$103782c5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:10:50.825 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$8fb7cff7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:10:50.960 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-10 22:10:50.966 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-10 22:10:51.415 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-10 22:10:51.432 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-10 22:10:51.442 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-10 22:10:51.442 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-10 22:10:51.827 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-10 22:10:51.838 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-10 22:10:51.838 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3605 ms
2023-07-10 22:10:52.670 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@56a63d8c with name: jasyptStringEncryptor
2023-07-10 22:10:52.726 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-10 22:10:52.812 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 8 msec}
2023-07-10 22:10:52.816 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-10 22:10:53.641 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-10 22:10:54.011 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-10 22:10:54.086 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-10 22:10:54.087 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-10 22:10:54.240 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-10 22:10:54.485 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:10:54.503 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-10 22:10:55.202 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:10:55.205 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-10 22:10:55.254 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-10 22:10:55.505 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-10 22:10:56.564 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-10 22:10:56.576 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-10 22:10:56.784 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-10 22:10:56.784 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-10 22:10:56.784 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-10 22:10:56.785 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-10 22:10:56.785 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-10 22:10:56.785 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-10 22:10:56.785 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-10 22:10:56.785 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-10 22:10:56.785 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-10 22:10:56.943 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@baa88bf, org.springframework.security.web.context.SecurityContextPersistenceFilter@6fffbb5a, org.springframework.security.web.header.HeaderWriterFilter@56a79e2d, org.springframework.web.filter.CorsFilter@40669b2, org.springframework.security.web.authentication.logout.LogoutFilter@59a97202, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7734a44d, org.springframework.security.web.session.ConcurrentSessionFilter@55f4fadd, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6f30f25b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4af453be, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@24d861eb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7bbf577a, org.springframework.security.web.session.SessionManagementFilter@7783084c, org.springframework.security.web.access.ExceptionTranslationFilter@2d03d644, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@33919b00]
2023-07-10 22:10:56.965 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-10 22:10:57.319 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-10 22:10:57.392 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-10 22:10:57.810 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:10:58.638 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-10 22:10:58.666 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-10 22:10:58.812 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-10 22:10:58.819 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-10 22:10:58.863 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-10 22:10:58.869 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.143 seconds (JVM running for 12.491)
2023-07-10 22:10:58.869 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 22:10:58.870 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-10 22:10:58.870 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 22:10:59.926 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-10 22:10:59.926 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-10 22:10:59.955 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 29 ms
2023-07-10 22:13:00.515 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:13:00.528 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:13:00.544 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 14 msec}
2023-07-10 22:13:02.491 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4dc28354
2023-07-10 22:13:02.531 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:13:02.539 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영'
	order by 1
 {executed in 2 msec}
2023-07-10 22:13:02.580 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4d823dff
2023-07-10 22:13:02.580 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@10caf7e0
2023-07-10 22:13:02.580 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:13:02.581 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:13:02.583 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:13:02.585 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 3 msec}
2023-07-10 22:13:02.587 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:13:02.646 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '구진영'
 {executed in 1 msec}
2023-07-10 22:13:02.784 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('구진영','',k.emp_nm,'구진영')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 199 msec}
2023-07-10 22:13:48.281 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f71bddca
2023-07-10 22:13:48.282 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:13:48.285 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 2 msec}
2023-07-10 22:13:48.314 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ba245256
2023-07-10 22:13:48.315 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6db9875
2023-07-10 22:13:48.315 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:13:48.315 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:13:48.317 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:13:48.318 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:13:48.318 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 3 msec}
2023-07-10 22:13:48.320 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 0 msec}
2023-07-10 22:13:48.320 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:13:48.554 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 235 msec}
2023-07-10 22:13:58.616 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@54a31a49
2023-07-10 22:13:58.618 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:13:58.620 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석'
	order by 1
 {executed in 1 msec}
2023-07-10 22:13:58.660 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5462d4f4
2023-07-10 22:13:58.661 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:13:58.661 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경석' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:13:58.661 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@17ab8ed5
2023-07-10 22:13:58.662 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경석'
 {executed in 1 msec}
2023-07-10 22:13:58.662 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:13:58.663 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:13:58.666 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경석' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:13:58.668 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경석' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:13:58.877 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김경석','',k.emp_nm,'김경석')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 212 msec}
2023-07-10 22:14:00.108 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dd5b9f11
2023-07-10 22:14:00.109 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:14:00.112 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수'
	order by 1
 {executed in 2 msec}
2023-07-10 22:14:00.138 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a064139d
2023-07-10 22:14:00.138 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dd1b59bc
2023-07-10 22:14:00.138 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:14:00.138 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김대수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:14:00.139 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:14:00.140 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김대수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:14:00.142 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김대수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 22:14:00.150 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:14:00.152 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김대수'
 {executed in 0 msec}
2023-07-10 22:14:00.330 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김대수','',k.emp_nm,'김대수')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 189 msec}
2023-07-10 22:14:01.624 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a9cfbbf1
2023-07-10 22:14:01.625 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:14:01.628 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근'
	order by 1
 {executed in 1 msec}
2023-07-10 22:14:01.656 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a98f769c
2023-07-10 22:14:01.656 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:14:01.656 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김도근' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:14:01.656 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6cd8307d
2023-07-10 22:14:01.656 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:14:01.657 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:14:01.658 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김도근'
 {executed in 0 msec}
2023-07-10 22:14:01.659 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김도근' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:14:01.661 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김도근' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 22:14:01.842 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김도근','',k.emp_nm,'김도근')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 183 msec}
2023-07-10 22:17:10.992 INFO  [RMI TCP Connection(19)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-10 22:17:11.019 INFO  [RMI TCP Connection(19)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-10 22:17:11.023 INFO  [RMI TCP Connection(19)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-10 22:17:11.031 INFO  [RMI TCP Connection(19)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-10 22:17:11.079 INFO  [RMI TCP Connection(19)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-10 22:17:29.343 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 19224 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-10 22:17:29.348 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-10 22:17:29.403 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-10 22:17:29.403 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-10 22:17:30.582 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 22:17:30.582 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-10 22:17:30.734 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 142ms. Found 3 JPA repository interfaces.
2023-07-10 22:17:31.095 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-10 22:17:31.095 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-10 22:17:31.147 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 22:17:31.148 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 22:17:31.148 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-10 22:17:31.149 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 54ms. Found 0 JDBC repository interfaces.
2023-07-10 22:17:31.586 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-10 22:17:31.662 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-10 22:17:31.663 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 22:17:31.663 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 22:17:31.663 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-10 22:17:31.663 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 22:17:31.664 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-10 22:17:31.664 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-10 22:17:31.664 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 22:17:31.664 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 22:17:31.664 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 22:17:31.664 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-10 22:17:31.664 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-10 22:17:31.724 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$51633e38] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:17:31.775 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-10 22:17:31.863 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$3b59a265] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:17:31.946 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:17:31.949 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@71a70aae' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:17:31.954 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$602e4517] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:17:31.964 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$85835d2d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:17:31.968 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:17:31.969 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:17:31.991 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a2abda2b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:17:32.020 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$222c275d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-10 22:17:32.151 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-10 22:17:32.156 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-10 22:17:32.583 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-10 22:17:32.600 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-10 22:17:32.611 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-10 22:17:32.611 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-10 22:17:32.981 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-10 22:17:32.991 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-10 22:17:32.992 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3589 ms
2023-07-10 22:17:33.831 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@26fed947 with name: jasyptStringEncryptor
2023-07-10 22:17:33.878 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-10 22:17:33.964 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-10 22:17:33.967 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-10 22:17:34.741 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-10 22:17:35.109 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-10 22:17:35.183 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-10 22:17:35.185 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-10 22:17:35.335 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-10 22:17:35.568 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:17:35.585 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-10 22:17:36.296 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:17:36.298 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-10 22:17:36.351 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-10 22:17:36.592 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-10 22:17:37.655 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-10 22:17:37.664 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-10 22:17:37.856 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-10 22:17:37.857 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-10 22:17:37.857 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-10 22:17:37.857 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-10 22:17:37.857 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-10 22:17:37.857 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-10 22:17:37.857 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-10 22:17:37.857 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-10 22:17:37.857 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-10 22:17:38.011 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1fe35eca, org.springframework.security.web.context.SecurityContextPersistenceFilter@406dcd95, org.springframework.security.web.header.HeaderWriterFilter@7c97a94d, org.springframework.web.filter.CorsFilter@7ed661f4, org.springframework.security.web.authentication.logout.LogoutFilter@1b0d8140, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6e03663a, org.springframework.security.web.session.ConcurrentSessionFilter@312fa6f, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@9ce9018, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7db28177, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6032dc67, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5713b85c, org.springframework.security.web.session.SessionManagementFilter@7dee8dc2, org.springframework.security.web.access.ExceptionTranslationFilter@50514c00, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2d03d644]
2023-07-10 22:17:38.032 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-10 22:17:38.388 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-10 22:17:38.468 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-10 22:17:38.899 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:17:39.765 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-10 22:17:39.795 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-10 22:17:39.936 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-10 22:17:39.942 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-10 22:17:39.996 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-10 22:17:40.001 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.127 seconds (JVM running for 12.491)
2023-07-10 22:17:40.001 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 22:17:40.001 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-10 22:17:40.002 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-10 22:17:40.982 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-10 22:17:40.982 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-10 22:17:41.001 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 19 ms
2023-07-10 22:17:46.444 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:17:46.456 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:17:46.471 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 15 msec}
2023-07-10 22:17:48.237 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f71bddca
2023-07-10 22:17:48.277 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:17:48.285 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 1 msec}
2023-07-10 22:17:48.328 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ba245256
2023-07-10 22:17:48.328 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6db9875
2023-07-10 22:17:48.328 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:17:48.328 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:17:48.332 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 22:17:48.333 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:17:48.334 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 22:17:48.412 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 0 msec}
2023-07-10 22:17:48.544 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 210 msec}
2023-07-10 22:24:19.100 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:24:19.101 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:24:19.102 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:24:22.064 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a8bdf359
2023-07-10 22:24:22.066 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:24:22.069 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 2 msec}
2023-07-10 22:24:22.098 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a87dae04
2023-07-10 22:24:22.098 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:24:22.099 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6bc667e5
2023-07-10 22:24:22.099 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:24:22.100 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:24:22.100 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:24:22.101 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:24:22.102 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 0 msec}
2023-07-10 22:24:22.104 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '고상욱' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:24:22.305 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('고상욱','',k.emp_nm,'고상욱')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 203 msec}
2023-07-10 22:24:57.730 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:24:57.732 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:24:57.745 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 13 msec}
2023-07-10 22:24:59.156 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@506f824
2023-07-10 22:24:59.158 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 22:24:59.162 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 2 msec}
2023-07-10 22:24:59.206 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4c6b2cf
2023-07-10 22:24:59.206 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:24:59.207 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c80f6cb0
2023-07-10 22:24:59.207 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:24:59.208 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:24:59.208 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:24:59.208 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 0 msec}
2023-07-10 22:24:59.211 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:24:59.214 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:24:59.439 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('국수현','',k.emp_nm,'국수현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 229 msec}
2023-07-10 22:25:37.233 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:25:37.234 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:25:37.235 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:26:35.029 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@42d11d10
2023-07-10 22:26:35.030 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:26:35.033 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박노철' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박노철' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박노철' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박노철' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박노철' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박노철'
	order by 1
 {executed in 2 msec}
2023-07-10 22:26:35.062 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5d9919c
2023-07-10 22:26:35.063 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4290d7bb
2023-07-10 22:26:35.063 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:26:35.063 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '박노철' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:26:35.064 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:26:35.064 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:26:35.065 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '박노철'
 {executed in 1 msec}
2023-07-10 22:26:35.067 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '박노철' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:26:35.070 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '박노철' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 22:26:35.278 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('박노철','',k.emp_nm,'박노철')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 214 msec}
2023-07-10 22:27:28.020 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:27:28.021 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:27:28.022 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 22:27:30.804 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d529151c
2023-07-10 22:27:30.806 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:27:30.808 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 2 msec}
2023-07-10 22:27:30.835 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d4e8cfc7
2023-07-10 22:27:30.835 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@983189a8
2023-07-10 22:27:30.835 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:27:30.835 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '강병석' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:27:30.836 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:27:30.838 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:27:30.838 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '강병석' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:27:30.840 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '강병석'
 {executed in 0 msec}
2023-07-10 22:27:30.840 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '강병석' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 22:27:31.043 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('강병석','',k.emp_nm,'강병석')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 206 msec}
2023-07-10 22:27:50.423 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:27:50.425 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:27:50.426 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:27:54.949 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e64b248d
2023-07-10 22:27:54.951 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:27:54.953 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호'
	order by 1
 {executed in 1 msec}
2023-07-10 22:27:54.981 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e60adf38
2023-07-10 22:27:54.981 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:27:54.981 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a9539919
2023-07-10 22:27:54.981 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:27:54.983 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:27:54.984 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:27:54.985 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:27:54.986 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김권호'
 {executed in 0 msec}
2023-07-10 22:27:54.987 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 22:27:55.168 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김권호','',k.emp_nm,'김권호')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 184 msec}
2023-07-10 22:31:20.462 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:31:20.463 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:31:20.464 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:31:31.364 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:31:31.365 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:31:31.366 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:31:37.317 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:31:37.318 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:31:37.320 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:31:43.364 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:31:43.365 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:31:43.366 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 22:32:32.676 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:32:32.677 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:32:32.699 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 21 msec}
2023-07-10 22:32:41.595 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:32:41.596 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:32:41.597 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:32:44.163 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3febf1f2
2023-07-10 22:32:44.164 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:32:44.167 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배'
	order by 1
 {executed in 2 msec}
2023-07-10 22:32:44.194 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3fabac9d
2023-07-10 22:32:44.194 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:32:44.194 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경배' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:32:44.195 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2f4667e
2023-07-10 22:32:44.195 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:32:44.196 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:32:44.196 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경배'
 {executed in 1 msec}
2023-07-10 22:32:44.197 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경배' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:32:44.199 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경배' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:32:44.385 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김경배','',k.emp_nm,'김경배')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 187 msec}
2023-07-10 22:34:31.745 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:34:31.746 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:34:31.748 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 22:34:34.001 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@506f824
2023-07-10 22:34:34.003 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:34:34.005 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 1 msec}
2023-07-10 22:34:34.031 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4c6b2cf
2023-07-10 22:34:34.031 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:34:34.031 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:34:34.032 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:34:34.032 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c80f6cb0
2023-07-10 22:34:34.033 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 0 msec}
2023-07-10 22:34:34.034 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:34:34.034 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:34:34.037 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:34:34.225 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('국수현','',k.emp_nm,'국수현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 187 msec}
2023-07-10 22:35:43.506 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:35:43.507 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:35:43.509 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:36:28.828 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:36:28.830 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:36:28.831 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:36:33.889 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:36:33.890 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:36:33.892 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:39:36.892 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:39:36.893 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:39:36.913 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 22:39:50.613 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:39:50.614 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:39:50.615 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:40:41.504 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:40:41.505 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:40:41.506 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 22:41:00.008 INFO  [pjy-task-pool-1] [c.pjy.dashboard.schedule.DailyScheduler] - DailyScheduler insert_TBB_DRIVING_RECORD_DAY start...
2023-07-10 22:41:00.009 DEBUG [pjy-task-pool-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:41:00.180 DEBUG [pjy-task-pool-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT 	DISTINCT SUBSTRING(work_date,1,7) 	as base_ym
			from	TBL_DRIVING_RECORD
			WHERE 	WORK_DATE LIKE  TO_CHAR( SYSDATE,'yyyy') || '%'
 {executed in 170 msec}
2023-07-10 22:41:00.427 DEBUG [pjy-task-pool-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. MERGE INTO TBB_DRIVING_RECORD_DAY KEY (COMPANY_NO,work_date,route_nm,emp_nm)
			SELECT 	a.COMPANY_NO
				, 	a.WORK_DATE 
				,	a.ROUTE_NM 
				,	b.EMP_NM 
				,	sum(tot_min) 
				,	sum(bms_km) 
				,	'batch'
				, 	TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
				,	a.driver_id
			FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	a.WORK_DATE like '2023-03' || '%'
			AND 	a.DRIVER_ID > 0
			GROUP BY a.ROUTE_NM ,b.EMP_NM , a.WORK_DATE
 {executed in 243 msec}
2023-07-10 22:41:00.691 DEBUG [pjy-task-pool-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. MERGE INTO TBB_DRIVING_RECORD_DAY KEY (COMPANY_NO,work_date,route_nm,emp_nm)
			SELECT 	a.COMPANY_NO
				, 	a.WORK_DATE 
				,	a.ROUTE_NM 
				,	b.EMP_NM 
				,	sum(tot_min) 
				,	sum(bms_km) 
				,	'batch'
				, 	TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
				,	a.driver_id
			FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	a.WORK_DATE like '2023-04' || '%'
			AND 	a.DRIVER_ID > 0
			GROUP BY a.ROUTE_NM ,b.EMP_NM , a.WORK_DATE
 {executed in 263 msec}
2023-07-10 22:41:00.691 INFO  [pjy-task-pool-1] [c.pjy.dashboard.schedule.DailyScheduler] - DailyScheduler insert_TBB_DRIVING_RECORD_DAY end...
2023-07-10 22:41:59.565 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:41:59.567 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:41:59.569 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:42:28.588 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:42:28.589 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:42:28.590 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 22:44:01.699 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4549eef2
2023-07-10 22:44:01.700 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:44:01.704 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='임충환' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='임충환' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='임충환' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='임충환' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='임충환' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='임충환'
	order by 1
 {executed in 2 msec}
2023-07-10 22:44:01.731 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4509a99d
2023-07-10 22:44:01.731 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:44:01.731 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '임충환' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:44:01.733 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@852637e
2023-07-10 22:44:01.733 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '임충환' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 22:44:01.734 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:44:01.735 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:44:01.735 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '임충환' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 22:44:01.736 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '임충환'
 {executed in 1 msec}
2023-07-10 22:44:01.965 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('임충환','',k.emp_nm,'임충환')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 229 msec}
2023-07-10 22:44:03.214 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5953a158
2023-07-10 22:44:03.214 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMPLOYEE_VACATION_INFO_emp} 
2023-07-10 22:44:03.214 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '임충환' and     a.start_date between '2023-01-01' and '2023-07-31' and		a.delete_yn = 'N' order by a.start_date desc
2023-07-10 22:44:03.216 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:44:03.218 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '임충환' and     a.start_date between '2023-01-01' and '2023-07-31' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 22:44:03.220 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '임충환' and     a.start_date between '2023-01-01' and '2023-07-31' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-10 22:44:04.006 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c596ca2
2023-07-10 22:44:04.006 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-10 22:44:04.006 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '임충환' and     a.acc_date between '2023-01-01' and '2023-07-31' order by a.acc_date desc,a.acc_time desc
2023-07-10 22:44:04.007 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:44:04.010 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '임충환' and     a.acc_date between '2023-01-01' and '2023-07-31' order by a.acc_date desc,a.acc_time desc
 {executed in 2 msec}
2023-07-10 22:44:04.012 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '임충환' and     a.acc_date between '2023-01-01' and '2023-07-31' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-10 22:44:04.753 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ea1de91b
2023-07-10 22:44:04.753 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-10 22:44:04.753 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '임충환' ORDER BY b.base_ym desc
2023-07-10 22:44:04.754 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:44:04.761 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '임충환' ORDER BY b.base_ym desc
 {executed in 6 msec}
2023-07-10 22:44:04.764 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '임충환' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-10 22:44:05.455 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@813ca8be
2023-07-10 22:44:05.455 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-10 22:44:05.455 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-31'  and		a.emp_nm = '임충환' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-10 22:44:05.456 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:44:05.460 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-31'  and		a.emp_nm = '임충환' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 2 msec}
2023-07-10 22:44:05.462 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-31'  and		a.emp_nm = '임충환' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-10 22:44:06.233 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8a1c7d1e
2023-07-10 22:44:06.233 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-10 22:44:06.233 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '임충환'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-10 22:44:06.235 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:44:06.521 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '임충환'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 286 msec}
2023-07-10 22:44:06.664 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '임충환'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 143 msec}
2023-07-10 22:44:06.701 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@24f11df0
2023-07-10 22:44:06.701 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-10 22:44:06.701 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '임충환' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-10 22:44:07.328 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '임충환' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 627 msec}
2023-07-10 22:44:07.329 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:44:07.330 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '임충환' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-07-10 22:44:07.369 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c7d569a
2023-07-10 22:44:07.369 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-10 22:44:07.369 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '임충환' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-07-10 22:44:07.428 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '임충환' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 59 msec}
2023-07-10 22:44:07.459 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '임충환' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 31 msec}
2023-07-10 22:45:33.839 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 22:45:33.840 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 22:45:33.858 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 18 msec}
2023-07-10 22:45:37.703 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dee2168c
2023-07-10 22:45:37.705 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 22:45:37.707 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영'
	order by 1
 {executed in 2 msec}
2023-07-10 22:45:37.733 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dea1d137
2023-07-10 22:45:37.733 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 22:45:37.733 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1ea8b18
2023-07-10 22:45:37.733 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김기영' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 22:45:37.734 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:45:37.734 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 22:45:37.734 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김기영'
 {executed in 0 msec}
2023-07-10 22:45:37.739 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김기영' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 4 msec}
2023-07-10 22:45:37.741 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김기영' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 0 msec}
2023-07-10 22:45:37.965 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김기영','',k.emp_nm,'김기영')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 229 msec}
2023-07-10 23:28:52.627 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6412b6d6
2023-07-10 23:28:52.629 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:28:52.631 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현'
	order by 1
 {executed in 1 msec}
2023-07-10 23:28:52.659 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@63d27181
2023-07-10 23:28:52.659 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:28:52.660 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김명현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:28:52.661 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@271b2b62
2023-07-10 23:28:52.662 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김명현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:28:52.662 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:28:52.663 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:28:52.664 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김명현'
 {executed in 0 msec}
2023-07-10 23:28:52.664 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김명현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:28:52.867 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김명현','',k.emp_nm,'김명현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 203 msec}
2023-07-10 23:29:37.305 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:29:37.306 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:29:37.329 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 22 msec}
2023-07-10 23:32:01.968 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:32:01.969 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-10 23:32:01.977 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-10 23:32:02.067 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$7sWEsVWeSWJGdsTVe0mdA.9AZ6eJA//4sgrJ7NtKnmli04yas5wwe
2023-07-10 23:32:02.297 WARN  [http-nio-10010-exec-8] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [135] milliseconds.
2023-07-10 23:32:02.300 INFO  [http-nio-10010-exec-8] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-10 23:32:04.109 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:32:04.111 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:32:04.131 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 20 msec}
2023-07-10 23:32:20.567 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:32:20.568 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:32:20.569 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:36:33.145 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:36:33.146 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:36:33.163 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
34. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 17 msec}
2023-07-10 23:36:50.367 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:36:50.368 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
40. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:36:50.387 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
40. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 23:37:10.410 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:37:10.411 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:37:10.431 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 23:37:45.109 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:37:45.110 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:37:45.111 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:39:20.532 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:39:20.533 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:39:20.534 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:41:32.572 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:41:32.573 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:41:32.575 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 23:41:34.087 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@53fa00a5
2023-07-10 23:41:34.088 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:41:34.091 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 1 msec}
2023-07-10 23:41:34.122 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@53b9bb50
2023-07-10 23:41:34.122 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:41:34.122 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:41:34.122 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@17027531
2023-07-10 23:41:34.123 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:41:34.125 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:41:34.125 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:41:34.126 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
43. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 1 msec}
2023-07-10 23:41:34.127 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:41:34.315 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 190 msec}
2023-07-10 23:42:18.975 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:42:18.976 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:42:18.978 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 23:42:29.663 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:42:29.664 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:42:29.694 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 29 msec}
2023-07-10 23:42:44.662 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:42:44.663 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:42:44.664 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:42:50.799 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:42:50.800 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:42:50.818 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 17 msec}
2023-07-10 23:43:37.896 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:43:37.897 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:43:37.899 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 2 msec}
2023-07-10 23:44:12.420 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:44:12.421 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:44:12.422 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:45:02.148 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:45:02.150 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 23:45:02.150 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 23:45:15.346 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:45:15.347 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:45:15.349 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 23:45:59.940 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:45:59.941 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:45:59.942 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:46:08.145 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:46:08.147 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:46:08.148 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:46:35.186 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:46:35.187 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:46:35.189 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 23:46:57.478 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:46:57.479 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:46:57.480 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:47:06.824 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:47:06.825 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:47:06.827 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 2 msec}
2023-07-10 23:47:52.849 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:47:52.850 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:47:52.851 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:48:13.433 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:48:13.434 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:48:13.435 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:48:28.804 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:48:28.805 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:48:28.807 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 23:51:12.661 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:51:12.662 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:51:12.663 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 23:51:38.287 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:51:38.288 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:51:38.289 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 23:53:24.003 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:53:24.004 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:53:24.005 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:53:46.469 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:53:46.470 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:53:46.471 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 23:53:56.992 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:53:56.993 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:53:56.994 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:54:01.368 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f71bddca
2023-07-10 23:54:01.368 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:54:01.371 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 1 msec}
2023-07-10 23:54:01.397 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6db9875
2023-07-10 23:54:01.397 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ba245256
2023-07-10 23:54:01.397 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:54:01.397 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:54:01.398 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:54:01.402 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:54:01.402 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 3 msec}
2023-07-10 23:54:01.403 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
43. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 0 msec}
2023-07-10 23:54:01.403 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 23:54:01.612 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 213 msec}
2023-07-10 23:54:28.406 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:54:28.407 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:54:28.408 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:54:30.020 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@da7ef00d
2023-07-10 23:54:30.021 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:54:30.025 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 2 msec}
2023-07-10 23:54:30.050 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9d876499
2023-07-10 23:54:30.050 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@da3eaab8
2023-07-10 23:54:30.051 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:54:30.051 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:54:30.052 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:54:30.052 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:54:30.052 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권오현'
 {executed in 0 msec}
2023-07-10 23:54:30.054 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 23:54:30.056 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:54:30.246 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 191 msec}
2023-07-10 23:55:00.287 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:55:00.287 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:55:00.289 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-07-10 23:55:01.743 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4dc28354
2023-07-10 23:55:01.744 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:55:01.747 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영'
	order by 1
 {executed in 2 msec}
2023-07-10 23:55:01.772 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@10caf7e0
2023-07-10 23:55:01.773 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4d823dff
2023-07-10 23:55:01.773 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:55:01.773 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:55:01.774 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:55:01.774 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:55:01.775 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 23:55:01.775 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '구진영'
 {executed in 1 msec}
2023-07-10 23:55:01.777 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '구진영' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:55:01.999 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
43. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('구진영','',k.emp_nm,'구진영')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 223 msec}
2023-07-10 23:55:17.376 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:55:17.377 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:55:17.378 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:55:18.737 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3ce9b4b8
2023-07-10 23:55:18.739 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:55:18.742 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
42. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종'
	order by 1
 {executed in 3 msec}
2023-07-10 23:55:18.769 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3ca96f63
2023-07-10 23:55:18.769 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fff22944
2023-07-10 23:55:18.769 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:55:18.769 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:55:18.770 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:55:18.770 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권태종'
 {executed in 0 msec}
2023-07-10 23:55:18.771 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:55:18.773 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:55:18.775 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:55:18.979 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
43. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권태종','',k.emp_nm,'권태종')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 205 msec}
2023-07-10 23:55:26.549 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:55:26.550 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:55:26.551 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:55:27.650 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f71bddca
2023-07-10 23:55:27.652 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:55:27.654 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 2 msec}
2023-07-10 23:55:27.683 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ba245256
2023-07-10 23:55:27.683 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6db9875
2023-07-10 23:55:27.684 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:55:27.684 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:55:27.685 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:55:27.685 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:55:27.686 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
42. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 0 msec}
2023-07-10 23:55:27.686 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 23:55:27.689 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권용수' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:55:27.880 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권용수','',k.emp_nm,'권용수')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 195 msec}
2023-07-10 23:55:55.621 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:55:55.622 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
44. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:55:55.641 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
44. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 23:55:57.007 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@506f824
2023-07-10 23:55:57.009 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
44. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:55:57.012 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 2 msec}
2023-07-10 23:55:57.040 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c80f6cb0
2023-07-10 23:55:57.040 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4c6b2cf
2023-07-10 23:55:57.041 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:55:57.041 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:55:57.042 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
45. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:55:57.042 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
46. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:55:57.043 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
46. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 1 msec}
2023-07-10 23:55:57.044 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
45. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:55:57.047 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
45. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '국수현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 23:55:57.236 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
44. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('국수현','',k.emp_nm,'국수현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 194 msec}
2023-07-10 23:56:11.069 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:56:11.070 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
46. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:56:11.090 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
46. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-07-10 23:56:13.444 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@53fa00a5
2023-07-10 23:56:13.445 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
46. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:56:13.447 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
46. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 1 msec}
2023-07-10 23:56:13.473 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@53b9bb50
2023-07-10 23:56:13.473 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:56:13.474 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:56:13.474 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@17027531
2023-07-10 23:56:13.475 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
47. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:56:13.476 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
46. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 23:56:13.477 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
48. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-10 23:56:13.478 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
48. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 0 msec}
2023-07-10 23:56:13.478 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
46. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 0 msec}
2023-07-10 23:56:13.678 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
47. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 201 msec}
2023-07-10 23:56:38.725 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:56:38.726 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
50. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:56:38.741 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
50. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 15 msec}
2023-07-10 23:56:39.973 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@da7ef00d
2023-07-10 23:56:39.974 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
50. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:56:39.977 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
50. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 1 msec}
2023-07-10 23:56:40.003 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@da3eaab8
2023-07-10 23:56:40.003 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:56:40.003 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:56:40.003 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9d876499
2023-07-10 23:56:40.005 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
50. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 23:56:40.006 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:56:40.006 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:56:40.007 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
50. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 23:56:40.007 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
52. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권오현'
 {executed in 1 msec}
2023-07-10 23:56:40.196 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 188 msec}
2023-07-10 23:57:40.061 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:57:40.062 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:57:40.078 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 15 msec}
2023-07-10 23:57:41.296 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@da7ef00d
2023-07-10 23:57:41.297 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:57:41.299 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 1 msec}
2023-07-10 23:57:41.308 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권오현'
 {executed in 1 msec}
2023-07-10 23:57:41.330 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@da3eaab8
2023-07-10 23:57:41.330 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9d876499
2023-07-10 23:57:41.330 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:57:41.330 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:57:41.331 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:57:41.332 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 23:57:41.335 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권오현' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 23:57:41.546 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
52. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권오현','',k.emp_nm,'권오현')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 212 msec}
2023-07-10 23:57:51.737 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:57:51.738 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:57:51.739 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:57:52.851 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@53fa00a5
2023-07-10 23:57:52.852 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:57:52.854 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 1 msec}
2023-07-10 23:57:52.881 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@53b9bb50
2023-07-10 23:57:52.881 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:57:52.881 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:57:52.883 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@17027531
2023-07-10 23:57:52.883 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:57:52.883 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:57:52.884 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:57:52.885 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
53. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 0 msec}
2023-07-10 23:57:52.886 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 23:57:53.086 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
52. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 201 msec}
2023-07-10 23:58:00.725 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-10 23:58:00.726 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:58:00.727 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm, nvl(b.WORK_GROUP,'-') as work_group from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-07-10 23:58:01.682 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@53fa00a5
2023-07-10 23:58:01.683 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:58:01.686 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 0 msec}
2023-07-10 23:58:01.694 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 0 msec}
2023-07-10 23:58:01.712 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@53b9bb50
2023-07-10 23:58:01.712 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:58:01.712 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:58:01.713 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@17027531
2023-07-10 23:58:01.714 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-10 23:58:01.714 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:58:01.716 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권재범' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:58:01.922 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
52. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('권재범','',k.emp_nm,'권재범')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 207 msec}
2023-07-10 23:58:16.947 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e64b248d
2023-07-10 23:58:16.948 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:58:16.950 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'생년월일' AS a4, 		b.birth_ymd  AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호'
	order by 1
 {executed in 1 msec}
2023-07-10 23:58:16.978 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e60adf38
2023-07-10 23:58:16.978 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-10 23:58:16.978 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
2023-07-10 23:58:16.978 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a9539919
2023-07-10 23:58:16.979 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:58:16.979 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-10 23:58:16.979 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김권호'
 {executed in 1 msec}
2023-07-10 23:58:16.982 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-10 23:58:16.984 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김권호' and     a.work_date between '2023-01-01' and '2023-07-31' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-10 23:58:17.190 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
53. SELECT k.*
	FROM (
		SELECT 	ROW_NUMBER() over(ORDER BY sum(a.tot_point) desc) AS seq
			,	a.emp_nm
			,	b.sp_gb
			,	b.route_nm
			,	listagg(a.code_nm,'/') WITHIN GROUP (ORDER BY a.code_id)   AS codeList
			,	listagg(a.tot_point,'/') WITHIN GROUP (ORDER BY a.code_id) AS pointList
			,	listagg(a.point,'/') WITHIN GROUP (ORDER BY a.code_id) AS cntList
			,	listagg(a.code_max,'/') WITHIN GROUP (ORDER BY a.code_id) AS maxList
			,	sum(a.tot_point) AS tot_point
			,	nvl(to_char(datediff(DAY,b.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),0) AS totWorkingDay
			,	substring(b.birth_ymd,1,2) as birth_year
		FROM  TBM_EMP_POINT_INFO a join TBL_DRIVERINFO b on a.company_no = b.company_no AND a.emp_nm = b.emp_nm
		WHERE	a.company_no = '100'
		AND	 	a.from_date = '2023-01-01' 
		AND 	a.to_date = '2023-07-31' 
		AND 	b.route_nm = decode('','',b.route_nm,'') 
		AND 	b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL')
		GROUP BY a.emp_nm
		ORDER BY 1
	) K
	WHERE 	k.emp_nm = decode ('김권호','',k.emp_nm,'김권호')
	AND		round(k.totWorkingDay/365,0) >= 0
 {executed in 208 msec}
2023-07-10 23:59:32.282 INFO  [RMI TCP Connection(112)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-10 23:59:32.323 INFO  [RMI TCP Connection(112)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-10 23:59:32.325 INFO  [RMI TCP Connection(112)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-10 23:59:32.333 INFO  [RMI TCP Connection(112)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-10 23:59:32.381 INFO  [RMI TCP Connection(112)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
